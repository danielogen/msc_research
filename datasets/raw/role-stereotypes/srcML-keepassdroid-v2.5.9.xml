<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="keepassdroid-2.5.9">

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/android/keepass/KeePass.java" hash="4debf00bf6905599557fbb4bf7be92f0f650bfcb"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name><operator>.</operator><name>FileSelectActivity</name></name>;</import>

<class><specifier>public</specifier> class <name>KeePass</name> <super_list><extends>extends <super><name>Activity</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXIT_NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXIT_LOCK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXIT_REFRESH</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXIT_REFRESH_TITLE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startFileSelect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>startFileSelect</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name>EXIT_NORMAL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/AboutDialog.java" hash="86150992250d031990ac9e9fe573a9c9cd24b92c"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatDialog</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>AboutDialog</name> <super_list><extends>extends <super><name>AppCompatDialog</name></super></extends></super_list> <block>{
	
	<constructor><specifier>public</specifier> <name>AboutDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>okButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>about_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Context</name></type> <name>ctx</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>version</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<decl_stmt><decl><type><name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>packageInfo</name><operator>.</operator><name>versionName</name></name></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NameNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/CancelDialog.java" hash="69aca5b888930a39b5e2194166b7d5513be1eae8"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatDialog</name></name>;</import>

<class><specifier>public</specifier> class <name>CancelDialog</name> <super_list><extends>extends <super><name>AppCompatDialog</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mCanceled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> 
	
	<constructor><specifier>public</specifier> <name>CancelDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>canceled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>mCanceled</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mCanceled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/Database.java" hash="5e9b34cfd3a1aa85cab91e97b32b8e218a12fad1"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>ContentFileNotFoundException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidPasswordException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name><operator>.</operator><name>Importer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name><operator>.</operator><name>ImporterFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name><operator>.</operator><name>PwDbOutput</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name><operator>.</operator><name>DrawableFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>search</name><operator>.</operator><name>SearchDbHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>io</name><operator>.</operator><name>FileUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>SyncFailedException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author bpellin
 */</comment>
<class><specifier>public</specifier> class <name>Database</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Database</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>dirty</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>PwDatabase</name></type> <name>pm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Uri</name></type> <name>mUri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>SearchDbHelper</name></type> <name>searchHelper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>readOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>passwordEncodingError</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>DrawableFactory</name></type> <name>drawFactory</name> <init>= <expr><operator>new</operator> <call><name>DrawableFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>loaded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>Loaded</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>loaded</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLoaded</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name><name>Importer</name><operator>.</operator><name>DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name><name>Importer</name><operator>.</operator><name>DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><operator>!</operator><name><name>Importer</name><operator>.</operator><name>DEBUG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>mUri</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>readOnly</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>readOnly</name> <operator>=</operator> <operator>!</operator><call><name><name>file</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>passUrisAsInputStreams</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>debug</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidPasswordException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Retry with rounds fix</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>passUrisAsInputStreams</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>debug</name></expr></argument>, <argument><expr><call><name>getFixRounds</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Rethrow original exception</comment>
                <throw>throw <expr><name>e</name></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>long</name></type> <name>getFixRounds</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>roundsFix_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>roundsFix_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>passUrisAsInputStreams</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>FileNotFoundException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name></decl>, <decl><type ref="prev"/><name>kfIs</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>getUriInputStream</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"KPD"</literal></expr></argument>, <argument><expr><literal type="string">"Database::LoadData"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>ContentFileNotFoundException</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>kfIs</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>getUriInputStream</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"KPD"</literal></expr></argument>, <argument><expr><literal type="string">"Database::LoadData"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><call><name><name>ContentFileNotFoundException</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>debug</name></expr></argument>, <argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>kfIs</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>kfIs</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>debug</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>kfIs</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>bis</name><operator>.</operator><name>markSupported</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Input stream does not support mark."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// We'll end up reading 8 bytes to identify the header. Might as well use two extra.</comment>
        <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>mark</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Importer</name></type> <name>imp</name> <init>= <expr><call><name><name>ImporterFactory</name><operator>.</operator><name>createImporter</name></name><argument_list>(<argument><expr><name>bis</name></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Return to the start</comment>

        <expr_stmt><expr><name>pm</name> <operator>=</operator> <call><name><name>imp</name><operator>.</operator><name>openDatabase</name></name><argument_list>(<argument><expr><name>bis</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>( <expr><name>pm</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>PwGroup</name></type> <name>root</name> <init>= <expr><name><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>populateGlobals</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LoadData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>LoadData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><name>pm</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><name>passwordEncodingError</name> <operator>=</operator> <operator>!</operator><call><name><name>pm</name><operator>.</operator><name>validatePasswordEncoding</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>searchHelper</name> <operator>=</operator> <operator>new</operator> <call><name>SearchDbHelper</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PwGroup</name></type> <name>Search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>searchHelper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>searchHelper</name><operator>.</operator><name>search</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>SaveData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>SaveData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>SaveData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>tempFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name> <operator>+</operator> <literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>tempFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//BufferedOutputStream bos = new BufferedOutputStream(fos);</comment>

            <comment type="line">//PwDbV3Output pmo = new PwDbV3Output(pm, bos, App.getCalendar());</comment>
            <decl_stmt><decl><type><name>PwDbOutput</name></type> <name>pmo</name> <init>= <expr><call><name><name>PwDbOutput</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pmo</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//bos.flush();</comment>
            <comment type="line">//bos.close();</comment>
            <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Force data to disk before continuing</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>getFD</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SyncFailedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Ignore if fsync fails. We tried.</comment>
            </block_content>}</block></catch></try>

            <decl_stmt><decl><type><name>File</name></type> <name>orig</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>tempFile</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Failed to store database."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>os</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openOutputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Failed to store database."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <if_stmt><if>if <condition>(<expr><name>os</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Failed to store database."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>PwDbOutput</name></type> <name>pmo</name> <init>= <expr><call><name><name>PwDbOutput</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pmo</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>mUri</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dirty</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>drawFactory</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Delete the cache of the database if present</comment>
        <if_stmt><if>if <condition>(<expr><name>pm</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>clearCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">// In all cases, delete all the files in the temp dir</comment>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileUtils</name><operator>.</operator><name>cleanDirectory</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unable to clear the directory cache."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>pm</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mUri</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>loaded</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>passwordEncodingError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>markAllGroupsAsDirty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>( <init><decl><type><name>PwGroup</name></type> <name>group</name> <range>: <expr><call><name><name>pm</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// TODO: This should probably be abstracted out</comment>
        <comment type="line">// The root group in v3 is not an 'official' group</comment>
        <if_stmt><if>if <condition>( <expr><name>pm</name> <operator>instanceof</operator> <name>PwDatabaseV3</name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/EntryActivity.java" hash="6e58b7ef711b99a57e6f284dbe4465a1f38a9bcc"><comment type="block">/*
 * 
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Timer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimerTask</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>PasswordTransformationMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>util</name><operator>.</operator><name>Linkify</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>SamsungClipboardException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name><operator>.</operator><name>Intents</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>NotificationUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<class><specifier>public</specifier> class <name>EntryActivity</name> <super_list><extends>extends <super><name>LockCloseHideActivity</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_ENTRY</name> <init>= <expr><literal type="string">"entry"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_REFRESH_POS</name> <init>= <expr><literal type="string">"refresh_pos"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOTIFY_USERNAME</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NOTIFY_PASSWORD</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>pw</name> <operator>instanceof</operator> <name>PwEntryV4</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryActivityV4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><call><name><name>pw</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_REFRESH_POS</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>PwEntry</name></type> <name>mEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Timer</name></type> <name>mTimer</name> <init>= <expr><operator>new</operator> <call><name>Timer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mShowPassword</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>NotificationManager</name></type> <name>mNM</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>BroadcastReceiver</name></type> <name>mIntentReceiver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>readOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>dateFormat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>timeFormat</name></decl>;</decl_stmt>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setEntryView</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setupEditButtons</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Button</name></type> <name>edit</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_edit</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>EntryEditActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>EntryActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>mEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
			
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>readOnly</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>View</name></type> <name>divider</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_divider2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>divider</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <operator>!</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maskpass_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>maskpass_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setEntryView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Context</name></type> <name>appCtx</name> <init>= <expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>dateFormat</name> <operator>=</operator> <call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getDateFormat</name></name><argument_list>(<argument><expr><name>appCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>timeFormat</name> <operator>=</operator> <call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getTimeFormat</name></name><argument_list>(<argument><expr><name>appCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// Likely the app has been killed exit the activity </comment>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>db</name><operator>.</operator><name>Loaded</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>readOnly</name> <operator>=</operator> <name><name>db</name><operator>.</operator><name>readOnly</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mPos</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>KEY_REFRESH_POS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<assert>assert<expr><operator>(</operator><name>uuid</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mEntry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>entry_not_found</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Refresh Menu contents in case onCreateMenuOptions was called before mEntry was set</comment>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Update last access time.</comment>
		<expr_stmt><expr><call><name><name>mEntry</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>fillData</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setupEditButtons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Notification Manager</comment>
        <expr_stmt><expr><call><name><name>NotificationUtil</name><operator>.</operator><name>createChannels</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mNM</name> <operator>=</operator> <operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name>NOTIFICATION_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// only show notification if password is available</comment>
			<decl_stmt><decl><type><name>Notification</name></type> <name>password</name> <init>= <expr><call><name>getNotification</name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_PASSWORD</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>copy_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>mNM</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><name>NOTIFY_PASSWORD</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// only show notification if username is available</comment>
			<decl_stmt><decl><type><name>Notification</name></type> <name>username</name> <init>= <expr><call><name>getNotification</name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_USERNAME</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>copy_username</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>mNM</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><name>NOTIFY_USERNAME</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
			
		<expr_stmt><expr><name>mIntentReceiver</name> <operator>=</operator> <operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
			
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>( <expr><call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_USERNAME</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>String</name></type> <name>username</name> <init>= <expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>( <expr><call><name><name>username</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>timeoutCopyToClipboard</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_PASSWORD</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>( <expr><call><name><name>password</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>timeoutCopyToClipboard</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></function>
		}</block></class></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>IntentFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_USERNAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>COPY_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>mIntentReceiver</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// These members might never get initialized if the app timed out</comment>
		<if_stmt><if>if <condition>( <expr><name>mIntentReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>mIntentReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>mNM</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<try>try <block>{<block_content>
			    <expr_stmt><expr><call><name><name>mNM</name><operator>.</operator><name>cancelAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<comment type="line">// Some android devices give a SecurityException when trying to cancel notifications without the WAKE_LOCK permission,</comment>
				<comment type="line">// we'll ignore these.</comment>
			</block_content>}</block></catch></try>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>Notification</name></type> <name>getNotification</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>intentText</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>descResId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>desc</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>descResId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>intentText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PendingIntent</name></type> <name>pending</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_CANCEL_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
				<argument><expr><name><name>NotificationUtil</name><operator>.</operator><name>COPY_CHANNEL_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Notification</name></type> <name>notify</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setContentText</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
				<operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>notify</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTicker</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setWhen</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>notify</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>getDateTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>dt</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>timeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>fillData</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trimList</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ImageView</name></type> <name>iv</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>drawFactory</name><operator>.</operator><name>assignDrawableTo</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>db</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_title</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getTitle</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_user_name</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_url</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getUrl</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setPasswordStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_created</name></name></expr></argument>, <argument><expr><call><name>getDateTime</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_modified</name></name></expr></argument>, <argument><expr><call><name>getDateTime</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getLastModificationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_accessed</name></name></expr></argument>, <argument><expr><call><name>getDateTime</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getLastAccessTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Date</name></type> <name>expires</name> <init>= <expr><call><name><name>mEntry</name><operator>.</operator><name>getExpiryTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>mEntry</name><operator>.</operator><name>expires</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_expires</name></name></expr></argument>, <argument><expr><call><name>getDateTime</name><argument_list>(<argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_expires</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>never</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_comment</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getNotes</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>populateText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>viewId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>populateText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>viewId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>resultCode</name> <operator>==</operator> <name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH</name></name> <operator>||</operator> <name>resultCode</name> <operator>==</operator> <name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH_TITLE</name></name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fillData</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>( <expr><name>resultCode</name> <operator>==</operator> <name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH_TITLE</name></name></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>Intent</name></type> <name>ret</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_REFRESH_POS</name></expr></argument>, <argument><expr><name>mPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>entry</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>togglePassword</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_toggle_pass</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>togglePassword</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_hide_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>togglePassword</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_showpass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>gotoUrl</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_goto_url</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>copyUser</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_copy_user</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>copyPass</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_copy_pass</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// In API &gt;= 11 onCreateOptionsMenu may be called before onCreate completes</comment>
		<comment type="line">// so mEntry may not be set</comment>
		<if_stmt><if>if <condition>(<expr><name>mEntry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>gotoUrl</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>copyUser</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>copyPass</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>url</name> <init>= <expr><call><name><name>mEntry</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// disable button if url is not available</comment>
				<expr_stmt><expr><call><name><name>gotoUrl</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>( <expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
				<comment type="line">// disable button if username is not available</comment>
				<expr_stmt><expr><call><name><name>copyUser</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>( <expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
				<comment type="line">// disable button if password is not available</comment>
				<expr_stmt><expr><call><name><name>copyPass</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setPasswordStyle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setTransformationMethod</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setTransformationMethod</name></name><argument_list>(<argument><expr><call><name><name>PasswordTransformationMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_donate</name></name></expr>:</case>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>donate_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_failed_to_launch_link</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></catch></try>
			
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_toggle_pass</name></name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_showpass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_hide_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>setPasswordStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_goto_url</name></name></expr>:</case>
			<decl_stmt><decl><type><name>String</name></type> <name>url</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>url</name> <operator>=</operator> <call><name><name>mEntry</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line">// Default http:// if no protocol specified</comment>
			<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>url</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"://"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>url</name> <operator>=</operator> <literal type="string">"http://"</literal> <operator>+</operator> <name>url</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_url_handler</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_copy_user</name></name></expr>:</case>
			<expr_stmt><expr><call><name>timeoutCopyToClipboard</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_copy_pass</name></name></expr>:</case>
			<expr_stmt><expr><call><name>timeoutCopyToClipboard</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_lock</name></name></expr>:</case>
			<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></switch>
		
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>timeoutCopyToClipboard</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyToClipboard</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SamsungClipboardException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>showSamsungDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></catch></try>
		
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sClipClear</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_timeout_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_timeout_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>clipClearTime</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>sClipClear</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>clipClearTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mTimer</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ClearClipboardTask</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clipClearTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	

	<comment type="line">// Setup to allow the toast to happen in the foreground</comment>
	<decl_stmt><decl><type><specifier>final</specifier> <name>Handler</name></type> <name>uiThreadCallback</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Task which clears the clipboard, and sends a toast to the foreground.</comment>
	<class><specifier>private</specifier> class <name>ClearClipboardTask</name> <super_list><extends>extends <super><name>TimerTask</name></super></extends></super_list> <block>{
		
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>mClearText</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
		
		<constructor><name>ClearClipboardTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>clearText</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>mClearText</name> <operator>=</operator> <name>clearText</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
		
		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>currentClip</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getClipboard</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><call><name><name>currentClip</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>mClearText</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<try>try <block>{<block_content>
					<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyToClipboard</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>uiThreadCallback</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UIToastTask</name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ClearClipboard</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SamsungClipboardException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name><name>uiThreadCallback</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UIToastTask</name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_error_clear</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></catch></try>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></function>
	}</block></class>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>showSamsungDialog</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_error</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>concat</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>concat</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_error_url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SpannableString</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>new</operator> <call><name>TextView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setAutoLinkMask</name></name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Linkify</name><operator>.</operator><name>addLinks</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Linkify</name><operator>.</operator><name>WEB_URLS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_error_title</name></name></expr></argument>)</argument_list></call>
			<operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
				<function><annotation>@<name>Override</name></annotation>
				<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></function>
			}</block></class></expr></argument>)</argument_list></call>
			<operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call>
			<operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/EntryActivityV4.java" hash="a6ec19afb577cdfb3c9b675ea1034ebc472abf9a"><comment type="block">/*
 * Copyright 2010-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>SprEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>SprEngineV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>EntrySection</name></name>;</import>


<class><specifier>public</specifier> class <name>EntryActivityV4</name> <super_list><extends>extends <super><name>EntryActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>setEntryView</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_view_v4</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>fillData</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>trimList</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>fillData</name></name><argument_list>(<argument><expr><name>trimList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ViewGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>extra_strings</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>trimList</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>mEntry</name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>SprEngine</name></type> <name>spr</name> <init>= <expr><call><name><name>SprEngineV4</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// Display custom strings</comment>
		<if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></name></type> <name>pair</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PwEntryV4</name><operator>.</operator><name>IsStandardString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><operator>new</operator> <call><name>EntrySection</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>spr</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
			
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/EntryEditActivity.java" hash="8c615e22fb2a65f67e127b93ba9f41e04c48871a"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>AddEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>RunnableOnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>UpdateEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name><operator>.</operator><name>Icons</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>EntryEditActivity</name> <super_list><extends>extends <super><name>LockCloseHideActivity</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_ENTRY</name> <init>= <expr><literal type="string">"entry"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PARENT</name> <init>= <expr><literal type="string">"parent"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RESULT_OK_ICON_PICKER</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RESULT_OK_PASSWORD_GENERATOR</name> <init>= <expr><name>RESULT_OK_ICON_PICKER</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>protected</specifier> <name>PwEntry</name></type> <name>mEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mShowPassword</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>mIsNew</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>mSelectedIconID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pw</name> <operator>instanceof</operator> <name>PwEntryV3</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryEditActivityV3</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>pw</name> <operator>instanceof</operator> <name>PwEntryV4</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryEditActivityV4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Not yet implemented."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><call><name><name>pw</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>pw</name> <operator>instanceof</operator> <name>PwGroupV3</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryEditActivityV3</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>EntryEditActivityV3</name><operator>.</operator><name>putParentId</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>KEY_PARENT</name></expr></argument>, <argument><expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>pw</name> <operator>instanceof</operator> <name>PwGroupV4</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>EntryEditActivityV4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>EntryEditActivityV4</name><operator>.</operator><name>putParentId</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>KEY_PARENT</name></expr></argument>, <argument><expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Not yet implemented."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>PwGroupId</name></type> <name>getParentGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <operator>!</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maskpass_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>maskpass_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_edit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Likely the app has been killed exit the activity</comment>
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>db</name><operator>.</operator><name>Loaded</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>uuidBytes</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>db</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>uuidBytes</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>

			<decl_stmt><decl><type><name>PwGroupId</name></type> <name>parentId</name> <init>= <expr><call><name>getParentGroupId</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>KEY_PARENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <call><name><name>PwEntry</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mIsNew</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>uuidBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<assert>assert<expr><operator>(</operator><name>uuid</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

			<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mIsNew</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>fillData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt> 
	
		<decl_stmt><decl><type><name>View</name></type> <name>scrollView</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_scroll</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>scrollView</name><operator>.</operator><name>setScrollBarStyle</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>SCROLLBARS_INSIDE_INSET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>ImageButton</name></type> <name>iconButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>iconButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>IconPickerActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Generate password button</comment>
		<decl_stmt><decl><type><name>Button</name></type> <name>generatePassword</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>generate_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>generatePassword</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>GeneratePasswordActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Save button</comment>
		<decl_stmt><decl><type><name>Button</name></type> <name>save</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_save</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>EntryEditActivity</name></type> <name>act</name> <init>= <expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateBeforeSaving</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				
				<decl_stmt><decl><type><name>PwEntry</name></type> <name>newEntry</name> <init>= <expr><call><name>populateNewEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>( <expr><call><name><name>newEntry</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_REFRESH_TITLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				
				<decl_stmt><decl><type><name>RunnableOnFinish</name></type> <name>task</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>OnFinish</name></type> <name>onFinish</name> <init>= <expr><name><name>act</name><operator>.</operator></name>new <call><name>AfterSave</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>( <expr><name>mIsNew</name></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><name>task</name> <operator>=</operator> <call><name><name>AddEntry</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newEntry</name></expr></argument>, <argument><expr><name>onFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name>task</name> <operator>=</operator> <operator>new</operator> <call><name>UpdateEntry</name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mEntry</name></expr></argument>, <argument><expr><name>newEntry</name></expr></argument>, <argument><expr><name>onFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
			
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Cancel button</comment>
		<decl_stmt><decl><type><name>Button</name></type> <name>cancel</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			</block_content>}</block></function>
			
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Respect mask password setting</comment>
		<if_stmt><if>if <condition>(<expr><name>mShowPassword</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>EditText</name></type> <name>pass</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>EditText</name></type> <name>conf</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_confpassword</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>pass</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>conf</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>boolean</name></type> <name>validateBeforeSaving</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Require title</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>title</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_title_required</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Validate password</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>conf</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_confpassword</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>pass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_pass_match</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>PwEntry</name></type> <name>populateNewEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>populateNewEntry</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>PwEntry</name></type> <name>populateNewEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntry</name></type> <name>newEntry</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>newEntry</name> <operator>=</operator> <call><name><name>mEntry</name><operator>.</operator><name>clone</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> 
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>newEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			
		</block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setLastAccessTime</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setLastModificationTime</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_title</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setUrl</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_url</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setUsername</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_user_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setNotes</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_comment</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
	    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>resultCode</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RESULT_OK_ICON_PICKER</name></expr>:</case>
				<expr_stmt><expr><name>mSelectedIconID</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>IconPickerActivity</name><operator>.</operator><name>KEY_ICON_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ImageButton</name></type> <name>currIconButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>currIconButton</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>Icons</name><operator>.</operator><name>iconToResId</name></name><argument_list>(<argument><expr><name>mSelectedIconID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>RESULT_OK_PASSWORD_GENERATOR</name></expr>:</case>
				<decl_stmt><decl><type><name>String</name></type> <name>generatedPassword</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><literal type="string">"com.keepassdroid.password.generated_password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>EditText</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>EditText</name></type> <name>confPassword</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_confpassword</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>generatedPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>confPassword</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>generatedPassword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<break>break;</break>
			<case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr>:</case>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>entry_edit</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<decl_stmt><decl><type><name>MenuItem</name></type> <name>togglePassword</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_toggle_pass</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>togglePassword</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_hide_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>togglePassword</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_showpass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_donate</name></name></expr>:</case>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>donate_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_failed_to_launch_link</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></catch></try>
			
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_toggle_pass</name></name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_showpass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_hide_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>mShowPassword</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>setPasswordStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></switch>
		
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setPasswordStyle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TextView</name></type> <name>confpassword</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_confpassword</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>( <expr><name>mShowPassword</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>confpassword</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>confpassword</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>void</name></type> <name>fillData</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ImageButton</name></type> <name>currIconButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>drawFactory</name><operator>.</operator><name>assignDrawableTo</name></name><argument_list>(<argument><expr><name>currIconButton</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_title</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_user_name</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_url</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_password</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_confpassword</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setPasswordStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>populateText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_comment</name></name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getNotes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>populateText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>viewId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>viewId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> <specifier>final</specifier> class <name>AfterSave</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{

		<constructor><specifier>public</specifier> <name>AfterSave</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></function>
		
	}</block></class>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/EntryEditActivityV3.java" hash="496a5d05325840a27fb84b671937709bced0e5c8"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupIdV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>

<class><specifier>public</specifier> class <name>EntryEditActivityV3</name> <super_list><extends>extends <super><name>EntryEditActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwEntry</name></type> <name>populateNewEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntry</name></type> <name>newEntry</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>populateNewEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>mSelectedIconID</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>mIsNew</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>pm</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<comment type="line">//Â KeepÂ previousÂ icon,Â ifÂ noÂ newÂ oneÂ wasÂ selected</comment>
				<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name><name>mEntry</name><operator>.</operator><name>icon</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>pm</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name>mSelectedIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>putParentId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentKey</name></decl></parameter>, <parameter><decl><type><name>PwGroupV3</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>parentKey</name></expr></argument>, <argument><expr><name><name>parent</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwGroupId</name></type> <name>getParentGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>groupId</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV3</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/EntryEditActivityV4.java" hash="63d9beb57925ca49b51daf2ebcc85eb78e7935f2"><comment type="block">/*
 * Copyright 2013-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ScrollView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupIdV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>EntryEditSection</name></name>;</import>

<class><specifier>public</specifier> class <name>EntryEditActivityV4</name> <super_list><extends>extends <super><name>EntryEditActivity</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>ScrollView</name></type> <name>scroll</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

	<function><type><specifier>protected</specifier> <specifier>static</specifier> <name>void</name></type> <name>putParentId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>parentKey</name></decl></parameter>, <parameter><decl><type><name>PwGroupV4</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupId</name></type> <name>id</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroupIdV4</name></type> <name>id4</name> <init>= <expr><operator>(</operator><name>PwGroupIdV4</name><operator>)</operator> <name>id</name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>parentKey</name></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><call><name><name>id4</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwGroupId</name></type> <name>getParentGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getByteArrayExtra</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UUID</name></type> <name>id</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>inflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>this</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>scroll</name> <operator>=</operator> <operator>(</operator><name>ScrollView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_scroll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ImageButton</name></type> <name>add</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_advanced</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>add</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>add</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>LinearLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>advanced_container</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name>EntryEditSection</name></type> <name>ees</name> <init>= <expr><operator>(</operator><name>EntryEditSection</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_edit_section</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>ees</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ProtectedString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>ees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="line">// Scroll bottom</comment>
				<expr_stmt><expr><call><name><name>scroll</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
					<function><annotation>@<name>Override</name></annotation>
					<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
						<expr_stmt><expr><call><name><name>scroll</name><operator>.</operator><name>fullScroll</name></name><argument_list>(<argument><expr><name><name>ScrollView</name><operator>.</operator><name>FOCUS_DOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ImageButton</name></type> <name>iconPicker</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>iconPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>divider</name> <init>= <expr><operator>(</operator><name>View</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>divider_title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lp_div</name> <init>= <expr><operator>(</operator><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>divider</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lp_div</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>BELOW</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>user_label</name> <init>= <expr><operator>(</operator><name>View</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_user_name_label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lp</name> <init>= <expr><operator>(</operator><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>user_label</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lp</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>BELOW</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>divider_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>fillData</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>fillData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>mEntry</name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>LinearLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>advanced_container</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PwEntryV4</name><operator>.</operator><name>IsStandardString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>EntryEditSection</name></type> <name>ees</name> <init>= <expr><operator>(</operator><name>EntryEditSection</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_edit_section</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>ees</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>ees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwEntry</name></type> <name>populateNewEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>newEntry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <call><name><name>mEntry</name><operator>.</operator><name>clone</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>history</name></name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>newEntry</name><operator>.</operator><name>history</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>createBackup</name></name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>newEntry</name> <operator>=</operator> <operator>(</operator><name>PwEntryV4</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>populateNewEntry</name></name><argument_list>(<argument><expr><name>newEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>strings</name> <init>= <expr><name><name>newEntry</name><operator>.</operator><name>strings</name></name></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// Delete all new standard strings</comment>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>pair</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>PwEntryV4</name><operator>.</operator><name>IsStandardString</name></name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>iter</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		
		<decl_stmt><decl><type><name>LinearLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>advanced_container</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>container</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>container</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>TextView</name></type> <name>keyView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>keyView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>TextView</name></type> <name>valueView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>valueView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>CheckBox</name></type> <name>cb</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>protection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><call><name><name>cb</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ProtectedString</name><argument_list>(<argument><expr><name>protect</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>deleteAdvancedString</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>EntryEditSection</name></type> <name>section</name> <init>= <expr><operator>(</operator><name>EntryEditSection</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LinearLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>advanced_container</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>container</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>EntryEditSection</name></type> <name>ees</name> <init>= <expr><operator>(</operator><name>EntryEditSection</name><operator>)</operator> <call><name><name>container</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>ees</name> <operator>==</operator> <name>section</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>removeViewAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>boolean</name></type> <name>validateBeforeSaving</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>super</name><operator>.</operator><name>validateBeforeSaving</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>LinearLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>advanced_container</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>container</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>EntryEditSection</name></type> <name>ees</name> <init>= <expr><operator>(</operator><name>EntryEditSection</name><operator>)</operator> <call><name><name>container</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>TextView</name></type> <name>keyView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>ees</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>CharSequence</name></type> <name>key</name> <init>= <expr><call><name><name>keyView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_string_key</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
		</block_content>}</block></for>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

}</block></class>
 </unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GeneratePasswordActivity.java" hash="0d707b8f3a5e13e032f3012e678e9b0bf7f9500b"><comment type="block">/*
 * Copyright 2010 Tolga Onbay, Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>password</name><operator>.</operator><name>PasswordGenerator</name></name>;</import>

<class><specifier>public</specifier> class <name>GeneratePasswordActivity</name> <super_list><extends>extends <super><name>LockCloseActivity</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>BUTTON_IDS</name> <init>= <expr><operator>new</operator> <name><name>int</name> <index>[]</index></name> <block>{<expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btn_length6</name></name></expr>, <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btn_length8</name></name></expr>, <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btn_length12</name></name></expr>, <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btn_length16</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>GeneratePasswordActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>OnClickListener</name></type> <name>lengthButtonsListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
	    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
	    	<decl_stmt><decl><type><name>Button</name></type> <name>button</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
	    	
	    	<decl_stmt><decl><type><name>EditText</name></type> <name>editText</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    	<expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>button</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></function>
	}</block></class></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>generate_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <range>: <expr><name>BUTTON_IDS</name></expr></range></decl></init>)</control> <block>{<block_content>
        	<decl_stmt><decl><type><name>Button</name></type> <name>button</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        	<expr_stmt><expr><call><name><name>button</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>lengthButtonsListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>genPassButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>generate_password_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>genPassButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>fillPassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>Button</name></type> <name>acceptButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>accept_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>acceptButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>EditText</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"com.keepassdroid.password.generated_password"</literal></expr></argument>, <argument><expr><call><name><name>password</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>RESULT_OK_PASSWORD_GENERATOR</name></name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>Button</name></type> <name>cancelButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cancel_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_CANCELED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Pre-populate a password to possibly save the user a few clicks</comment>
        <expr_stmt><expr><call><name>fillPassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>fillPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>EditText</name></type> <name>txtPassword</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>txtPassword</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>generatePassword</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generatePassword</name><parameter_list>()</parameter_list> <block>{<block_content>
    	<decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    	
    	<try>try <block>{<block_content>
    		<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    		
    		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_uppercase</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        	
        	<decl_stmt><decl><type><name>PasswordGenerator</name></type> <name>generator</name> <init>= <expr><operator>new</operator> <call><name>PasswordGenerator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       	
	    	<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name><name>generator</name><operator>.</operator><name>generatePassword</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_uppercase</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_lowercase</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_digits</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_minus</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_underline</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_space</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_specials</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>,
	    			<argument><expr><operator>(</operator><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cb_brackets</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_wrong_length</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
    	
    	<return>return <expr><name>password</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GroupActivity.java" hash="98d279aa4f58ffb2c090490ffbdd0655b121c201"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name><operator>.</operator><name>AdapterContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>AddGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name><operator>.</operator><name>ReadOnlyDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>ClickView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupAddEntryView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupRootView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupViewOnlyView</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>GroupActivity</name> <super_list><extends>extends <super><name>GroupBaseActivity</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNINIT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>addGroupEnabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>addEntryEnabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>isRoot</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>readOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"Group Activity:"</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>Launch</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name></decl>;</decl_stmt>
		
		<comment type="line">// Need to use PwDatabase since group may be null</comment>
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pm</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>db</name> <operator>instanceof</operator> <name>PwDatabaseV3</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>GroupActivityV3</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
			<if_stmt><if>if <condition>( <expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <name>group</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>db</name> <operator>instanceof</operator> <name>PwDatabaseV4</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>GroupActivityV4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>group</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>, <argument><expr><call><name><name>g</name><operator>.</operator><name>uuid</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Reached if db is null</comment>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Tried to launch with null db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>PwGroupId</name></type> <name>retrieveGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setupButtons</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>addGroupEnabled</name> <operator>=</operator> <operator>!</operator><name>readOnly</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name>isFinishing</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Creating group view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>PwGroupId</name></type> <name>id</name> <init>= <expr><call><name>retrieveGroupId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>readOnly</name> <operator>=</operator> <name><name>db</name><operator>.</operator><name>readOnly</name></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>root</name> <init>= <expr><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>id</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Retrieved group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>mGroup</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Group was null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>isRoot</name> <operator>=</operator> <name>mGroup</name> <operator>==</operator> <name>root</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setupButtons</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><name>addGroupEnabled</name> <operator>&amp;&amp;</operator> <name>addEntryEnabled</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupAddEntryView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>addGroupEnabled</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupRootView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>addEntryEnabled</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupAddEntryView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Button</name></type> <name>addGroup</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>addGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupViewOnlyView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><name>addGroupEnabled</name></expr> )</condition> <block>{<block_content>
			<comment type="line">// Add Group button</comment>
			<decl_stmt><decl><type><name>Button</name></type> <name>addGroup</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>addGroup</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

				<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name><name>GroupEditActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>GroupActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>addEntryEnabled</name></expr> )</condition> <block>{<block_content>
			<comment type="line">// Add Entry button</comment>
			<decl_stmt><decl><type><name>Button</name></type> <name>addEntry</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>addEntry</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
	
				<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name><name>EntryEditActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>GroupActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>setGroupTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setGroupIcon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PwGroupListAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>registerForContextMenu</name><argument_list>(<argument><expr><call><name>getListView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Finished creating group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>isRoot</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>showWarnings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreateContextMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>,
			<parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<decl_stmt><decl><type><name>AdapterContextMenuInfo</name></type> <name>acmi</name> <init>= <expr><operator>(</operator><name>AdapterContextMenuInfo</name><operator>)</operator> <name>menuInfo</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ClickView</name></type> <name>cv</name> <init>= <expr><operator>(</operator><name>ClickView</name><operator>)</operator> <name><name>acmi</name><operator>.</operator><name>targetView</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cv</name><operator>.</operator><name>onCreateMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>menuInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>AdapterContextMenuInfo</name></type> <name>acmi</name> <init>= <expr><operator>(</operator><name>AdapterContextMenuInfo</name><operator>)</operator> <call><name><name>item</name><operator>.</operator><name>getMenuInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ClickView</name></type> <name>cv</name> <init>= <expr><operator>(</operator><name>ClickView</name><operator>)</operator> <name><name>acmi</name><operator>.</operator><name>targetView</name></name></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name><name>cv</name><operator>.</operator><name>onContextItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>resultCode</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>:</case>
				<decl_stmt><decl><type><name>String</name></type> <name>GroupName</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>GroupEditActivity</name><operator>.</operator><name>KEY_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>GroupIconID</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>GroupEditActivity</name><operator>.</operator><name>KEY_ICON_ID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>GroupActivity</name></type> <name>act</name> <init>= <expr><name><name>GroupActivity</name><operator>.</operator><name>this</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>AddGroup</name></type> <name>task</name> <init>= <expr><call><name><name>AddGroup</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GroupName</name></expr></argument>, <argument><expr><name>GroupIconID</name></expr></argument>, <argument><expr><name>mGroup</name></expr></argument>, <argument><expr><name><name>act</name><operator>.</operator></name>new <call><name>RefreshTask</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr>:</case>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>showWarnings</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
		    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    
		    <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>show_read_only_warning</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			    <decl_stmt><decl><type><name>Dialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>ReadOnlyDialog</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GroupActivityV3.java" hash="29d3b3b5779050f4c4fd6b354eae7345d8305f87"><comment type="block">/*
 * Copyright 2010-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupIdV3</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupActivityV3</name> <super_list><extends>extends <super><name>GroupActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwGroupIdV3</name></type> <name>retrieveGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>id</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV3</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>setupButtons</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setupButtons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addEntryEnabled</name> <operator>=</operator> <operator>!</operator><name>isRoot</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>readOnly</name></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GroupActivityV4.java" hash="3094c4cdca7099cc58d50d3af94791959423e4fa"><comment type="block">/*
 * Copyright 2010-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupIdV4</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupActivityV4</name> <super_list><extends>extends <super><name>GroupActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwGroupId</name></type> <name>retrieveGroupId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>uuid</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>KEY_ENTRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>uuid</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><call><name><name>UUID</name><operator>.</operator><name>fromString</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>setupButtons</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setupButtons</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>addEntryEnabled</name> <operator>=</operator> <operator>!</operator><name>readOnly</name></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GroupBaseActivity.java" hash="4fef14fb5aba4068018fb2999ba0b8b8c1bde0c2"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name><operator>.</operator><name>AppSettingsActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>ClickView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupViewOnlyView</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>GroupBaseActivity</name> <super_list><extends>extends <super><name>LockCloseListActivity</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name>ListView</name></type> <name>mList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>ListAdapter</name></type> <name>mAdapter</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_ENTRY</name> <init>= <expr><literal type="string">"entry"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_MODE</name> <init>= <expr><literal type="string">"mode"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>PwGroup</name></type> <name>mGroup</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>refreshIfDirty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>refreshIfDirty</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>db</name><operator>.</operator><name>dirty</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>dirty</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>BaseAdapter</name><operator>)</operator> <name>mAdapter</name><operator>)</operator><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><name>ListView</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ClickView</name></type> <name>cv</name> <init>= <expr><operator>(</operator><name>ClickView</name><operator>)</operator> <call><name><name>mAdapter</name><operator>.</operator><name>getView</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cv</name><operator>.</operator><name>onClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Likely the app has been killed exit the activity </comment>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Loaded</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupViewOnlyView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>styleScrollBars</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>styleScrollBars</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>ensureCorrectListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setScrollBarStyle</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>SCROLLBARS_INSIDE_INSET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setTextFilterEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setGroupTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>mGroup</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>tv</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>tv</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setGroupIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>mGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ImageView</name></type> <name>iv</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>drawFactory</name><operator>.</operator><name>assignDrawableTo</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mGroup</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>void</name></type> <name>setListAdapter</name><parameter_list>(<parameter><decl><type><name>ListAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>ensureCorrectListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <name>adapter</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>ListView</name></type> <name>getListView</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>ensureCorrectListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>mList</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>ensureCorrectListView</name><parameter_list>()</parameter_list><block>{<block_content>
		<expr_stmt><expr><name>mList</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(
					<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></super><argument_list>()</argument_list> <block>{
						<function><type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
							<expr_stmt><expr><call><name>onListItemClick</name><argument_list>(<argument><expr><operator>(</operator><name>ListView</name><operator>)</operator> <name>parent</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></function>
					}</block></class></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setSortMenuText</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>boolean</name></type> <name>sortByName</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<comment type="line">// Will be null if onPrepareOptionsMenu is called before onCreate</comment>
		<if_stmt><if>if <condition>(<expr><name>prefs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>sortByName</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sort_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>sort_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>resId</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>sortByName</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>resId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sort_db</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>resId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sort_name</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
			
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_sort</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>setSortMenuText</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_donate</name></name></expr>:</case>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>donate_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_failed_to_launch_link</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></catch></try>
			
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_lock</name></name></expr>:</case>
			<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr>:</case>
			<expr_stmt><expr><call><name>onSearchRequested</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_app_settings</name></name></expr>:</case>
			<expr_stmt><expr><call><name><name>AppSettingsActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>

		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_change_master_key</name></name></expr>:</case>
			<expr_stmt><expr><call><name>setPassword</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_sort</name></name></expr>:</case>
			<expr_stmt><expr><call><name>toggleSort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>

		</block_content>}</block></switch>
		
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>toggleSort</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Toggle setting</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>sortKey</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sort_key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>sortByName</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>sortKey</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>sort_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Editor</name></type> <name>editor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>sortKey</name></expr></argument>, <argument><expr><operator>!</operator> <name>sortByName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Refresh menu titles</comment>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidateOptionsMenu</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Mark all groups as dirty now to refresh them on load</comment>
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>markAllGroupsAsDirty</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// We'll manually refresh this group so we can remove it</comment>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>dirty</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Tell the adapter to refresh it's list</comment>
		<expr_stmt><expr><operator>(</operator><operator>(</operator><name>BaseAdapter</name><operator>)</operator> <name>mAdapter</name><operator>)</operator><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SetPasswordDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>SetPasswordDialog</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>public</specifier> class <name>RefreshTask</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<constructor><specifier>public</specifier> <name>RefreshTask</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>refreshIfDirty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><name><name>GroupBaseActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></function>
	}</block></class>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>startActivityForResult</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="block">/*
		 * ACTION_SEARCH automatically forces a new task. This occurs when you open a kdb file in
		 * another app such as Files or GoogleDrive and then Search for an entry. Here we remove the
		 * FLAG_ACTIVITY_NEW_TASK flag bit allowing search to open it's activity in the current task.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_SEARCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getFlags</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>public</specifier> class <name>AfterDeleteGroup</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<constructor><specifier>public</specifier> <name>AfterDeleteGroup</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>refreshIfDirty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UIToastTask</name><argument_list>(<argument><expr><name><name>GroupBaseActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="string">"Unrecoverable error: "</literal> <operator>+</operator> <name>mMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/GroupEditActivity.java" hash="1dcfcc303ef7f9b304f0129099ef1b55104602cb"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name><operator>.</operator><name>Icons</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupEditActivity</name> <super_list><extends>extends <super><name>AppCompatActivity</name></super></extends></super_list>
<block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_ICON_ID</name> <init>= <expr><literal type="string">"icon_id"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mSelectedIconID</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>GroupEditActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_edit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>add_group_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ImageButton</name></type> <name>iconButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>iconButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list>
		<block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list>
			<block>{<block_content>
				<expr_stmt><expr><call><name><name>IconPickerActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>GroupEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>okButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list>
		<block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TextView</name></type> <name>nameField</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>nameField</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_NAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ICON_ID</name></expr></argument>, <argument><expr><name>mSelectedIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> 
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>GroupEditActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_no_name</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Button</name></type> <name>cancel</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list>
		<block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>resultCode</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name><name>EntryEditActivity</name><operator>.</operator><name>RESULT_OK_ICON_PICKER</name></name></expr>:</case>
				<expr_stmt><expr><name>mSelectedIconID</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>IconPickerActivity</name><operator>.</operator><name>KEY_ICON_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ImageButton</name></type> <name>currIconButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>currIconButton</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>Icons</name><operator>.</operator><name>iconToResId</name></name><argument_list>(<argument><expr><name>mSelectedIconID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr>:</case>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/IconPickerActivity.java" hash="38fd5d3cda40c26f772d38f2c6cf8590170e3f4d"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>GridView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name><operator>.</operator><name>Icons</name></name>;</import>

<class><specifier>public</specifier> class <name>IconPickerActivity</name> <super_list><extends>extends <super><name>LockCloseActivity</name></super></extends></super_list>
<block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_ICON_ID</name> <init>= <expr><literal type="string">"icon_id"</literal></expr></init></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>IconPickerActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

   <function><annotation>@<name>Override</name></annotation>
   <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list>
   <block>{<block_content>
   	<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   	<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>icon_picker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   	<decl_stmt><decl><type><name>GridView</name></type> <name>currIconGridView</name> <init>= <expr><operator>(</operator><name>GridView</name><operator>)</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>IconGridView</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   	<expr_stmt><expr><call><name><name>currIconGridView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   	<expr_stmt><expr><call><name><name>currIconGridView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnItemClickListener</name></super><argument_list>()</argument_list>
   	<block>{
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_ICON_ID</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>EntryEditActivity</name><operator>.</operator><name>RESULT_OK_ICON_PICKER</name></name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
   	}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
   
   <class><specifier>public</specifier> class <name>ImageAdapter</name> <super_list><extends>extends <super><name>BaseAdapter</name></super></extends></super_list>
   <block>{
   	<decl_stmt><decl><type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>

   	<constructor><specifier>public</specifier> <name>ImageAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>c</name></decl></parameter>)</parameter_list>
   	<block>{<block_content>
   		<expr_stmt><expr><name>mContext</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
   	</block_content>}</block></constructor>
   	
   	<function><type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list>
   	<block>{<block_content>
   		<comment type="block">/* Return number of KeePass icons */</comment>
   		<return>return <expr><call><name><name>Icons</name><operator>.</operator><name>count</name></name><argument_list>()</argument_list></call></expr>;</return>
   	</block_content>}</block></function>
   	
   	<function><type><specifier>public</specifier> <name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
		<block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></function>

		<function><type><specifier>public</specifier> <name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>
		<block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></function>
   	
   	<function><type><specifier>public</specifier> <name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list>
   	<block>{<block_content>
   		<decl_stmt><decl><type><name>View</name></type> <name>currView</name></decl>;</decl_stmt>
   		<if_stmt><if>if<condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
   		<block>{<block_content>
   			<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>li</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
   			<expr_stmt><expr><name>currView</name> <operator>=</operator> <call><name><name>li</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>icon</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   		</block_content>}</block></if>
   		<else>else
   		<block>{<block_content>
   			<expr_stmt><expr><name>currView</name> <operator>=</operator> <name>convertView</name></expr>;</expr_stmt>
   		</block_content>}</block></else></if_stmt>
   		
   		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>currView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_text</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   		<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   		<decl_stmt><decl><type><name>ImageView</name></type> <name>iv</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>currView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   		<expr_stmt><expr><call><name><name>iv</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>Icons</name><operator>.</operator><name>iconToResId</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
   		<return>return <expr><name>currView</name></expr>;</return>
   	</block_content>}</block></function>
   }</block></class>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockCloseActivity.java" hash="d462dfd21482cc79c5b70b8f6a1d01ba165a2a65"><comment type="block">/*
 * Copyright 2009-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LockCloseActivity</name> <super_list><extends>extends <super><name>LockingActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>checkShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>checkShutdown</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><call><name><name>App</name><operator>.</operator><name>isShutdown</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Loaded</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>

	<comment type="block">/* (non-Javadoc) Workaround for HTC Linkify issues 
	 * @see android.app.Activity#startActivity(android.content.Intent)
	 */</comment>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>startActivity</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getComponent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getComponent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getShortClassName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">".HtcLinkifyDispatcherActivity"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setComponent</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<comment type="block">/* Catch the bad HTC implementation case */</comment>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><call><name><name>Intent</name><operator>.</operator><name>createChooser</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockCloseHideActivity.java" hash="84acb1c373da362402c2fc2e9b8249b9fae0f14b"><comment type="block">/*
 * Copyright 2015-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name><operator>.</operator><name>LayoutParams</name></name>;</import>

<comment type="block" format="javadoc">/** 
 * Locking Close Activity that sets FLAG_SECURE to prevent screenshots, and from
 * appearing in the recent app preview
 * @author Brian Pellin
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LockCloseHideActivity</name> <super_list><extends>extends <super><name>LockCloseActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Several gingerbread devices have problems with FLAG_SECURE</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ver</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>GINGERBREAD</name></name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFlags</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FLAG_SECURE</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FLAG_SECURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockCloseListActivity.java" hash="402994a74e86a1e815300addbc159ffa0c6b4cd8"><comment type="block">/*
 * Copyright 2012-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timeout</name><operator>.</operator><name>TimeoutHelper</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LockCloseListActivity</name> <super_list><extends>extends <super><name>LockingActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>checkShutdown</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockingActivity.java" hash="ee9dfbe9315fae89b3fbea00d6f2fc55adfa42ad"><comment type="block">/*
 * Copyright 2012-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timeout</name><operator>.</operator><name>TimeoutHelper</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LockingActivity</name> <super_list><extends>extends <super><name>AppCompatActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>pause</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockingClosePreferenceActivity.java" hash="228599a03cdaf0b3561460fe989f8cc76817e975"><comment type="block">/*
 * Copyright 2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timeout</name><operator>.</operator><name>TimeoutHelper</name></name>;</import>

<class><specifier>public</specifier> class <name>LockingClosePreferenceActivity</name> <super_list><extends>extends <super><name>LockingPreferenceActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>checkShutdown</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/LockingPreferenceActivity.java" hash="4550c3f3634b7e3926db2dec4020954cf2ebc7c3"><comment type="block">/*
 * Copyright 2012-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceActivity</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timeout</name><operator>.</operator><name>TimeoutHelper</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LockingPreferenceActivity</name> <super_list><extends>extends <super><name>PreferenceActivity</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>pause</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>TimeoutHelper</name><operator>.</operator><name>resume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/PasswordActivity.java" hash="fda5488776e66756ff9bfacdd8d2cb9132b6d668"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordActivity</name> <super_list><extends>extends <super><name>LockingActivity</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_DEFAULT_FILENAME</name> <init>= <expr><literal type="string">"defaultFileName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_FILENAME</name> <init>= <expr><literal type="string">"fileName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_KEYFILE</name> <init>= <expr><literal type="string">"keyFile"</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>READ_WRITE_PERMISSIONS</name> <init>=
            <expr><block>{<expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr>, <expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>



    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(
            <parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>Launch</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(
            <parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>keyFile</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>scheme</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>File</name></type> <name>dbFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dbFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_FILENAME</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>KEY_KEYFILE</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>password_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/ProgressTask.java" hash="64d8ca7c6311fc961325dafb7706ffb6197ed02f"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>RunnableOnFinish</name></name>;</import>

<comment type="block" format="javadoc">/** Designed to Pop up a progress dialog, run a thread in the background, 
 *  run cleanup in the current thread, close the dialog.  Without blocking 
 *  the current thread.
 *  
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>ProgressTask</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>Activity</name></type> <name>mAct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Handler</name></type> <name>mHandler</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>RunnableOnFinish</name></type> <name>mTask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>mPd</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>ProgressTask</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>RunnableOnFinish</name></type> <name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mAct</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mTask</name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mHandler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Show process dialog</comment>
		<expr_stmt><expr><name>mPd</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mPd</name><operator>.</operator><name>setCanceledOnTouchOutside</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mPd</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>act</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>progress_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mPd</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>act</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Set code to run when this is finished</comment>
		<expr_stmt><expr><call><name><name>mTask</name><operator>.</operator><name>setStatus</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>mHandler</name></expr></argument>, <argument><expr><name>mPd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mTask</name><operator>.</operator><name>mFinish</name></name> <operator>=</operator> <operator>new</operator> <call><name>AfterTask</name><argument_list>(<argument><expr><name><name>task</name><operator>.</operator><name>mFinish</name></name></expr></argument>, <argument><expr><name>mHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Show process dialog</comment>
		<expr_stmt><expr><call><name><name>mPd</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Start Thread to Run task</comment>
		<decl_stmt><decl><type><name>Thread</name></type> <name>t</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>mTask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterTask</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		
		<constructor><specifier>public</specifier> <name>AfterTask</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Remove the progress dialog</comment>
			<expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CloseProcessDialog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
		
	}</block></class>
	
	<class><specifier>private</specifier> class <name>CloseProcessDialog</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

		<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>Activity</name></type> <name>act</name> <init>= <expr><call><name><name>mPd</name><operator>.</operator><name>getOwnerActivity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>act</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>act</name><operator>.</operator><name>isFinishing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>boolean</name></type> <name>isDestroyed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr>)</condition> <block>{<block_content>
			    <expr_stmt><expr><name>isDestroyed</name> <operator>=</operator> <call><name><name>mAct</name><operator>.</operator><name>isDestroyed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>( <expr><operator>(</operator><name>mPd</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>mPd</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>isDestroyed</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>mPd</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></function>
		
	}</block></class>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/PwGroupListAdapter.java" hash="4b2bd9deb289f696c24df134664070e2f0062daf"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>PwEntryView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>PwGroupView</name></name>;</import>

<class><specifier>public</specifier> class <name>PwGroupListAdapter</name> <super_list><extends>extends <super><name>BaseAdapter</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>GroupBaseActivity</name></type> <name>mAct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroup</name></type> <name>mGroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groupsForViewing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>entriesForViewing</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>entryComp</name> <init>= <expr><operator>new</operator> <call><name><name>PwEntry</name><operator>.</operator><name>EntryNameComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groupComp</name> <init>= <expr><operator>new</operator> <call><name><name>PwGroup</name><operator>.</operator><name>GroupNameComparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwGroupListAdapter</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mAct</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>filterAndSort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>notifyDataSetChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>filterAndSort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>notifyDataSetInvalidated</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>notifyDataSetInvalidated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>filterAndSort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>filterAndSort</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>entriesForViewing</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mGroup</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>mGroup</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>entry</name><operator>.</operator><name>isMetaStream</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>entriesForViewing</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>sortLists</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>mAct</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>sort_key</name></name></expr></argument>)</argument_list></call></expr></argument>,	<argument><expr><call><name><name>mAct</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>sort_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		<if_stmt><if>if <condition>( <expr><name>sortLists</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>groupsForViewing</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mGroup</name><operator>.</operator><name>childGroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>entriesForViewing</name></expr></argument>, <argument><expr><name>entryComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>groupsForViewing</name></expr></argument>, <argument><expr><name>groupComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>groupsForViewing</name> <operator>=</operator> <name><name>mGroup</name><operator>.</operator><name>childGroups</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{<block_content>
		
		<return>return <expr><call><name><name>groupsForViewing</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>entriesForViewing</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>position</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>position</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>groupsForViewing</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>position</name> <operator>&lt;</operator> <name>size</name></expr> )</condition> <block>{<block_content> 
			<return>return <expr><call><name>createGroupView</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><call><name>createEntryView</name><argument_list>(<argument><expr><name>position</name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><name>convertView</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>View</name></type> <name>createGroupView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>group</name> <init>= <expr><call><name><name>groupsForViewing</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroupView</name></type> <name>gv</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>convertView</name> <operator>instanceof</operator> <name>PwGroupView</name><operator>)</operator></expr>)</condition> <block>{<block_content>
	
			<expr_stmt><expr><name>gv</name> <operator>=</operator> <call><name><name>PwGroupView</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> 
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>gv</name> <operator>=</operator> <operator>(</operator><name>PwGroupView</name><operator>)</operator> <name>convertView</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>gv</name><operator>.</operator><name>convertView</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><name>gv</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>PwEntryView</name></type> <name>createEntryView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>entriesForViewing</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwEntryView</name></type> <name>ev</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>convertView</name> <operator>instanceof</operator> <name>PwEntryView</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name><name>PwEntryView</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>ev</name> <operator>=</operator> <operator>(</operator><name>PwEntryView</name><operator>)</operator> <name>convertView</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ev</name><operator>.</operator><name>convertView</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><name>ev</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/SetPasswordDialog.java" hash="46bb82e466688aa9c154d548de3b0fe7f2c83f3b"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>FileOnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>SetPassword</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>SetPasswordDialog</name> <super_list><extends>extends <super><name>CancelDialog</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mKeyfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>FileOnFinish</name></type> <name>mFinish</name></decl>;</decl_stmt>
		
	<constructor><specifier>public</specifier> <name>SetPasswordDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>SetPasswordDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>FileOnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>masterKey</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>Uri</name></type> <name>keyfile</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>mKeyfile</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>set_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>password_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Ok button</comment>
		<decl_stmt><decl><type><name>Button</name></type> <name>okButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>TextView</name></type> <name>passView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>passView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>TextView</name></type> <name>passConfView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_conf_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>confpass</name> <init>= <expr><call><name><name>passConfView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<comment type="line">// Verify that passwords match</comment>
				<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>pass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>confpass</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<comment type="line">// Passwords do not match</comment>
					<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_pass_match</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>
				
				<decl_stmt><decl><type><name>TextView</name></type> <name>keyfileView</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_keyfile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Uri</name></type> <name>keyfile</name> <init>= <expr><call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><call><name><name>keyfileView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>mKeyfile</name> <operator>=</operator> <name>keyfile</name></expr>;</expr_stmt>
				
				<comment type="line">// Verify that a password or keyfile is set</comment>
				<if_stmt><if>if <condition>( <expr><call><name><name>pass</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_nopass</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
					
				</block_content>}</block></if></if_stmt>
				
				<decl_stmt><decl><type><name>SetPassword</name></type> <name>sp</name> <init>= <expr><operator>new</operator> <call><name>SetPassword</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AfterSave</name><argument_list>(<argument><expr><name>mFinish</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><call><name>getOwnerActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>boolean</name></type> <name>valid</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>validatePassword</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
					
					<function><annotation>@<name>Override</name></annotation>
					<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
						<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></function>
				}</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>valid</name></expr>)</condition> <block>{<block_content>
				    <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></function>
			
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Cancel button</comment>
		<decl_stmt><decl><type><name>Button</name></type> <name>cancel</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>( <expr><name>mFinish</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<class><specifier>private</specifier> class <name>AfterSave</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name>FileOnFinish</name></type> <name>mFinish</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>AfterSave</name><parameter_list>(<parameter><decl><type><name>FileOnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<if_stmt><if>if <condition>( <expr><name>mFinish</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>setFilename</name></name><argument_list>(<argument><expr><name>mKeyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
	}</block></class>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/UIToastTask.java" hash="b6cf1336205da4c8d1664299b2ec8df17d675f84"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<class><specifier>public</specifier> class <name>UIToastTask</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>UIToastTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mText</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>UIToastTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mText</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>, <argument><expr><name>mText</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/UpdateStatus.java" hash="df99e8eaa3e0d891eb7ad6c04f9193c7f0ab89d0"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>

<class><specifier>public</specifier> class <name>UpdateStatus</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>mPD</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Handler</name></type> <name>mHandler</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>UpdateStatus</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>UpdateStatus</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>ProgressDialog</name></type> <name>pd</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mPD</name> <operator>=</operator> <name>pd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mHandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>updateMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mCtx</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>mPD</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>mHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UpdateMessage</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>UpdateMessage</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mResId</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>UpdateMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>mResId</name> <operator>=</operator> <name>resId</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
		
		<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mPD</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>mResId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
		
	}</block></class>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/app/App.java" hash="1affa5a03c99cf47bf2f53523290421ddf9b053a"><comment type="block">/*
 * Copyright 2009-2019 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>PRNGFixes</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name><operator>.</operator><name>RecentFileHistory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name><operator>.</operator><name>Intents</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>

<class><specifier>public</specifier> class <name>App</name> <super_list><extends>extends <super><name>Application</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Database</name></type> <name>db</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>shutdown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Calendar</name></type> <name>calendar</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>RecentFileHistory</name></type> <name>fileHistory</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"KeePassDroid Timer"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <name>BroadcastReceiver</name></type> <name>mIntentReceiver</name></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Database</name></type> <name>getDB</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>db</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>RecentFileHistory</name></type> <name>getFileHistory</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>fileHistory</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setDB</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>db</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isShutdown</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>shutdown</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setShutdown</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>shutdown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>clearShutdown</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>shutdown</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Calendar</name></type> <name>getCalendar</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>calendar</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>calendar</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>calendar</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>fileHistory</name> <operator>=</operator> <operator>new</operator> <call><name>RecentFileHistory</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>PRNGFixes</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mIntentReceiver</name> <operator>=</operator> <operator>new</operator> <class><super><name>BroadcastReceiver</name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>action</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>( <expr><call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>TIMEOUT</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>timeout</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></function>
		}</block></class></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>IntentFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>mIntentReceiver</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>timeout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>NotificationManager</name></type> <name>nm</name> <init>= <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name>NOTIFICATION_SERVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>nm</name><operator>.</operator><name>cancelAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onTerminate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>db</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>mIntentReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onTerminate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/assets/TypefaceFactory.java" hash="5590ffe25e4329d37a0002d4fd215000d1e0d731"><comment type="block">/*
 * Copyright 2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>assets</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>AbstractReferenceMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>ReferenceMap</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>

<comment type="block" format="javadoc">/** Class to cache and return Typeface assets to workaround a bug in some versions of 
 * Android.
 * 
 * https://code.google.com/p/android/issues/detail?id=9904
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>TypefaceFactory</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ReferenceMap</name></type> <name>typefaceMap</name> <init>= <expr><operator>new</operator> <call><name>ReferenceMap</name><argument_list>(<argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>HARD</name></name></expr></argument>, <argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>WEAK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Typeface</name></type> <name>getTypeface</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fontPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Typeface</name></type> <name>tf</name></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>tf</name> <operator>=</operator> <operator>(</operator><name>Typeface</name><operator>)</operator> <call><name><name>typefaceMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>fontPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>tf</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<try>try <block>{<block_content>
		    <return>return <expr><call><name><name>Typeface</name><operator>.</operator><name>createFromAsset</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>fontPath</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<comment type="line">// Return null if we can't create it</comment>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/backup/SettingsBackupAgent.java" hash="a3e3812ce944fecd1b9469661adb39919c9ea070"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>backup</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupAgentHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>backup</name><operator>.</operator><name>SharedPreferencesBackupHelper</name></name>;</import>

<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>SettingsBackupAgent</name> <super_list><extends>extends <super><name>BackupAgentHelper</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFS_BACKUP_KEY</name> <init>= <expr><literal type="string">"prefs"</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>defaultPrefs</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"_preferences"</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>SharedPreferencesBackupHelper</name></type> <name>prefHelper</name> <init>= <expr><operator>new</operator> <call><name>SharedPreferencesBackupHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>defaultPrefs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>addHelper</name><argument_list>(<argument><expr><name>PREFS_BACKUP_KEY</name></expr></argument>, <argument><expr><name>prefHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/biometric/BiometricHelper.java" hash="639bcb26e180d3d5228822c59ce190ad9dd7c754"><comment type="block">/*
 * Copyright 2017-2020 Hans Cappelle, Brian Pellin
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>biometric</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>KeyguardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>security</name><operator>.</operator><name>keystore</name><operator>.</operator><name>KeyProperties</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>biometric</name><operator>.</operator><name>BiometricManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>biometric</name><operator>.</operator><name>BiometricPrompt</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>os</name><operator>.</operator><name>CancellationSignal</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>KeyGenParameterSpecCompat</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>KeyguardManagerCompat</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>KeyStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>AlgorithmParameterSpec</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>KeyGenerator</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>SecretKey</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>

<class><specifier>public</specifier> class <name>BiometricHelper</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ALIAS_KEY</name> <init>= <expr><literal type="string">"example-key"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BiometricManager</name></type> <name>biometricManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>KeyStore</name></type> <name>keyStore</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>KeyGenerator</name></type> <name>keyGenerator</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Cipher</name></type> <name>cipher</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>KeyguardManager</name></type> <name>keyguardManager</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>BiometricPrompt</name><operator>.</operator><name>CryptoObject</name></name></type> <name>cryptoObject</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>initOk</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cryptoInitOk</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BiometricCallback</name></type> <name>biometricCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CancellationSignal</name></type> <name>cancellationSignal</name></decl>;</decl_stmt>

    <interface><specifier>public</specifier> interface <name>BiometricCallback</name> <block>{

        <function_decl><type><name>void</name></type> <name>handleEncryptedResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ivSpec</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>handleDecryptedResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onInvalidKeyException</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onException</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showWarningMessage</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onKeyInvalidated</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>BiometricHelper</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>BiometricCallback</name></type> <name>biometricCallback</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>biometricManager</name></name> <operator>=</operator> <call><name><name>BiometricManager</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyguardManager</name></name> <operator>=</operator> <operator>(</operator><name>KeyguardManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>KEYGUARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isBiometricSupported</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// really not much to do when no fingerprint support found</comment>
            <expr_stmt><expr><call><name>setInitOk</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>biometricCallback</name></name> <operator>=</operator> <name>biometricCallback</name></expr>;</expr_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyStore</name></name> <operator>=</operator> <call><name><name>KeyStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AndroidKeyStore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyGenerator</name></name> <operator>=</operator> <call><name><name>KeyGenerator</name><operator>.</operator><name>getInstance</name></name><argument_list>(
                    <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>KEY_ALGORITHM_AES</name></name></expr></argument>,
                    <argument><expr><literal type="string">"AndroidKeyStore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher</name></name> <operator>=</operator> <call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(
                    <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>KEY_ALGORITHM_AES</name></name> <operator>+</operator> <literal type="string">"/"</literal>
                            <operator>+</operator> <name><name>KeyProperties</name><operator>.</operator><name>BLOCK_MODE_CBC</name></name> <operator>+</operator> <literal type="string">"/"</literal>
                            <operator>+</operator> <name><name>KeyProperties</name><operator>.</operator><name>ENCRYPTION_PADDING_PKCS7</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cryptoObject</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>BiometricPrompt</name><operator>.</operator><name>CryptoObject</name></name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setInitOk</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>setInitOk</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isBiometricSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>auth</name> <init>= <expr><call><name><name>biometricManager</name><operator>.</operator><name>canAuthenticate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>auth</name> <operator>==</operator> <name><name>BiometricManager</name><operator>.</operator><name>BIOMETRIC_SUCCESS</name></name> <operator>||</operator> <name>auth</name> <operator>==</operator> <name><name>BiometricManager</name><operator>.</operator><name>BIOMETRIC_ERROR_NONE_ENROLLED</name></name><operator>)</operator>
                <operator>&amp;&amp;</operator> <call><name><name>KeyguardManagerCompat</name><operator>.</operator><name>isKeyguardSecure</name></name><argument_list>(<argument><expr><name>keyguardManager</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFingerprintInitialized</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>initOk</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>initEncryptData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>cryptoInitOk</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isFingerprintInitialized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>biometricCallback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>initEncryptKey</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvalidKeyException</name></type> <name>invalidKeyException</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onKeyInvalidated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>initEncryptKey</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onInvalidKeyException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initEncryptKey</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>deleteExistingKey</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><call><name>createNewKeyIfNeeded</name><argument_list>(<argument><expr><name>deleteExistingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyStore</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SecretKey</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>SecretKey</name><operator>)</operator> <call><name><name>keyStore</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cryptoInitOk</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>encryptData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isFingerprintInitialized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>biometricCallback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// actual do encryption here</comment>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encrypted</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encryptedValue</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// passes updated iv spec on to callback so this can be stored for decryption</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>IvParameterSpec</name></type> <name>spec</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParameterSpec</name><argument_list>(<argument><expr><name><name>IvParameterSpec</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ivSpecValue</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>spec</name><operator>.</operator><name>getIV</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>handleEncryptedResult</name></name><argument_list>(<argument><expr><name>encryptedValue</name></expr></argument>, <argument><expr><name>ivSpecValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cipher</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>initDecryptData</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>ivSpecValue</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <expr_stmt><expr><name>cryptoInitOk</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>initDecryptKey</name><argument_list>(<argument><expr><name>ivSpecValue</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InvalidKeyException</name></type> <name>invalidKeyException</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Key was invalidated (maybe all registered fingerprints were changed)</comment>
            <comment type="line">// Retry with new key</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onKeyInvalidated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>initDecryptKey</name><argument_list>(<argument><expr><name>ivSpecValue</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onInvalidKeyException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initDecryptKey</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>ivSpecValue</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>deleteExistingKey</name></decl></parameter>)</parameter_list> <throws>throws  <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

        <expr_stmt><expr><call><name>createNewKeyIfNeeded</name><argument_list>(<argument><expr><name>deleteExistingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyStore</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SecretKey</name></type> <name>key</name> <init>= <expr><operator>(</operator><name>SecretKey</name><operator>)</operator> <call><name><name>keyStore</name><operator>.</operator><name>getKey</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// important to restore spec here that was used for decryption</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>iv</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>ivSpecValue</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IvParameterSpec</name></type> <name>spec</name> <init>= <expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cryptoInitOk</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>decryptData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>encryptedValue</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isFingerprintInitialized</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>biometricCallback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <comment type="line">// actual decryption here</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encrypted</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encryptedValue</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decrypted</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>decryptedString</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>decrypted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">//final String encryptedString = Base64.encodeToString(encrypted, 0 /* flags */);</comment>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>handleDecryptedResult</name></name><argument_list>(<argument><expr><name>decryptedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BadPaddingException</name></type> | <type><name>IllegalBlockSizeException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onKeyInvalidated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>createNewKeyIfNeeded</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowDeleteExisting</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>keyStore</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>allowDeleteExisting</name>
                    <operator>&amp;&amp;</operator> <call><name><name>keyStore</name><operator>.</operator><name>containsAlias</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

                <expr_stmt><expr><call><name><name>keyStore</name><operator>.</operator><name>deleteEntry</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Create new key if needed</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>keyStore</name><operator>.</operator><name>containsAlias</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Set the alias of the entry in Android KeyStore where the key will appear</comment>
                <comment type="line">// and the constrains (purposes) in the constructor of the Builder</comment>
                <decl_stmt><decl><type><name>AlgorithmParameterSpec</name></type> <name>algSpec</name> <init>= <expr><call><name><name>KeyGenParameterSpecCompat</name><operator>.</operator><name>build</name></name><argument_list>(<argument><expr><name>ALIAS_KEY</name></expr></argument>,
                        <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_ENCRYPT</name></name> <operator>|</operator> <name><name>KeyProperties</name><operator>.</operator><name>PURPOSE_DECRYPT</name></name></expr></argument>,
                        <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>BLOCK_MODE_CBC</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                        <argument><expr><name><name>KeyProperties</name><operator>.</operator><name>ENCRYPTION_PADDING_PKCS7</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


                <expr_stmt><expr><call><name><name>keyGenerator</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>algSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>keyGenerator</name><operator>.</operator><name>generateKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCallback</name><operator>.</operator><name>onException</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>setInitOk</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>initOk</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initOk</name></name> <operator>=</operator> <name>initOk</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/collections/VariantDictionary.java" hash="819e1c7b57bd431ba7c007824d61dd89e679c9e7"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>collections</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>StandardCharsets</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>VariantDictionary</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VdVersion</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VdmCritical</name> <init>= <expr><literal type="number">0xFF00</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VdmInfo</name> <init>= <expr><literal type="number">0x00FF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>VdType</name></argument>&gt;</argument_list></name></type> <name>dict</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>VdType</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> class <name>VdType</name> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>None</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>UInt32</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>UInt64</name> <init>=<expr><literal type="number">0x05</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Bool</name> <init>=<expr><literal type="number">0x08</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Int32</name> <init>=<expr><literal type="number">0x0C</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Int64</name> <init>=<expr><literal type="number">0x0D</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>String</name> <init>=<expr><literal type="number">0x18</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>ByteArray</name> <init>=<expr><literal type="number">0x42</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>byte</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>Object</name></type> <name>value</name></decl>;</decl_stmt>

        <constructor><name>VdType</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

    }</block></class>

    <function><type><specifier>private</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>VdType</name></type> <name>val</name> <init>= <expr><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name><name>val</name><operator>.</operator><name>value</name></name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>putType</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>VdType</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUInt32</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>UInt32</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getUInt32</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUInt64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>UInt64</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getUInt64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBool</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>Bool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBool</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>boolean</name><operator>)</operator><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInt32</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>Int32</name></name></expr></argument> ,<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInt32</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInt64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>Int64</name></name></expr></argument> ,<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getInt64</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>long</name><operator>)</operator><call><name><name>dict</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>String</name></name></expr></argument> ,<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><call><name>getValue</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setByteArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>putType</name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>ByteArray</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getByteArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><call><name>getValue</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>VariantDictionary</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>LEDataInputStream</name></type> <name>lis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>VariantDictionary</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name>VariantDictionary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readUShort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>version</name> <operator>&amp;</operator> <name>VdmCritical</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>VdVersion</name> <operator>&amp;</operator> <name>VdmCritical</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Invalid format"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>byte</name></type> <name>bType</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator><name>type</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bType</name> <operator>==</operator> <name><name>VdType</name><operator>.</operator><name>None</name></name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>nameLen</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>nameBuf</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>nameLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>nameLen</name> <operator>!=</operator> <name><name>nameBuf</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>nameBuf</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>valueLen</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>valueBuf</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>valueLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>!=</operator> <name><name>valueBuf</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

            <switch>switch <condition>(<expr><name>bType</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>UInt32</name></name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setUInt32</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readUInt</name></name><argument_list>(<argument><expr><name>valueBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>UInt64</name></name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setUInt64</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readLong</name></name><argument_list>(<argument><expr><name>valueBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Bool</name></name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setBool</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>valueBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Int32</name></name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setInt32</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>valueBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Int64</name></name></expr>:</case>
                    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setInt64</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readLong</name></name><argument_list>(<argument><expr><name>valueBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>String</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>valueBuf</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>ByteArray</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>setByteArray</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>valueBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <assert>assert <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while>

        <return>return <expr><name>d</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>VariantDictionary</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>LEDataOutputStream</name></type> <name>los</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>los</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUShort</name></name><argument_list>(<argument><expr><name>VdVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>VdType</name></argument>&gt;</argument_list></name></name></type> <name>entry</name><range>: <expr><call><name><name>d</name><operator>.</operator><name>dict</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>nameBuf</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>nameBuf</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Couldn't encode parameter name."</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <decl_stmt><decl><type><name>VdType</name></type> <name>vd</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>vd</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>nameBuf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>nameBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>vd</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>UInt32</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>UInt64</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Bool</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>byte</name></type> <name>bool</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>boolean</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Int32</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>Int64</name></name></expr>:</case>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>String</name></name></expr>:</case>
                    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name><name>VdType</name><operator>.</operator><name>ByteArray</name></name></expr>:</case>
                    <expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name><name>byte</name><index>[]</index></name><operator>)</operator><name><name>vd</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>VdType</name><operator>.</operator><name>None</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>copyTo</name><parameter_list>(<parameter><decl><type><name>VariantDictionary</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
       <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>VdType</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>d</name><operator>.</operator><name>dict</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
           <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name>VdType</name></type> <name>value</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

           <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>
    </block_content>}</block></function>
<empty_stmt>;</empty_stmt>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>dict</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/ClipDataCompat.java" hash="4497b3af540ec5fafb1f82aee9820032c8647055"><comment type="block">/*
 * Copyright 2016-2018 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipDescription</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<class><specifier>public</specifier> class <name>ClipDataCompat</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>clipData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>clipDataItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>clipDescription</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getClipDataFromIntent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getDescription</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getItemCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getLabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getItemAt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>getUri</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>initSucceded</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <comment type="block">/*
            clipData = ClipData.class;
            getDescription = clipData.getMethod("getDescription", (Class[])null);
            getItemCount = clipData.getMethod("getItemCount", (Class[])null);
            getItemAt = clipData.getMethod("getItemAt", new Class[]{int.class});
            clipDescription = Class.forName("android.content.ClipDescription");
            getLabel = clipDescription.getMethod("getLabel", (Class[])null);

            clipDataItem = Class.forName("android.content.ClipData$Item");
            getUri = clipDataItem.getMethod("getUri", (Class[])null);
            */</comment>

            <expr_stmt><expr><name>getClipDataFromIntent</name> <operator>=</operator> <call><name><name>Intent</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"getClipData"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Class</name><index>[]</index></name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>initSucceded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>initSucceded</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Uri</name></type> <name>getUriFromIntent</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>clipDataSucceeded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>initSucceded</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>ClipData</name></type> <name>clip</name> <init>= <expr><operator>(</operator><name>ClipData</name><operator>)</operator> <call><name><name>getClipDataFromIntent</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>clip</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ClipDescription</name></type> <name>clipDescription</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CharSequence</name></type> <name>label</name> <init>= <expr><call><name><name>clipDescription</name><operator>.</operator><name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>label</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>itemCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name><name>ClipData</name><operator>.</operator><name>Item</name></name></type> <name>clipItem</name> <init>= <expr><call><name><name>clip</name><operator>.</operator><name>getItemAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>clipItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <return>return <expr><call><name><name>clipItem</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>

            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Fall through below to backup method if reflection fails</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>i</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/ContentResolverCompat.java" hash="7c4ca9c0476457f4f6f2e4ec346961274669645b"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<class><specifier>public</specifier> class <name>ContentResolverCompat</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>available</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>contentResolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>takePersistableUriPermission</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>contentResolver</name> <operator>=</operator> <name><name>ContentResolver</name><operator>.</operator><name>class</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>takePersistableUriPermission</name> <operator>=</operator> <call><name><name>contentResolver</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"takePersistableUriPermission"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Class</name><index>[]</index></name><block>{<expr><name><name>Uri</name><operator>.</operator><name>class</name></name></expr>, <expr><name><name>int</name><operator>.</operator><name>class</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>takePersistableUriPermission</name><parameter_list>(<parameter><decl><type><name>ContentResolver</name></type> <name>resolver</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modeFlags</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>available</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>takePersistableUriPermission</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{<expr><name>uri</name></expr>, <expr><name>modeFlags</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Fail silently</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/KeyGenParameterSpecCompat.java" hash="4030494fc92bc05703b6afbef03e04459886e085"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>AlgorithmParameterSpec</name></name>;</import>

<class><specifier>public</specifier> class <name>KeyGenParameterSpecCompat</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Class</name></type> <name>builder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Constructor</name></type> <name>buildConst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>builderBuild</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>setBlockModes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>setUserAuthReq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>setEncPad</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>available</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>builder</name> <operator>=</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"android.security.keystore.KeyGenParameterSpec$Builder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buildConst</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>int</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>builderBuild</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"build"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Class</name> <index>[]</index></name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>setBlockModes</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"setBlockModes"</literal></expr></argument>, <argument><expr><name><name>String</name><index>[]</index></name><operator>.</operator>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>setUserAuthReq</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"setUserAuthenticationRequired"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>Class</name> <index>[]</index></name><block>{<expr><name><name>boolean</name><operator>.</operator><name>class</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>setEncPad</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getMethod</name></name><argument_list>(<argument><expr><literal type="string">"setEncryptionPaddings"</literal></expr></argument>, <argument><expr><name><name>String</name><index>[]</index></name><operator>.</operator>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>AlgorithmParameterSpec</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keystoreAlias</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>purpose</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>blockMode</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type> <name>userAuthReq</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>encPadding</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>available</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>inst</name> <init>= <expr><call><name><name>buildConst</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>keystoreAlias</name></expr></argument>, <argument><expr><name>purpose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name><name>setBlockModes</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>blockMode</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name><name>setUserAuthReq</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>userAuthReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name><name>setEncPad</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{<expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>encPadding</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>(</operator><name>AlgorithmParameterSpec</name><operator>)</operator> <call><name><name>builderBuild</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/KeyguardManagerCompat.java" hash="5f826499dfb5c9ce01af44815dedfd62f51042e7"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>KeyguardManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<class><specifier>public</specifier> class <name>KeyguardManagerCompat</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Method</name></type> <name>isKeyguardSecure</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>available</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>isKeyguardSecure</name> <operator>=</operator> <call><name><name>KeyguardManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"isKeyguardSecure"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>Class</name><index>[]</index></name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>available</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isKeyguardSecure</name><parameter_list>(<parameter><decl><type><name>KeyguardManager</name></type> <name>inst</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>available</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <return>return <expr><operator>(</operator><name>boolean</name><operator>)</operator> <call><name><name>isKeyguardSecure</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/PRNGFixes.java" hash="689730e6829be905127ed67f5936a6d309d76265"><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>

<comment type="block">/*
 * This software is provided 'as-is', without any express or implied
 * warranty.  In no event will Google be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, as long as the origin is not misrepresented.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Provider</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandomSpi</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Security</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>StrUtil</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Fixes for the output of the default PRNG having low entropy.
 *
 * The fixes need to be applied via {@link #apply()} before any use of Java
 * Cryptography Architecture primitives. A good place to invoke them is in the
 * application's {@code onCreate}.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>PRNGFixes</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>BUILD_FINGERPRINT_AND_DEVICE_SERIAL</name> <init>=
        <expr><call><name>getBuildFingerprintAndDeviceSerial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>sdkVersion</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Hidden constructor to prevent instantiation. */</comment>
    <constructor><specifier>private</specifier> <name>PRNGFixes</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></constructor>
    
    <comment type="block" format="javadoc">/**
     * Applies all fixes.
     *
     * @throws SecurityException if a fix is needed but could not be applied.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>apply</name><parameter_list>()</parameter_list> <block>{<block_content>
    	<try>try <block>{<block_content>
	    	<if_stmt><if>if <condition>(<expr><call><name>supportedOnThisDevice</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
		        <expr_stmt><expr><call><name>applyOpenSSLFix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name>installLinuxPRNGSecureRandom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	</block_content>}</block></if></if_stmt>
    	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<comment type="line">// Do nothing, do the best we can to implement the workaround</comment>
    	</block_content>}</block></catch></try>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>supportedOnThisDevice</name><parameter_list>()</parameter_list> <block>{<block_content>
    	<comment type="line">// Blacklist on samsung devices</comment>
    	<if_stmt><if>if <condition>(<expr><call><name><name>StrUtil</name><operator>.</operator><name>indexOfIgnoreCase</name></name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name></expr></argument>, <argument><expr><literal type="string">"samsung"</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
    	</block_content>}</block></if></if_stmt>
    	
        <if_stmt><if>if <condition>(<expr><name>sdkVersion</name> <operator>&gt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>onSELinuxEnforce</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

    	<decl_stmt><decl><type><name>File</name></type> <name>urandom</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	
    	<comment type="line">// Test permissions</comment>
    	<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><call><name><name>urandom</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>urandom</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
    	</block_content>}</block></if></if_stmt>
    	
    	
    	<comment type="line">// Test actually writing to urandom</comment>
    	<try>try <block>{<block_content>
	    	<decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>urandom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    	<expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
    	</block_content>}</block></catch></try>
    	
    	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
    	
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>onSELinuxEnforce</name><parameter_list>()</parameter_list> <block>{<block_content>
    	<try>try <block>{<block_content>
	    	<decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>ProcessBuilder</name><argument_list>(<argument><expr><literal type="string">"getenforce"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    	<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>redirectErrorStream</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	<decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Process</name></name></type> <name>process</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    	<decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    	<expr_stmt><expr><call><name><name>process</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	
	    	<decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    	
	    	<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
	    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	    	</block_content>}</block></if></if_stmt>
	    	
	    	<return>return <expr><call><name><name>output</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"enforcing"</literal></expr></argument>)</argument_list></call></expr>;</return>
    	</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
    	</block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Applies the fix for OpenSSL PRNG having low entropy. Does nothing if the
     * fix is not needed.
     *
     * @throws SecurityException if the fix is needed but could not be applied.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>applyOpenSSLFix</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sdkVersion</name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name><operator>)</operator>
                <operator>||</operator> <operator>(</operator><name>sdkVersion</name> <operator>&gt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="line">// No need to apply the fix</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <try>try <block>{<block_content>
            <comment type="line">// Mix in the device- and invocation-specific seed.</comment>
            <expr_stmt><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"org.apache.harmony.xnet.provider.jsse.NativeCrypto"</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"RAND_seed"</literal></expr></argument>, <argument><expr><name><name>byte</name><index>[]</index></name><operator>.</operator>class</expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name>generateSeed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Mix output of Linux PRNG into OpenSSL's PRNG</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator> <call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(
                    <argument><expr><literal type="string">"org.apache.harmony.xnet.provider.jsse.NativeCrypto"</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"RAND_load_file"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>long</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>invoke</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(
                        <argument><expr><literal type="string">"Unexpected number of bytes read from Linux PRNG: "</literal>
                                <operator>+</operator> <name>bytesRead</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to seed OpenSSL PRNG"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Installs a Linux PRNG-backed {@code SecureRandom} implementation as the
     * default. Does nothing if the implementation is already the default or if
     * there is not need to install the implementation.
     *
     * @throws SecurityException if the fix is needed but could not be applied.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>installLinuxPRNGSecureRandom</name><parameter_list>()</parameter_list>
            <throws>throws <argument><expr><name>SecurityException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sdkVersion</name> <operator>&gt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// No need to apply the fix</comment>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Install a Linux PRNG-based SecureRandom implementation as the</comment>
        <comment type="line">// default, if not yet installed.</comment>
        <decl_stmt><decl><type><name><name>Provider</name><index>[]</index></name></type> <name>secureRandomProviders</name> <init>=
                <expr><call><name><name>Security</name><operator>.</operator><name>getProviders</name></name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>secureRandomProviders</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>||</operator> <operator>(</operator><name><name>secureRandomProviders</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator>
                <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
                        <argument><expr><name><name>secureRandomProviders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Security</name><operator>.</operator><name>insertProviderAt</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinuxPRNGSecureRandomProvider</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Assert that new SecureRandom() and</comment>
        <comment type="line">// SecureRandom.getInstance("SHA1PRNG") return a SecureRandom backed</comment>
        <comment type="line">// by the Linux PRNG-based SecureRandom implementation.</comment>
        <decl_stmt><decl><type><name>SecureRandom</name></type> <name>rng1</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
                <argument><expr><call><name><name>rng1</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                    <argument><expr><literal type="string">"new SecureRandom() backed by wrong Provider: "</literal>
                            <operator>+</operator> <call><name><name>rng1</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SecureRandom</name></type> <name>rng2</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>rng2</name> <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG not available"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>LinuxPRNGSecureRandomProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>equals</name></name></name><argument_list>(
                <argument><expr><call><name><name>rng2</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                    <argument><expr><literal type="string">"SecureRandom.getInstance(\"SHA1PRNG\") backed by wrong"</literal>
                    <operator>+</operator> <literal type="string">" Provider: "</literal> <operator>+</operator> <call><name><name>rng2</name><operator>.</operator><name>getProvider</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * {@code Provider} of {@code SecureRandom} engines which pass through
     * all requests to the Linux PRNG.
     */</comment>
    <class><specifier>private</specifier> <specifier>static</specifier> class <name>LinuxPRNGSecureRandomProvider</name> <super_list><extends>extends <super><name>Provider</name></super></extends></super_list> <block>{

        <constructor><specifier>public</specifier> <name>LinuxPRNGSecureRandomProvider</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"LinuxPRNG"</literal></expr></argument>,
                    <argument><expr><literal type="number">1.0</literal></expr></argument>,
                    <argument><expr><literal type="string">"A Linux-specific random number provider that uses"</literal>
                        <operator>+</operator> <literal type="string">" /dev/urandom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Although /dev/urandom is not a SHA-1 PRNG, some apps</comment>
            <comment type="line">// explicitly request a SHA1PRNG SecureRandom and we thus need to</comment>
            <comment type="line">// prevent them from getting the default implementation whose output</comment>
            <comment type="line">// may have low entropy.</comment>
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG"</literal></expr></argument>, <argument><expr><call><name><name>LinuxPRNGSecureRandom</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"SecureRandom.SHA1PRNG ImplementedIn"</literal></expr></argument>, <argument><expr><literal type="string">"Software"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * {@link SecureRandomSpi} which passes all requests to the Linux PRNG
     * ({@code /dev/urandom}).
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>LinuxPRNGSecureRandom</name> <super_list><extends>extends <super><name>SecureRandomSpi</name></super></extends></super_list> <block>{

        <comment type="block">/*
         * IMPLEMENTATION NOTE: Requests to generate bytes and to mix in a seed
         * are passed through to the Linux PRNG (/dev/urandom). Instances of
         * this class seed themselves by mixing in the current time, PID, UID,
         * build fingerprint, and hardware serial number (where available) into
         * Linux PRNG.
         *
         * Concurrency: Read requests to the underlying Linux PRNG are
         * serialized (on sLock) to ensure that multiple threads do not get
         * duplicated PRNG output.
         */</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>File</name></type> <name>URANDOM_FILE</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"/dev/urandom"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Object</name></type> <name>sLock</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Input stream for reading from Linux PRNG or {@code null} if not yet
         * opened.
         *
         * @GuardedBy("sLock")
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>DataInputStream</name></type> <name>sUrandomIn</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Output stream for writing to Linux PRNG or {@code null} if not yet
         * opened.
         *
         * @GuardedBy("sLock")
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>OutputStream</name></type> <name>sUrandomOut</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Whether this engine instance has been seeded. This is needed because
         * each instance needs to seed itself if the client does not explicitly
         * seed it.
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mSeeded</name></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>void</name></type> <name>engineSetSeed</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name></decl>;</decl_stmt>
                <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>getUrandomOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></synchronized>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mSeeded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                        <argument><expr><literal type="string">"Failed to mix seed into "</literal> <operator>+</operator> <name>URANDOM_FILE</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name>void</name></type> <name>engineNextBytes</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mSeeded</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Mix in the device- and invocation-specific seed.</comment>
                <expr_stmt><expr><call><name>engineSetSeed</name><argument_list>(<argument><expr><call><name>generateSeed</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>DataInputStream</name></type> <name>in</name></decl>;</decl_stmt>
                <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>getUrandomInputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></synchronized>
                <synchronized>synchronized <init>(<expr><name>in</name></expr>)</init> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></synchronized>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(
                        <argument><expr><literal type="string">"Failed to read from "</literal> <operator>+</operator> <name>URANDOM_FILE</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>engineGenerateSeed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>engineNextBytes</name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>seed</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>DataInputStream</name></type> <name>getUrandomInputStream</name><parameter_list>()</parameter_list> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sUrandomIn</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// NOTE: Consider inserting a BufferedInputStream between</comment>
                    <comment type="line">// DataInputStream and FileInputStream if you need higher</comment>
                    <comment type="line">// PRNG output performance and can live with future PRNG</comment>
                    <comment type="line">// output being pulled into this process prematurely.</comment>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>sUrandomIn</name> <operator>=</operator> <operator>new</operator> <call><name>DataInputStream</name><argument_list>(
                                <argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>URANDOM_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to open "</literal>
                                <operator>+</operator> <name>URANDOM_FILE</name> <operator>+</operator> <literal type="string">" for reading"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>sUrandomIn</name></expr>;</return>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>OutputStream</name></type> <name>getUrandomOutputStream</name><parameter_list>()</parameter_list> <block>{<block_content>
            <synchronized>synchronized <init>(<expr><name>sLock</name></expr>)</init> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sUrandomOut</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><name>sUrandomOut</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>URANDOM_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to open "</literal>
                                <operator>+</operator> <name>URANDOM_FILE</name> <operator>+</operator> <literal type="string">" for writing"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>sUrandomOut</name></expr>;</return>
            </block_content>}</block></synchronized>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Generates a device- and invocation-specific seed to be mixed into the
     * Linux PRNG.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>generateSeed</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>seedBuffer</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>seedBufferOut</name> <init>=
                    <expr><operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><name>seedBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Process</name><operator>.</operator><name>myPid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>Process</name><operator>.</operator><name>myUid</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>BUILD_FINGERPRINT_AND_DEVICE_SERIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seedBufferOut</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>seedBuffer</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>SecurityException</name><argument_list>(<argument><expr><literal type="string">"Failed to generate seed"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the hardware serial number of this device.
     *
     * @return serial number or {@code null} if not available.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getDeviceSerialNumber</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// We're using the Reflection API because Build.SERIAL is only available</comment>
        <comment type="line">// since API Level 9 (Gingerbread, Android 2.3).</comment>
        <try>try <block>{<block_content>
            <return>return <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>Build</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getField</name></name></name><argument_list>(<argument><expr><literal type="string">"SERIAL"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBuildFingerprintAndDeviceSerial</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fingerprint</name> <init>= <expr><name><name>Build</name><operator>.</operator><name>FINGERPRINT</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fingerprint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>fingerprint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>serial</name> <init>= <expr><call><name>getDeviceSerialNumber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>serial</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <try>try <block>{<block_content>
            <return>return <expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"UTF-8 encoding not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/compat/StorageAF.java" hash="3d8b2f897d0adf8fdde28f65b70bed2353cf36a2"><comment type="block">/*
 * Copyright 2016-2018 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by bpellin on 3/10/16.
 */</comment>
<class><specifier>public</specifier> class <name>StorageAF</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>ACTION_OPEN_DOCUMENT</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Field</name></type> <name>openDocument</name> <init>= <expr><call><name><name>Intent</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getField</name></name></name><argument_list>(<argument><expr><literal type="string">"ACTION_OPEN_DOCUMENT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ACTION_OPEN_DOCUMENT</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <call><name><name>openDocument</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>ACTION_OPEN_DOCUMENT</name> <operator>=</operator> <literal type="string">"android.intent.action.OPEN_DOCUMENT"</literal></expr>;</expr_stmt>

        </block_content>}</block></catch></try>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>supportsStorageFramework</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>;</return> </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>useStorageFramework</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>supportsStorageFramework</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saf_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>saf_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/AESProvider.java" hash="91e0ad42375689d0f70b56fa606299d28756302b"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Provider</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>AESProvider</name> <super_list><extends>extends <super><name>Provider</name></super></extends></super_list> <block>{

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">3846349284296062658L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>AESProvider</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"AESProvider"</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"Cipher.AES"</literal></expr></argument>,<argument><expr><call><name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NativeAESCipherSpi</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/CipherFactory.java" hash="5f3f4452d7f439f7a311233c1e759662cc851b1a"><comment type="block">/*
 * Copyright 2010-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Security</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>AesEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>ChaCha20Engine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>CipherEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>TwofishEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>jce</name><operator>.</operator><name>provider</name><operator>.</operator><name>BouncyCastleProvider</name></name>;</import>

<class><specifier>public</specifier> class <name>CipherFactory</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>blacklistInit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>blacklisted</name></decl>;</decl_stmt>

	<static>static <block>{<block_content>
		<expr_stmt><expr><call><name><name>Security</name><operator>.</operator><name>addProvider</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BouncyCastleProvider</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></static>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Cipher</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transformation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>getInstance</name><argument_list>(<argument><expr><name>transformation</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Cipher</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transformation</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">// Return the native AES if it is possible</comment>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>!</operator><call><name>deviceBlacklisted</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>androidOverride</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>hasNativeImplementation</name><argument_list>(<argument><expr><name>transformation</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>NativeLib</name><operator>.</operator><name>loaded</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>transformation</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AESProvider</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>transformation</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>deviceBlacklisted</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>blacklistInit</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>blacklistInit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			
			<comment type="line">// The Acer Iconia A500 is special and seems to always crash in the native crypto libraries</comment>
			<expr_stmt><expr><name>blacklisted</name> <operator>=</operator> <call><name><name>Build</name><operator>.</operator><name>MODEL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"A500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>blacklisted</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasNativeImplementation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transformation</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>transformation</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS5Padding"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>


	<comment type="block" format="javadoc">/** Generate appropriate cipher based on KeePass 2.x UUID's
	 * @param uuid
	 * @return
	 * @throws NoSuchPaddingException 
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidAlgorithmParameterException 
	 * @throws InvalidKeyException 
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>CipherEngine</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AesEngine</name><operator>.</operator><name>CIPHER_UUID</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>AesEngine</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TwofishEngine</name><operator>.</operator><name>CIPHER_UUID</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>TwofishEngine</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>ChaCha20Engine</name><operator>.</operator><name>CIPHER_UUID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>ChaCha20Engine</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<throw>throw <expr><operator>new</operator> <call><name>NoSuchAlgorithmException</name><argument_list>(<argument><expr><literal type="string">"UUID unrecognized."</literal></expr></argument>)</argument_list></call></expr>;</throw>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/CryptoUtil.java" hash="7af9f5c1728a9f67b329ced6a3a7de9044a22be9"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>NullOutputStream</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>

<class><specifier>public</specifier> class <name>CryptoUtil</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>resizeKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cbOut</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cbOut</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cbOut</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashSha256</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inOffset</name></expr></argument>, <argument><expr><name>cbIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
        <else>else <block>{<block_content> <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashSha512</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inOffset</name></expr></argument>, <argument><expr><name>cbIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>cbOut</name> <operator>==</operator> <name><name>hash</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content> <return>return <expr><name>hash</name></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ret</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>cbOut</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cbOut</name> <operator>&lt;</operator> <name><name>hash</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cbOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>cbOut</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>

                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbR</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLongBuf</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>part</name> <init>= <expr><call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>pbR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>cbOut</name> <operator>-</operator> <name>pos</name></expr></argument>, <argument><expr><name><name>part</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <assert>assert<expr><operator>(</operator><name>copy</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>

                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>part</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <assert>assert<expr><operator>(</operator><name>pos</name> <operator>==</operator> <name>cbOut</name><operator>)</operator></expr>;</assert>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashSha256</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>hashSha256</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashSha256</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>hashGen</name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashSha512</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>hashSha512</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashSha512</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>hashGen</name><argument_list>(<argument><expr><literal type="string">"SHA-512"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashGen</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>transform</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>hash</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>NullOutputStream</name></type> <name>nos</name> <init>= <expr><operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name><name>hash</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/NativeAESCipherSpi.java" hash="80e6d99a1556aff5fb947169b260fc3ef14d429d"><comment type="block">/*
 * Copyright 2009-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>PhantomReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>Reference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>ReferenceQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>AlgorithmParameters</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>AlgorithmParameterSpec</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>spec</name><operator>.</operator><name>InvalidParameterSpecException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherSpi</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ShortBufferException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<class><specifier>public</specifier> class <name>NativeAESCipherSpi</name> <super_list><extends>extends <super><name>CipherSpi</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>mIsStaticInit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PhantomReference</name><argument_list type="generic">&lt;<argument><name>NativeAESCipherSpi</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>mCleanup</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name><name>PhantomReference</name><argument_list type="generic">&lt;<argument><name>NativeAESCipherSpi</name></argument>&gt;</argument_list></name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>ReferenceQueue</name><argument_list type="generic">&lt;<argument><name>NativeAESCipherSpi</name></argument>&gt;</argument_list></name></type> <name>mQueue</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>AES_BLOCK_SIZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>mIV</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsInited</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mEncrypting</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>mCtxPtr</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mPadding</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>staticInit</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mIsStaticInit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

		<comment type="line">// Init queue here to guarentee it isn't null in the cleanup thread</comment>
		<expr_stmt><expr><name>mQueue</name> <operator>=</operator> <operator>new</operator> <call><name><name>ReferenceQueue</name><argument_list type="generic">&lt;<argument><name>NativeAESCipherSpi</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Start the cipher context cleanup thread to run forever</comment>
		<expr_stmt><expr><operator>(</operator><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Cleanup</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>addToCleanupQueue</name><parameter_list>(<parameter><decl><type><name>NativeAESCipherSpi</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"KeepassDroid"</literal></expr></argument>, <argument><expr><literal type="string">"queued cipher context: "</literal> <operator>+</operator> <name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mCleanup</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PhantomReference</name><argument_list type="generic">&lt;<argument><name>NativeAESCipherSpi</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>mQueue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** Work with the garbage collector to clean up openssl memory when the cipher
	 *  context is garbage collected.
	 * @author bpellin
	 *
	 */</comment>
	<class><specifier>private</specifier> <specifier>static</specifier> class <name>Cleanup</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{

		<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
				<try>try <block>{<block_content>
					<decl_stmt><decl><type><name><name>Reference</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>NativeAESCipherSpi</name></extends></argument>&gt;</argument_list></name></type> <name>ref</name> <init>= <expr><call><name><name>mQueue</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>long</name></type> <name>ctx</name> <init>= <expr><call><name><name>mCleanup</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>nCleanup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"KeePassDroid"</literal></expr></argument>, <argument><expr><literal type="string">"Cleaned up cipher context: "</literal> <operator>+</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
				</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<comment type="line">// Do nothing, but resume looping if mQueue.remove is interrupted</comment>
				</block_content>}</block></catch></try>
			</block_content>}</block></while>
		</block_content>}</block></function>
		
	}</block></class>
	
	<function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name>void</name></type> <name>nCleanup</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ctxPtr</name></decl></parameter>)</parameter_list>;</function_decl>

	<constructor><specifier>public</specifier> <name>NativeAESCipherSpi</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>mIsStaticInit</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>staticInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>engineDoFinal</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>IllegalBlockSizeException</name></expr></argument>, <argument><expr><name>BadPaddingException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>maxSize</name> <init>= <expr><call><name>engineGetOutputSize</name><argument_list>(<argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>maxSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>finalSize</name></decl>;</decl_stmt>
		
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>finalSize</name> <operator>=</operator> <call><name>doFinal</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ShortBufferException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<comment type="line">// This shouldn't be possible rethrow as RuntimeException</comment>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Short buffer exception shouldn't be possible from here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<if_stmt><if>if <condition>( <expr><name>maxSize</name> <operator>==</operator> <name>finalSize</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><name>output</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// TODO: Special doFinal to avoid this copy</comment>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>exact</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>finalSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>exact</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>finalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>exact</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>int</name></type> <name>engineDoFinal</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>,
			<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ShortBufferException</name></expr></argument>,
			<argument><expr><name>IllegalBlockSizeException</name></expr></argument>, <argument><expr><name>BadPaddingException</name></expr></argument></throws> <block>{<block_content>
		
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>doFinal</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>ShortBufferException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>int</name></type> <name>doFinal</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>)</parameter_list> 
			<throws>throws <argument><expr><name>ShortBufferException</name></expr></argument>, <argument><expr><name>IllegalBlockSizeException</name></expr></argument>, <argument><expr><name>BadPaddingException</name></expr></argument></throws> <block>{<block_content>
		
		<decl_stmt><decl><type><name>int</name></type> <name>outputSize</name> <init>= <expr><call><name>engineGetOutputSize</name><argument_list>(<argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>updateAmt</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>input</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>inputLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>updateAmt</name> <operator>=</operator> <call><name>nUpdate</name><argument_list>(<argument><expr><name>mCtxPtr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>, <argument><expr><name>outputSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>updateAmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>finalAmt</name> <init>= <expr><call><name>nFinal</name><argument_list>(<argument><expr><name>mCtxPtr</name></expr></argument>, <argument><expr><name>mPadding</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name> <operator>+</operator> <name>updateAmt</name></expr></argument>, <argument><expr><name>outputSize</name> <operator>-</operator> <name>updateAmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		
		<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><name>updateAmt</name> <operator>+</operator> <name>finalAmt</name></expr></init></decl>;</decl_stmt>
		
		
		<return>return <expr><name>out</name></expr>;</return>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>private</specifier> <specifier>native</specifier> <name>int</name></type> <name>nFinal</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ctxPtr</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>usePadding</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputSize</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>ShortBufferException</name></expr></argument>, <argument><expr><name>IllegalBlockSizeException</name></expr></argument>, <argument><expr><name>BadPaddingException</name></expr></argument></throws>;</function_decl>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>int</name></type> <name>engineGetBlockSize</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>AES_BLOCK_SIZE</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>engineGetIV</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>mIV</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>int</name></type> <name>engineGetOutputSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>inputLen</name> <operator>+</operator> <call><name>nGetCacheSize</name><argument_list>(<argument><expr><name>mCtxPtr</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>AES_BLOCK_SIZE</name></expr>;</return>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>private</specifier> <specifier>native</specifier> <name>int</name></type> <name>nGetCacheSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ctxPtr</name></decl></parameter>)</parameter_list>;</function_decl>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>AlgorithmParameters</name></type> <name>engineGetParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// TODO Auto-generated method stub</comment>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>engineInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SecureRandom</name></type> <name>random</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>InvalidKeyException</name></expr></argument></throws> <block>{<block_content>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ivArray</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>ivArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>ivArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>engineInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>,
			<parameter><decl><type><name>AlgorithmParameterSpec</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>SecureRandom</name></type> <name>random</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
		
		<decl_stmt><decl><type><name>IvParameterSpec</name></type> <name>ivparam</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>params</name> <operator>instanceof</operator> <name>IvParameterSpec</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>ivparam</name> <operator>=</operator> <operator>(</operator><name>IvParameterSpec</name><operator>)</operator> <name>params</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidAlgorithmParameterException</name><argument_list>(<argument><expr><literal type="string">"params must be an IvParameterSpec."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ivparam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>engineInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>AlgorithmParameters</name></type> <name>params</name></decl></parameter>,
			<parameter><decl><type><name>SecureRandom</name></type> <name>random</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyException</name></expr></argument>,
			<argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
		
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name>engineInit</name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>getParameterSpec</name></name><argument_list>(<argument><expr><name><name>AlgorithmParameterSpec</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidParameterSpecException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidAlgorithmParameterException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name>Key</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>IvParameterSpec</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mIsInited</name></expr> )</condition> <block>{<block_content>
			<comment type="line">// Do not allow multiple inits</comment>
			<assert>assert<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</assert>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Don't allow multiple inits"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>NativeLib</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mIsInited</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><name>mIV</name> <operator>=</operator> <call><name><name>params</name><operator>.</operator><name>getIV</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mEncrypting</name> <operator>=</operator> <name>opmode</name> <operator>==</operator> <name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mCtxPtr</name> <operator>=</operator> <call><name>nInit</name><argument_list>(<argument><expr><name>mEncrypting</name></expr></argument>, <argument><expr><call><name><name>key</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mIV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addToCleanupQueue</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mCtxPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>private</specifier> <specifier>native</specifier> <name>long</name></type> <name>nInit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>encrypting</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>engineSetMode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mode</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"CBC"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NoSuchAlgorithmException</name><argument_list>(<argument><expr><literal type="string">"This only supports CBC mode"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>engineSetPadding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>padding</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>NoSuchPaddingException</name></expr></argument></throws> <block>{<block_content>
		
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>mIsInited</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>NativeLib</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>padding</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>padding</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"PKCS5Padding"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NoSuchPaddingException</name><argument_list>(<argument><expr><literal type="string">"Only supports PKCS5Padding."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>mPadding</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>engineUpdate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>maxSize</name> <init>= <expr><call><name>engineGetOutputSize</name><argument_list>(<argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>byte</name></type> <name><name>output</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>maxSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>updateSize</name> <init>= <expr><call><name>update</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>updateSize</name> <operator>==</operator> <name>maxSize</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><name>output</name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// TODO: We could optimize update for this case to avoid this extra copy</comment>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>exact</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>updateSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>exact</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>updateSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>exact</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>int</name></type> <name>engineUpdate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>,
			<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ShortBufferException</name></expr></argument></throws> <block>{<block_content>
		
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>update</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>ShortBufferException</name><argument_list>(<argument><expr><literal type="string">"Insufficient buffer."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>result</name></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><name>int</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>outputSize</name> <init>= <expr><call><name>engineGetOutputSize</name><argument_list>(<argument><expr><name>inputLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><call><name>nUpdate</name><argument_list>(<argument><expr><name>mCtxPtr</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>inputOffset</name></expr></argument>, <argument><expr><name>inputLen</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>outputOffset</name></expr></argument>, <argument><expr><name>outputSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		
		<return>return <expr><name>out</name></expr>;</return>
		
		
	</block_content>}</block></function>
	
	<function_decl><type><specifier>private</specifier> <specifier>native</specifier> <name>int</name></type> <name>nUpdate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>ctxPtr</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inputLen</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outputSize</name></decl></parameter>)</parameter_list>;</function_decl>
	
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/NativeLib.java" hash="21486945d5904f19897f0eb00591c4d7caad0902"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<class><specifier>public</specifier> class <name>NativeLib</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isLoaded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>loadSuccess</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>loaded</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>isLoaded</name></expr> )</condition> <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>loadLibrary</name></name><argument_list>(<argument><expr><literal type="string">"final-key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>loadLibrary</name></name><argument_list>(<argument><expr><literal type="string">"argon2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>( <parameter><decl><type><name>UnsatisfiedLinkError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></catch></try>
			<expr_stmt><expr><name>isLoaded</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>loadSuccess</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>loadSuccess</name></expr>;</return>
		
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/PwStreamCipherFactory.java" hash="dcf96c3ba09f43bd4e61a7a3b78d31a676912685"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>StreamCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engines</name><operator>.</operator><name>ChaCha7539Engine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engines</name><operator>.</operator><name>Salsa20Engine</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>KeyParameter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>params</name><operator>.</operator><name>ParametersWithIV</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>CrsAlgorithm</name></name>;</import>

<class><specifier>public</specifier> class <name>PwStreamCipherFactory</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>StreamCipher</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>CrsAlgorithm</name></type> <name>alg</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>alg</name> <operator>==</operator> <name><name>CrsAlgorithm</name><operator>.</operator><name>Salsa20</name></name></expr> )</condition> <block>{<block_content>
			<return>return <expr><call><name>getSalsa20</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>alg</name> <operator>==</operator> <name><name>CrsAlgorithm</name><operator>.</operator><name>ChaCha20</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getChaCha20</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>SALSA_IV</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{ <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
            <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x2A</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>StreamCipher</name></type> <name>getSalsa20</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Build stream cipher key</comment>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key32</name> <init>= <expr><call><name><name>CryptoUtil</name><operator>.</operator><name>hashSha256</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>KeyParameter</name></type> <name>keyParam</name> <init>= <expr><operator>new</operator> <call><name>KeyParameter</name><argument_list>(<argument><expr><name>key32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ParametersWithIV</name></type> <name>ivParam</name> <init>= <expr><operator>new</operator> <call><name>ParametersWithIV</name><argument_list>(<argument><expr><name>keyParam</name></expr></argument>, <argument><expr><name>SALSA_IV</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>StreamCipher</name></type> <name>cipher</name> <init>= <expr><operator>new</operator> <call><name>Salsa20Engine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ivParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>cipher</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>StreamCipher</name></type> <name>getChaCha20</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Build stream cipher key</comment>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>CryptoUtil</name><operator>.</operator><name>hashSha512</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key32</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>KeyParameter</name></type> <name>keyParam</name> <init>= <expr><operator>new</operator> <call><name>KeyParameter</name><argument_list>(<argument><expr><name>key32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ParametersWithIV</name></type> <name>ivParam</name> <init>= <expr><operator>new</operator> <call><name>ParametersWithIV</name><argument_list>(<argument><expr><name>keyParam</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StreamCipher</name></type> <name>cipher</name> <init>= <expr><operator>new</operator> <call><name>ChaCha7539Engine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>ivParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>cipher</name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/engine/AesEngine.java" hash="d9f96857c249e029bf8660371ea1b99924fcc8cc"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name></name>;</package>


<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>AesEngine</name> <super_list><extends>extends <super><name>CipherEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>CIPHER_UUID</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(
            <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x31</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xC1</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xF2</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xE6</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xBF</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x71</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x43</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x50</literal></expr>,
            <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xBE</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x58</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x05</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x21</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x6A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xFC</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x5A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xFF</literal></expr>
    }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>IV</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument>, <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS5Padding"</literal></expr></argument>, <argument><expr><name>androidOverride</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>IV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cipher</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/engine/ChaCha20Engine.java" hash="0f28635977ad967894f94e914a6f94ecfdb52d5a"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>jce</name><operator>.</operator><name>provider</name><operator>.</operator><name>BouncyCastleProvider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>ChaCha20Engine</name> <super_list><extends>extends <super><name>CipherEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>CIPHER_UUID</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(
        <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xD6</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x03</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x8A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x2B</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x8B</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x6F</literal></expr>,
                <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x4C</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xB5</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xA5</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x24</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x33</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x9A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x31</literal></expr>,
                <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xDB</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xB5</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x9A</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>ivLength</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">12</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>IV</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument>, <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"Chacha7539"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BouncyCastleProvider</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"ChaCha7539"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>IV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cipher</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/engine/CipherEngine.java" hash="97812581dc9207505148fe1328fc7f612459fccf"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>CipherEngine</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>keyLength</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">32</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>ivLength</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">16</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>IV</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument>, <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>public</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>IV</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument>, <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>getCipher</name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/engine/TwofishEngine.java" hash="8163db4caef255cdd34e6517ca476b78a9f80e89"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>TwofishEngine</name> <super_list><extends>extends <super><name>CipherEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>CIPHER_UUID</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(
            <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xAD</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x68</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xF2</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x9F</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x57</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x6F</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x4B</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xB9</literal></expr>,
                    <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xA3</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x6A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xD4</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x7A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xF9</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x65</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x34</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x6C</literal></expr>
            }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Cipher</name></type> <name>getCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opmode</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>IV</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchAlgorithmException</name></expr></argument>, <argument><expr><name>NoSuchPaddingException</name></expr></argument>, <argument><expr><name>InvalidKeyException</name></expr></argument>, <argument><expr><name>InvalidAlgorithmParameterException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>opmode</name> <operator>==</operator> <name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"Twofish/CBC/ZeroBytePadding"</literal></expr></argument>, <argument><expr><name>androidOverride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"Twofish/CBC/NoPadding"</literal></expr></argument>, <argument><expr><name>androidOverride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>opmode</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>IV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>cipher</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/finalkey/AndroidFinalKey.java" hash="f42aa2488ad5ca8ca7f878b2e5e916eeb4cb6da4"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ShortBufferException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>AndroidFinalKey</name> <super_list><extends>extends <super><name>FinalKey</name></super></extends></super_list> <block>{

	<function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"GetInstance"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transformMasterKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pKeySeed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/ECB/NoPadding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"NoSuchAlgorithm: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"NoSuchPadding: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>pKeySeed</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"InvalidPasswordException: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<comment type="line">// Encrypt key rounds times</comment>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>pKey</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pKey</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>destKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>pKey</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newKey</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>destKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>destKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newKey</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ShortBufferException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Short buffer: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
		</block_content>}</block></for>

		<comment type="line">// Hash the key</comment>
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<assert>assert <expr><literal type="boolean">true</literal></expr>;</assert>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>newKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/finalkey/FinalKey.java" hash="5ab1b5218c427b3d3efb553b1a1e708b7fffb9ec"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FinalKey</name> <block>{
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transformMasterKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/finalkey/FinalKeyFactory.java" hash="ecd329edefd3900eeefca75c6cb7c9a07936abab"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>FinalKeyFactory</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>FinalKey</name></type> <name>createFinalKey</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>createFinalKey</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>FinalKey</name></type> <name>createFinalKey</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>androidOverride</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Prefer the native final key implementation</comment>
		<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name><name>CipherFactory</name><operator>.</operator><name>deviceBlacklisted</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>androidOverride</name> <operator>&amp;&amp;</operator> <call><name><name>NativeFinalKey</name><operator>.</operator><name>availble</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>NativeFinalKey</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Fall back on the android crypto implementation</comment>
			<return>return <expr><operator>new</operator> <call><name>AndroidFinalKey</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/finalkey/NativeFinalKey.java" hash="229c71f24c9bd1dba0a92002be5d7c27e03cd33f"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NativeLib</name></name>;</import>


<class><specifier>public</specifier> class <name>NativeFinalKey</name> <super_list><extends>extends <super><name>FinalKey</name></super></extends></super_list> <block>{
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>availble</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>NativeLib</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transformMasterKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>NativeLib</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><call><name>nTransformMasterKey</name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</return>

	</block_content>}</block></function>
	
	<function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name><name>byte</name><index>[]</index></name></type> <name>nTransformMasterKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list>;</function_decl>

	<comment type="line">// For testing</comment>
	<comment type="block">/*
	public static byte[] reflect(byte[] key) {
		NativeLib.init();
		
		return nativeReflect(key);
	}
	
	private static native byte[] nativeReflect(byte[] key);
	*/</comment>
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/AesKdf.java" hash="11bf7bf47f81db11c4e0a9a8a7256a7b134692f8"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CryptoUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name><operator>.</operator><name>FinalKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name><operator>.</operator><name>FinalKeyFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>AesKdf</name> <super_list><extends>extends <super><name>KdfEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>CIPHER_UUID</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(
            <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xC9</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xD9</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xF3</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x9A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x62</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x8A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x44</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x60</literal></expr>,
                    <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xBF</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x74</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x0D</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x08</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xC1</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x8A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x4F</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xEA</literal></expr>
            }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamRounds</name> <init>= <expr><literal type="string">"R"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamSeed</name> <init>= <expr><literal type="string">"S"</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AesKdf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>CIPHER_UUID</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>KdfParameters</name></type> <name>getDefaultParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>KdfParameters</name></type> <name>p</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getDefaultParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setUInt32</name></name><argument_list>(<argument><expr><name>ParamRounds</name></expr></argument>, <argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_ROUNDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl></parameter>, <parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>rounds</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getUInt64</name></name><argument_list>(<argument><expr><name>ParamRounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name>ParamSeed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>masterKey</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>masterKey</name> <operator>=</operator> <call><name><name>CryptoUtil</name><operator>.</operator><name>hashSha256</name></name><argument_list>(<argument><expr><name>masterKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>seed</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>seed</name> <operator>=</operator> <call><name><name>CryptoUtil</name><operator>.</operator><name>hashSha256</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>FinalKey</name></type> <name>key</name> <init>= <expr><call><name><name>FinalKeyFactory</name><operator>.</operator><name>createFinalKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>key</name><operator>.</operator><name>transformMasterKey</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>, <argument><expr><name>masterKey</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>randomize</name><parameter_list>(<parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>seed</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setByteArray</name></name><argument_list>(<argument><expr><name>ParamSeed</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/Argon2Kdf.java" hash="605b8394b22883ff7a29d0e78a8dca0e0c22ebd2"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>Argon2Kdf</name> <super_list><extends>extends <super><name>KdfEngine</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>CIPHER_UUID</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(
            <argument><expr><operator>new</operator> <name><name>byte</name><index>[]</index></name><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xEF</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x63</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x6D</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xDF</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x8C</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x29</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x44</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x4B</literal></expr>,
                    <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x91</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xF7</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xA9</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xA4</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x03</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0xE3</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x0A</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator> <literal type="number">0x0C</literal></expr>
            }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamSalt</name> <init>= <expr><literal type="string">"S"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// byte[]</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamParallelism</name> <init>= <expr><literal type="string">"P"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// UInt32</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamMemory</name> <init>= <expr><literal type="string">"M"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// UInt64</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamIterations</name> <init>= <expr><literal type="string">"I"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// UInt64</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamVersion</name> <init>= <expr><literal type="string">"V"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// UInt32</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamSecretKey</name> <init>= <expr><literal type="string">"K"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// byte[]</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamAssocData</name> <init>= <expr><literal type="string">"A"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// byte[]</comment>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MinVersion</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MaxVersion</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MinSalt</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MaxSalt</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MinIterations</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MaxIterations</name> <init>= <expr><literal type="number">4294967295L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MinMemory</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MaxMemory</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MinParallelism</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MaxParallelism</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DefaultIterations</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DefaultMemory</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DefaultParallelism</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Argon2Kdf</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>CIPHER_UUID</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>KdfParameters</name></type> <name>getDefaultParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>KdfParameters</name></type> <name>p</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getDefaultParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setUInt32</name></name><argument_list>(<argument><expr><name>ParamVersion</name></expr></argument>, <argument><expr><name>MaxVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setUInt64</name></name><argument_list>(<argument><expr><name>ParamMemory</name></expr></argument>, <argument><expr><name>DefaultMemory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setUInt32</name></name><argument_list>(<argument><expr><name>ParamParallelism</name></expr></argument>, <argument><expr><name>DefaultParallelism</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl></parameter>, <parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name>ParamSalt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>parallelism</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>p</name><operator>.</operator><name>getUInt32</name></name><argument_list>(<argument><expr><name>ParamParallelism</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>memory</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getUInt64</name></name><argument_list>(<argument><expr><name>ParamMemory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>iterations</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getUInt64</name></name><argument_list>(<argument><expr><name>ParamIterations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>version</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getUInt32</name></name><argument_list>(<argument><expr><name>ParamVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretKey</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name>ParamSecretKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>assocData</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name>ParamAssocData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>Argon2Native</name><operator>.</operator><name>transformKey</name></name><argument_list>(<argument><expr><name>masterKey</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>parallelism</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>,
                <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><name>assocData</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>randomize</name><parameter_list>(<parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setByteArray</name></name><argument_list>(<argument><expr><name>ParamSalt</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/Argon2Native.java" hash="02f28875d22069a355bbb4b3d16670577346a60a"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NativeLib</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>Argon2Native</name> <block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transformKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parallelism</name></decl></parameter>,
                                              <parameter><decl><type><name>long</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretKey</name></decl></parameter>,
                                              <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>associatedData</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>NativeLib</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>nTransformMasterKey</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>parallelism</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>secretKey</name></expr></argument>, <argument><expr><name>associatedData</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>native</specifier> <name><name>byte</name><index>[]</index></name></type> <name>nTransformMasterKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parallelism</name></decl></parameter>,
                                              <parameter><decl><type><name>long</name></type> <name>memory</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secretKey</name></decl></parameter>,
                                              <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>associatedData</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/KdfEngine.java" hash="9f3ddaa72f4dc82fa9f2a31305490a5dca27578b"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>KdfEngine</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>KdfParameters</name></type> <name>getDefaultParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>KdfParameters</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transform</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl></parameter>, <parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>randomize</name><parameter_list>(<parameter><decl><type><name>KdfParameters</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/KdfFactory.java" hash="86f6963c9447ca42466d82ce8c925f38694a205f"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>KdfFactory</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>KdfEngine</name></argument>&gt;</argument_list></name></type> <name>kdfList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>KdfEngine</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <expr_stmt><expr><call><name><name>kdfList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AesKdf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>kdfList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Argon2Kdf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KdfParameters</name></type> <name>getDefaultParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>kdfList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDefaultParameters</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KdfEngine</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>KdfEngine</name></type> <name>engine</name><range>: <expr><name>kdfList</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>engine</name><operator>.</operator><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>engine</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/crypto/keyDerivation/KdfParameters.java" hash="ea615c194f3f1702d96bddee18b2a89f97f4957f"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>collections</name><operator>.</operator><name>VariantDictionary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>KdfParameters</name> <super_list><extends>extends <super><name>VariantDictionary</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>kdfUUID</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ParamUUID</name> <init>= <expr><literal type="string">"$UUID"</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>KdfParameters</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>kdfUUID</name> <operator>=</operator> <name>uuid</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>KdfParameters</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LEDataInputStream</name></type> <name>lis</name> <init>= <expr><operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>bis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>VariantDictionary</name></type> <name>d</name> <init>= <expr><call><name><name>VariantDictionary</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>UUID</name></type> <name>uuid</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name>ParamUUID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>KdfParameters</name></type> <name>kdfP</name> <init>= <expr><operator>new</operator> <call><name>KdfParameters</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>kdfP</name><operator>.</operator><name>copyTo</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>kdfP</name></expr>;</return>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>KdfParameters</name></type> <name>kdf</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LEDataOutputStream</name></type> <name>los</name> <init>= <expr><operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>KdfParameters</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>kdf</name></expr></argument>, <argument><expr><name>los</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/BinaryPool.java" hash="d94659970138a673b02e4005d7d3a954af856491"><comment type="block">/*
 * Copyright 2013-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>BinaryPool</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>pool</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>BinaryPool</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>BinaryPool</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>rootGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name>ProtectedBinary</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>pool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>ProtectedBinary</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ProtectedBinary</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>pool</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>


	<function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>pool</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>entry</name><range>: <expr><call><name><name>pool</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>binaries</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>pool</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AddBinaries</name> <super_list><extends>extends <super><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>PwEntryV4</name></type> <name>histEntry</name> <range>: <expr><name><name>entry</name><operator>.</operator><name>history</name></name></expr></range></decl></init>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>poolAdd</name><argument_list>(<argument><expr><name><name>histEntry</name><operator>.</operator><name>binaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			</block_content>}</block></for>
			
			<expr_stmt><expr><call><name>poolAdd</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>binaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></function>
		
	}</block></class>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>poolAdd</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>ProtectedBinary</name></type> <name>pb</name> <range>: <expr><call><name><name>dict</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>poolAdd</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>poolAdd</name><parameter_list>(<parameter><decl><type><name>ProtectedBinary</name></type> <name>pb</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>pb</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<if_stmt><if>if <condition>(<expr><call><name>poolFind</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>pool</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>findUnusedKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>unusedKey</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>unusedKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>unusedKey</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <return>return <expr><name>unusedKey</name></expr>;</return>
    </block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>poolFind</name><parameter_list>(<parameter><decl><type><name>ProtectedBinary</name></type> <name>pb</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>pool</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>rootGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>EntryHandler</name></type> <name>eh</name> <init>= <expr><operator>new</operator> <call><name>AddBinaries</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>rootGroup</name><operator>.</operator><name>preOrderTraverseTree</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/CrsAlgorithm.java" hash="8fff0ece328b9f361d346c33a6b1b3a2fd14e758"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<enum><specifier>public</specifier> enum <name>CrsAlgorithm</name> <block>{
	
	<decl><name>Null</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,
	<decl><name>ArcFourVariant</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,
	<decl><name>Salsa20</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>,
	<decl><name>ChaCha20</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
	
	<constructor><specifier>private</specifier> <name>CrsAlgorithm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>CrsAlgorithm</name></type> <name>fromId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>( <init><decl><type><name>CrsAlgorithm</name></type> <name>e</name> <range>: <expr><call><name><name>CrsAlgorithm</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name><name>e</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>num</name></expr> )</condition> <block>{<block_content>
				<return>return <expr><name>e</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>

}</block></enum>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/EntryHandler.java" hash="1cd11e30c008adf3e2eb1bd23204bb764977049f"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<comment type="block" format="javadoc">/** "Delegate" class for operating on each entry when traversing all of
 * them
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>EntryHandler</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>PwEntry</name></extends></parameter>&gt;</parameter_list></name> <block>{
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
	
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/EntrySearchHandler.java" hash="ca736f40cedc6ef4bf43fb977834b86d9f6da167"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>iterator</name><operator>.</operator><name>EntrySearchStringIterator</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>EntrySearchHandler</name> <super_list><extends>extends <super><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>SearchParameters</name></type> <name>sp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>now</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>EntrySearchHandler</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>group</name> <operator>instanceof</operator> <name>PwGroupV3</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>EntrySearchHandlerV4</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</return> 
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>group</name> <operator>instanceof</operator> <name>PwGroupV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>EntrySearchHandlerV4</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Not implemented."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
		
	</block_content>}</block></function>

	<constructor><specifier>protected</specifier> <name>EntrySearchHandler</name><parameter_list>(<parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>listStorage</name></name> <operator>=</operator> <name>listStorage</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>respectEntrySearchingDisabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entry</name><operator>.</operator><name>isSearchingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>excludeExpired</name></name> <operator>&amp;&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>expires</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>now</name><operator>.</operator><name>after</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getExpiryTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>term</name> <init>= <expr><name><name>sp</name><operator>.</operator><name>searchString</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>ignoreCase</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>term</name> <operator>=</operator> <call><name><name>term</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>searchStrings</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
            <expr_stmt><expr><call><name><name>listStorage</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return> 
        </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>searchInGroupNames</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>groupName</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>groupName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                	<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>ignoreCase</name></name></expr>)</condition> <block>{<block_content>
                		<expr_stmt><expr><name>groupName</name> <operator>=</operator> <call><name><name>groupName</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                	</block_content>}</block></if></if_stmt>

                	<if_stmt><if>if <condition>(<expr><call><name><name>groupName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>listStorage</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                	</block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>searchID</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>listStorage</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>boolean</name></type> <name>searchID</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>searchStrings</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>term</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>EntrySearchStringIterator</name></type> <name>iter</name> <init>= <expr><call><name><name>EntrySearchStringIterator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>ignoreCase</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/EntrySearchHandlerAll.java" hash="ca848bdfb548f24b1142ee3eacd2f294ee167e74"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>EntrySearchHandlerAll</name> <super_list><extends>extends <super><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>SearchParameters</name></type> <name>sp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>now</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>EntrySearchHandlerAll</name><parameter_list>(<parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>listStorage</name></name> <operator>=</operator> <name>listStorage</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>now</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>respectEntrySearchingDisabled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entry</name><operator>.</operator><name>isSearchingEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>excludeExpired</name></name> <operator>&amp;&amp;</operator> <call><name><name>entry</name><operator>.</operator><name>expires</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>now</name><operator>.</operator><name>after</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getExpiryTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>listStorage</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/EntrySearchHandlerV4.java" hash="5c088c1d06bcbdaab37faf2745ce486bcc8f53f1"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>StrUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UuidUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>EntrySearchHandlerV4</name> <super_list><extends>extends <super><name>EntrySearchHandler</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>SearchParametersV4</name></type> <name>sp</name></decl>;</decl_stmt>

	<constructor><specifier>protected</specifier> <name>EntrySearchHandlerV4</name><parameter_list>(<parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <operator>(</operator><name>SearchParametersV4</name><operator>)</operator> <name>sp</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>boolean</name></type> <name>searchID</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>sp</name><operator>.</operator><name>searchInUUIDs</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>hex</name> <init>= <expr><call><name><name>UuidUtil</name><operator>.</operator><name>toHexString</name></name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>StrUtil</name><operator>.</operator><name>indexOfIgnoreCase</name></name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/GroupHandler.java" hash="e72946f7eb001c6ae419232bb23f813414ebef9e"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>


<comment type="block" format="javadoc">/** "Delegate" class for operating on each group when traversing all of
 * them
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>GroupHandler</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/ITimeLogger.java" hash="6df6a3639f5e19a92c492e910b09a6f22c7eb1b1"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<interface><specifier>public</specifier> interface <name>ITimeLogger</name> <block>{
	<function_decl><type><name>Date</name></type> <name>getLastModificationTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>Date</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setCreationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>Date</name></type> <name>getLastAccessTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>Date</name></type> <name>getExpiryTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setExpiryTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>boolean</name></type> <name>expires</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setExpires</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>exp</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>long</name></type> <name>getUsageCount</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setUsageCount</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><name>Date</name></type> <name>getLocationChanged</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>setLocationChanged</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwCompressionAlgorithm.java" hash="492e440e00fbb6083ff0f7375c3362a28a71ce25"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<enum><specifier>public</specifier> enum <name>PwCompressionAlgorithm</name> <block>{
	
	<decl><name>None</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,
	<decl><name>Gzip</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;
	
	<comment type="line">// Note: We can get away with using int's to store unsigned 32-bit ints</comment>
	<comment type="line">//       since we won't do arithmetic on these values (also unlikely to</comment>
	<comment type="line">//       reach negative ids).</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>private</specifier> <name>PwCompressionAlgorithm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwCompressionAlgorithm</name></type> <name>fromId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>( <init><decl><type><name>PwCompressionAlgorithm</name></type> <name>e</name> <range>: <expr><call><name><name>PwCompressionAlgorithm</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init> )</control> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name><name>e</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>num</name></expr> )</condition> <block>{<block_content>
				<return>return <expr><name>e</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>
	
}</block></enum>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabase.java" hash="3e700902a232c52e57dfa85b6541de8fc0694fb8"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name><operator>.</operator><name>FinalKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>finalkey</name><operator>.</operator><name>FinalKeyFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>KeyFileEmptyException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>NullOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwDatabase</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type> <name><name>masterKey</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>finalKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>name</name> <init>= <expr><literal type="string">"KeePass database"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>PwGroup</name></type> <name>rootGroup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>PwIconFactory</name></type> <name>iconFactory</name> <init>= <expr><operator>new</operator> <call><name>PwIconFactory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>PwGroupId</name></argument>, <argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>PwGroupId</name></argument>, <argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isKDBExtension</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>extIdx</name> <init>= <expr><call><name><name>filename</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>extIdx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>filename</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>extIdx</name></expr></argument>, <argument><expr><call><name><name>filename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">".kdb"</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwDatabase</name></type> <name>getNewDBInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isKDBExtension</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>PwDatabaseV3</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>PwDatabaseV4</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>makeFinalKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numRounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

        <comment type="line">// Write checksum Checksum</comment>
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
        <decl_stmt><decl><type><name>NullOutputStream</name></type> <name>nos</name> <init>= <expr><operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>transformedMasterKey</name> <init>= <expr><call><name>transformMasterKey</name><argument_list>(<argument><expr><name>masterSeed2</name></expr></argument>, <argument><expr><name>masterKey</name></expr></argument>, <argument><expr><name>numRounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>masterSeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>transformedMasterKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>finalKey</name> <operator>=</operator> <call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Encrypt the master key a few times to make brute-force key-search harder
     * @throws IOException
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>transformMasterKey</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pKeySeed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
    <block>{<block_content>
        <decl_stmt><decl><type><name>FinalKey</name></type> <name>key</name> <init>= <expr><call><name><name>FinalKeyFactory</name><operator>.</operator><name>createFinalKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>key</name><operator>.</operator><name>transformMasterKey</name></name><argument_list>(<argument><expr><name>pKeySeed</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getMasterKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMasterKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                <assert>assert<expr><operator>(</operator><name>key</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

                <expr_stmt><expr><name>masterKey</name> <operator>=</operator> <call><name>getMasterKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getCompositeKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                <assert>assert<expr><operator>(</operator><name>key</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fileKey</name> <init>= <expr><call><name>getFileKey</name><argument_list>(<argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>passwordKey</name> <init>= <expr><call><name>getPasswordKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>

                <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>passwordKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>fileKey</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getFileKey</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
                <assert>assert<expr><operator>(</operator><name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

                <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyStream</name></name><argument_list>(<argument><expr><name>keyInputStream</name></expr></argument>, <argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>keyData</name> <init>= <expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>keyData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name> <init>= <expr><call><name>loadXmlKeyFile</name><argument_list>(<argument><expr><name>bis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>( <expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                    <return>return <expr><name>key</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>fileSize</name> <init>= <expr><name><name>keyData</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>( <expr><name>fileSize</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>KeyFileEmptyException</name><argument_list>()</argument_list></call></expr>;</throw>
                </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>fileSize</name> <operator>==</operator> <literal type="number">32</literal></expr> )</condition> <block>{<block_content>
                    <return>return <expr><name>keyData</name></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>fileSize</name> <operator>==</operator> <literal type="number">64</literal></expr> )</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hex</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <try>try <block>{<block_content>
                        <return>return <expr><call><name>hexStringToByteArray</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>keyData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IndexOutOfBoundsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// Key is not base 64, treat it as binary data</comment>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
                <comment type="line">//SHA256Digest md = new SHA256Digest();</comment>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>keyData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>

                <return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name><name>byte</name><index>[]</index></name></type> <name>loadXmlKeyFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hexStringToByteArray</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name><name>Character</name><operator>.</operator><name>digit</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator>
                                 <operator>+</operator> <call><name><name>Character</name><operator>.</operator><name>digit</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>data</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>validatePasswordEncoding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>encoding</name> <init>= <expr><call><name>getPasswordEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bKey</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>bKey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>String</name></type> <name>reencoded</name></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>reencoded</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>bKey</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <return>return <expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>reencoded</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getPasswordEncoding</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getPasswordKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <assert>assert<expr><operator>(</operator><name>key</name><operator>!=</operator><literal type="null">null</literal><operator>)</operator></expr>;</assert>

        <if_stmt><if>if <condition>( <expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><literal type="string">"Key cannot be empty."</literal></expr></argument> )</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bKey</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>bKey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><call><name>getPasswordEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <assert>assert <expr><literal type="boolean">false</literal></expr>;</assert>
            <expr_stmt><expr><name>bKey</name> <operator>=</operator> <call><name><name>key</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>bKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bKey</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGrpRoots</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGroups</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>getEntries</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>long</name></type> <name>getNumRounds</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setNumRounds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NumberFormatException</name></expr></argument></throws>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>appSettingsEnabled</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwEncryptionAlgorithm</name></type> <name>getEncAlgorithm</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addGroupTo</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>newGroup</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Add group to parent group</comment>
        <if_stmt><if>if <condition>( <expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><name>parent</name> <operator>=</operator> <name>rootGroup</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newGroup</name><operator>.</operator><name>setParent</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>newGroup</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeGroupFrom</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Remove group from parent group</comment>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>remove</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addEntryTo</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>newEntry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Add entry to parent</comment>
        <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>newEntry</name><operator>.</operator><name>setParent</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>newEntry</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeEntryFrom</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Remove entry for parent</comment>
        <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>remove</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwGroupId</name></type> <name>newGroupId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Determine if an id number is already in use
     *
     * @param id
     *            ID number to check for
     * @return True if the ID is used, false otherwise
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isGroupIdUsed</name><parameter_list>(<parameter><decl><type><name>PwGroupId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name>getGroups</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PwGroup</name></type> <name>group</name> <init>=<expr><call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>group</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwGroup</name></type> <name>createGroup</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isBackup</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>populateGlobals</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>currentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>childGroups</name> <init>= <expr><name><name>currentGroup</name><operator>.</operator><name>childGroups</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>childEntries</name> <init>= <expr><name><name>currentGroup</name><operator>.</operator><name>childEntries</name></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childEntries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PwEntry</name></type> <name>cur</name> <init>= <expr><call><name><name>childEntries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cur</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
            <decl_stmt><decl><type><name>PwGroup</name></type> <name>cur</name> <init>= <expr><call><name><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cur</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>populateGlobals</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canRecycle</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canRecycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>recycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Assume calls to this are protected by calling inRecyleBin</comment>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Call not valid for .kdb databases."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>undoRecycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>origParent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Call not valid for .kdb databases."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>removeEntryFrom</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>undoDeleteEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>origParent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>addEntryTo</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>origParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>PwGroup</name></type> <name>getRecycleBin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGroupSearchable</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>omitBackup</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize a newly created database
     */</comment>
    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>initNew</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dbPath</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list>;</function_decl>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabaseV3.java" hash="9bbcd3e59ac11f809c631a078c0c6b929717f21a"><comment type="block">/*
 * Copyright 2009-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 *

Derived from

KeePass for J2ME

Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<comment type="line">// Java</comment>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Naomaru Itoi &lt;nao@phoneid.org&gt;
 * @author Bill Zwicky &lt;wrzwicky@pobox.com&gt;
 * @author Dominik Reichl &lt;dominik.reichl@t-online.de&gt;
 */</comment>
<class><specifier>public</specifier> class <name>PwDatabaseV3</name> <super_list><extends>extends <super><name>PwDatabase</name></super></extends></super_list> <block>{
	<comment type="line">// Constants</comment>
	<comment type="line">// private static final int PWM_SESSION_KEY_SIZE = 12;</comment>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ENCRYPTION_ROUNDS</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Special entry for settings</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwEntry</name></type> <name>metaInfo</name></decl>;</decl_stmt>

	<comment type="line">// all entries</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// all groups</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">// Algorithm used to encrypt the database</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwEncryptionAlgorithm</name></type> <name>algorithm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>numKeyEncRounds</name></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwEncryptionAlgorithm</name></type> <name>getEncAlgorithm</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>algorithm</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getNumKeyEncRecords</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>numKeyEncRounds</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGroups</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>groups</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>getEntries</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>entries</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setGroups</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>grp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>groups</name> <operator>=</operator> <name>grp</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGrpRoots</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>kids</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>grp</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>grp</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>kids</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>kids</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getRootGroupId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>grp</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>grp</name><operator>.</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name><name>grp</name><operator>.</operator><name>groupId</name></name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGrpChildren</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>groups</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>kids</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><operator>++</operator><name>idx</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>grp</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>grp</name><operator>.</operator><name>level</name></name> <operator>&lt;</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>grp</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>kids</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>
		<return>return <expr><name>kids</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>getEntries</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>kids</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/*
		 * for( Iterator i = entries.iterator(); i.hasNext(); ) { PwEntryV3 ent
		 * = (PwEntryV3)i.next(); if( ent.groupId == parent.groupId ) kids.add(
		 * ent ); }
		 */</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>ent</name> <init>= <expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <call><name><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>.</operator><name>groupId</name></name> <operator>==</operator> <name><name>parent</name><operator>.</operator><name>groupId</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name><name>kids</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>kids</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>name</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>constructTree</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>currentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// I'm in root</comment>
		<if_stmt><if>if <condition>(<expr><name>currentGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>PwGroupV3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>rootGroup</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>rootChildGroups</name> <init>= <expr><call><name>getGrpRoots</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setGroups</name></name><argument_list>(<argument><expr><name>rootChildGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>root</name><operator>.</operator><name>childEntries</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>root</name><operator>.</operator><name>level</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>rootChildGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>grp</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>rootChildGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>constructTree</name><argument_list>(<argument><expr><name>grp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// I'm in non-root</comment>
		<comment type="line">// get child groups</comment>
		<expr_stmt><expr><call><name><name>currentGroup</name><operator>.</operator><name>setGroups</name></name><argument_list>(<argument><expr><call><name>getGrpChildren</name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>currentGroup</name><operator>.</operator><name>childEntries</name></name> <operator>=</operator> <call><name>getEntries</name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// set parent in child entries</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>currentGroup</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <call><name><name>currentGroup</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>currentGroup</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<comment type="line">// recursively construct child groups</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>currentGroup</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>grp</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>currentGroup</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>currentGroup</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>constructTree</name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>currentGroup</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return;</return>
	</block_content>}</block></function>

	<comment type="block">/*
	public void removeGroup(PwGroupV3 group) {
		group.parent.childGroups.remove(group);
		groups.remove(group);
	}
	*/</comment>

	<comment type="block" format="javadoc">/**
	 * Generates an unused random group id
	 * 
	 * @return new group id
	 */</comment>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupIdV3</name></type> <name>newGroupId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupIdV3</name></type> <name>newId</name> <init>= <expr><operator>new</operator> <call><name>PwGroupIdV3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>newId</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupIdV3</name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isGroupIdUsed</name><argument_list>(<argument><expr><name>newId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<return>return <expr><name>newId</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getMasterKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert <expr><operator>(</operator><name>key</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

		<if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getCompositeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getPasswordKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getFileKey</name><argument_list>(<argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Key cannot be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>String</name></type> <name>getPasswordEncoding</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="string">"ISO-8859-1"</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>loadXmlKeyFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>



	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>getNumRounds</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>numKeyEncRounds</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setNumRounds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NumberFormatException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rounds</name> <operator>&gt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>||</operator> <name>rounds</name> <operator>&lt;</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>numKeyEncRounds</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>rounds</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>appSettingsEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>addEntryTo</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>newEntry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addEntryTo</name></name><argument_list>(<argument><expr><name>newEntry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Add entry to root entries</comment>
		<expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>addGroupTo</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>newGroup</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addGroupTo</name></name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Add group to root groups</comment>
		<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>removeEntryFrom</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>removeEntryFrom</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Remove entry from root entry</comment>
		<expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>removeGroupFrom</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>remove</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>removeGroupFrom</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Remove group from root entry</comment>
		<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroup</name></type> <name>createGroup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwGroupV3</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<comment type="line">// TODO: This could still be refactored cleaner</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>copyEncrypted</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// No-op</comment>
	</block_content>}</block></function>

	<comment type="line">// TODO: This could still be refactored cleaner</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>copyHeader</name><parameter_list>(<parameter><decl><type><name>PwDbHeaderV3</name></type> <name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// No-op</comment>
	</block_content>}</block></function>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isBackup</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <name>group</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>g</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>.</operator><name>level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>g</name><operator>.</operator><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"Backup"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isGroupSearchable</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>omitBackup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>super</name><operator>.</operator><name>isGroupSearchable</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>omitBackup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>!</operator><operator>(</operator><name>omitBackup</name> <operator>&amp;&amp;</operator> <call><name>isBackup</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>initAndAddGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>group</name> <init>= <expr><call><name>createGroup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>initNewGroup</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>newGroupId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>group</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name>iconId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>addGroupTo</name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>initNew</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dbPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>numKeyEncRounds</name> <operator>=</operator> <name>DEFAULT_ENCRYPTION_ROUNDS</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"KeePass Password Manager"</literal></expr>;</expr_stmt>
		<comment type="line">// Build the root group</comment>
		<expr_stmt><expr><call><name>constructTree</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Add a couple default groups</comment>
		<expr_stmt><expr><call><name>initAndAddGroup</name><argument_list>(<argument><expr><literal type="string">"Internet"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>initAndAddGroup</name><argument_list>(<argument><expr><literal type="string">"eMail"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabaseV3Debug.java" hash="c0944f1b9a4c845721bead2d5b80aaafb2c5344d"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDatabaseV3Debug</name> <super_list><extends>extends <super><name>PwDatabaseV3</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>postHeader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDbHeaderV3</name></type> <name>dbHeader</name></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>copyEncrypted</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>postHeader</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>postHeader</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>copyHeader</name><parameter_list>(<parameter><decl><type><name>PwDbHeaderV3</name></type> <name>header</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>dbHeader</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabaseV4.java" hash="f2d8b78e260c2fd6960f1ddf5cee1f2d56d97a7c"><comment type="block">/*
 * Copyright 2010-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>URLUtil</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>collections</name><operator>.</operator><name>VariantDictionary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CryptoUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>AesEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>CipherEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>AesKdf</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfParameters</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Element</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Text</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilderFactory</name></name>;</import>


<class><specifier>public</specifier> class <name>PwDatabaseV4</name> <super_list><extends>extends <super><name>PwDatabase</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>DEFAULT_NOW</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>UUID_ZERO</name> <init>= <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ROUNDS</name> <init>= <expr><literal type="number">6000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_HISTORY_MAX_ITEMS</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt> <comment type="line">// -1 unlimited</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_HISTORY_MAX_SIZE</name> <init>= <expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt> <comment type="line">// -1 unlimited</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RECYCLEBIN_NAME</name> <init>= <expr><literal type="string">"RecycleBin"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hmacKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>dataCipher</name> <init>= <expr><name><name>AesEngine</name><operator>.</operator><name>CIPHER_UUID</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>CipherEngine</name></type> <name>dataEngine</name> <init>= <expr><operator>new</operator> <call><name>AesEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwCompressionAlgorithm</name></type> <name>compressionAlgorithm</name> <init>= <expr><name><name>PwCompressionAlgorithm</name><operator>.</operator><name>Gzip</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// TODO: Refactor me away to get directly from kdfParameters</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>numKeyEncRounds</name> <init>= <expr><literal type="number">6000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>nameChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>settingsChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>description</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>descriptionChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>defaultUserName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>defaultUserNameChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>keyLastChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>keyChangeRecDays</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>keyChangeForceDays</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>keyChangeForceOnce</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>maintenanceHistoryDays</name> <init>= <expr><literal type="number">365</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>color</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>recycleBinEnabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>recycleBinUUID</name> <init>= <expr><name>UUID_ZERO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>recycleBinChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>entryTemplatesGroup</name> <init>= <expr><name>UUID_ZERO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>Date</name></type> <name>entryTemplatesGroupChanged</name> <init>= <expr><name>DEFAULT_NOW</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>historyMaxItems</name> <init>= <expr><name>DEFAULT_HISTORY_MAX_ITEMS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>historyMaxSize</name> <init>= <expr><name>DEFAULT_HISTORY_MAX_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>lastSelectedGroup</name> <init>= <expr><name>UUID_ZERO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>lastTopVisibleGroup</name> <init>= <expr><name>UUID_ZERO</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>MemoryProtectionConfig</name></type> <name>memoryProtection</name> <init>= <expr><operator>new</operator> <call><name>MemoryProtectionConfig</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwDeletedObject</name></argument>&gt;</argument_list></name></type> <name>deletedObjects</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwDeletedObject</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwIconCustom</name></argument>&gt;</argument_list></name></type> <name>customIcons</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwIconCustom</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>customData</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>KdfParameters</name></type> <name>kdfParameters</name> <init>= <expr><call><name><name>KdfFactory</name><operator>.</operator><name>getDefaultParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>VariantDictionary</name></type> <name>publicCustomData</name> <init>= <expr><operator>new</operator> <call><name>VariantDictionary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>BinaryPool</name></type> <name>binPool</name> <init>= <expr><operator>new</operator> <call><name>BinaryPool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>localizedAppName</name> <init>= <expr><literal type="string">"KeePassDroid"</literal></expr></init></decl>;</decl_stmt>
    
    <class><specifier>public</specifier> class <name>MemoryProtectionConfig</name> <block>{
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>protectTitle</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>protectUserName</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>protectPassword</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>protectUrl</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>protectNotes</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	
    	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>autoEnableVisualHiding</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    	
    	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>GetProtection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>field</name></decl></parameter>)</parameter_list> <block>{<block_content>
    		<if_stmt><if>if <condition>( <expr><call><name><name>field</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>TITLE_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>protectTitle</name></expr>;</return></block_content></block></if></if_stmt>
    		<if_stmt><if>if <condition>( <expr><call><name><name>field</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>USERNAME_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>protectUserName</name></expr>;</return></block_content></block></if></if_stmt>
    		<if_stmt><if>if <condition>( <expr><call><name><name>field</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>PASSWORD_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>protectPassword</name></expr>;</return></block_content></block></if></if_stmt>
    		<if_stmt><if>if <condition>( <expr><call><name><name>field</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>URL_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>protectUrl</name></expr>;</return></block_content></block></if></if_stmt>
    		<if_stmt><if>if <condition>( <expr><call><name><name>field</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>NOTES_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>protectNotes</name></expr>;</return></block_content></block></if></if_stmt>
    		
    		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
    	</block_content>}</block></function>
    }</block></class>
    
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getMasterKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>InvalidKeyFileException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>key</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fKey</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getCompositeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>fKey</name> <operator>=</operator>  <call><name>getPasswordKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>keyInputStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>fKey</name> <operator>=</operator> <call><name>getFileKey</name><argument_list>(<argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><literal type="string">"Key cannot be empty."</literal></expr></argument> )</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No SHA-256 implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<return>return <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>fKey</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>makeFinalKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numRounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>transformedMasterKey</name> <init>= <expr><call><name>transformMasterKey</name><argument_list>(<argument><expr><name>masterSeed2</name></expr></argument>, <argument><expr><name>masterKey</name></expr></argument>, <argument><expr><name>numRounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>cmpKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>masterSeed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>transformedMasterKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>finalKey</name> <operator>=</operator> <call><name><name>CryptoUtil</name><operator>.</operator><name>resizeKey</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name><name>dataEngine</name><operator>.</operator><name>keyLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cmpKey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>hmacKey</name> <operator>=</operator> <call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No SHA-512 implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally>finally <block>{<block_content>
			<expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>makeFinalKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed</name></decl></parameter>, <parameter><decl><type><name>KdfParameters</name></type> <name>kdfP</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
    	<expr_stmt><expr><call><name>makeFinalKey</name><argument_list>(<argument><expr><name>masterSeed</name></expr></argument>, <argument><expr><name>kdfP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>makeFinalKey</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>masterSeed</name></decl></parameter>, <parameter><decl><type><name>KdfParameters</name></type> <name>kdfP</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list>
			<throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<decl_stmt><decl><type><name>KdfEngine</name></type> <name>kdfEngine</name> <init>= <expr><call><name><name>KdfFactory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>kdfP</name><operator>.</operator><name>kdfUUID</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>kdfEngine</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unknown key derivation function"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Set to 6000 rounds to open corrupted database</comment>
		<if_stmt><if>if <condition>(<expr><name>roundsFix</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>kdfP</name><operator>.</operator><name>kdfUUID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AesKdf</name><operator>.</operator><name>CIPHER_UUID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>kdfP</name><operator>.</operator><name>setUInt32</name></name><argument_list>(<argument><expr><name><name>AesKdf</name><operator>.</operator><name>ParamRounds</name></name></expr></argument>, <argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>numKeyEncRounds</name> <operator>=</operator> <name>roundsFix</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>transformedMasterKey</name> <init>= <expr><call><name><name>kdfEngine</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>masterKey</name></expr></argument>, <argument><expr><name>kdfP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>transformedMasterKey</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>transformedMasterKey</name> <operator>=</operator> <call><name><name>CryptoUtil</name><operator>.</operator><name>hashSha256</name></name><argument_list>(<argument><expr><name>transformedMasterKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>cmpKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">65</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>masterSeed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>transformedMasterKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>finalKey</name> <operator>=</operator> <call><name><name>CryptoUtil</name><operator>.</operator><name>resizeKey</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name><name>dataEngine</name><operator>.</operator><name>keyLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cmpKey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>hmacKey</name> <operator>=</operator> <call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No SHA-512 implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <finally>finally <block>{<block_content>
			<expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>cmpKey</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></finally></try>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>String</name></type> <name>getPasswordEncoding</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="string">"UTF-8"</literal></expr>;</return>
	</block_content>}</block></function>
    
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>RootElementName</name> <init>= <expr><literal type="string">"KeyFile"</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//private static final String MetaElementName = "Meta";</comment>
	<comment type="line">//private static final String VersionElementName = "Version";</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KeyElementName</name> <init>= <expr><literal type="string">"Key"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KeyDataElementName</name> <init>= <expr><literal type="string">"Data"</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>loadXmlKeyFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<decl_stmt><decl><type><name>DocumentBuilderFactory</name></type> <name>dbf</name> <init>= <expr><call><name><name>DocumentBuilderFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>DocumentBuilder</name></type> <name>db</name> <init>= <expr><call><name><name>dbf</name><operator>.</operator><name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>Element</name></type> <name>el</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getDocumentElement</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>el</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator> <call><name><name>el</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>RootElementName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name>NodeList</name></type> <name>children</name> <init>= <expr><call><name><name>el</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>children</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="null">null</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>children</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
				<decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>( <expr><call><name><name>child</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>KeyElementName</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>NodeList</name></type> <name>keyChildren</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>keyChildren</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
						<decl_stmt><decl><type><name>Node</name></type> <name>keyChild</name> <init>= <expr><call><name><name>keyChildren</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if_stmt><if>if <condition>( <expr><call><name><name>keyChild</name><operator>.</operator><name>getNodeName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>KeyDataElementName</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
							<decl_stmt><decl><type><name>NodeList</name></type> <name>children2</name> <init>= <expr><call><name><name>keyChild</name><operator>.</operator><name>getChildNodes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
							<for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>children2</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
								<decl_stmt><decl><type><name>Node</name></type> <name>text</name> <init>= <expr><call><name><name>children2</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if_stmt><if>if <condition>(<expr><call><name><name>text</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>TEXT_NODE</name></name></expr>)</condition> <block>{<block_content>
									<decl_stmt><decl><type><name>Text</name></type> <name>txt</name> <init>= <expr><operator>(</operator><name>Text</name><operator>)</operator> <name>text</name></expr></init></decl>;</decl_stmt>
									<return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>txt</name><operator>.</operator><name>getNodeValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr>;</return>
								</block_content>}</block></if></if_stmt>
							</block_content>}</block></for>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></for>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></catch></try>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGroups</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>rootGroup</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>buildChildGroupsRecursive</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>list</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>getGrpRoots</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name><name>rootGroup</name><operator>.</operator><name>childGroups</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>getEntries</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>rootGroup</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>buildChildEntriesRecursive</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>list</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>getNumRounds</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>numKeyEncRounds</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setNumRounds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NumberFormatException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>numKeyEncRounds</name> <operator>=</operator> <name>rounds</name></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>appSettingsEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwEncryptionAlgorithm</name></type> <name>getEncAlgorithm</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupIdV4</name></type> <name>newGroupId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupIdV4</name></type> <name>id</name> <init>= <expr><operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><name>UUID_ZERO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isGroupIdUsed</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><name>id</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroup</name></type> <name>createGroup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwGroupV4</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isBackup</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recycleBinEnabled</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>group</name><operator>.</operator><name>isContainedIn</name></name><argument_list>(<argument><expr><call><name>getRecycleBin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>populateGlobals</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>currentGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>rootGroup</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>populateGlobals</name></name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** Ensure that the recycle bin group exists, if enabled and create it
	 *  if it doesn't exist 
	 *  
	 */</comment>
	<function><type><specifier>private</specifier> <name>void</name></type> <name>ensureRecycleBin</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getRecycleBin</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">// Create recycle bin</comment>
				
			<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>recycleBin</name> <init>= <expr><operator>new</operator> <call><name>PwGroupV4</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>RECYCLEBIN_NAME</name></expr></argument>, <argument><expr><call><name><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name><name>PwIconStandard</name><operator>.</operator><name>TRASH_BIN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>recycleBin</name><operator>.</operator><name>enableAutoType</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>recycleBin</name><operator>.</operator><name>enableSearching</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>recycleBin</name><operator>.</operator><name>isExpanded</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>addGroupTo</name><argument_list>(<argument><expr><name>recycleBin</name></expr></argument>, <argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>recycleBinUUID</name> <operator>=</operator> <name><name>recycleBin</name><operator>.</operator><name>uuid</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>canRecycle</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recycleBinEnabled</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>recycle</name> <init>= <expr><call><name>getRecycleBin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><operator>(</operator><name>recycle</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>group</name><operator>.</operator><name>isContainedIn</name></name><argument_list>(<argument><expr><name>recycle</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>canRecycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recycleBinEnabled</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><name>parent</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>canRecycle</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>recycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>ensureRecycleBin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>removeEntryFrom</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>recycleBin</name> <init>= <expr><call><name>getRecycleBin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>addEntryTo</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>recycleBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>touchLocation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>undoRecycle</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>origParent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>recycleBin</name> <init>= <expr><call><name>getRecycleBin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>removeEntryFrom</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>recycleBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>addEntryTo</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>origParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>deleteEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>deleteEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>deletedObjects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PwDeletedObject</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>undoDeleteEntry</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>origParent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>undoDeleteEntry</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>origParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>deletedObjects</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PwDeletedObject</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupV4</name></type> <name>getRecycleBin</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>recycleBinUUID</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroupId</name></type> <name>recycleId</name> <init>= <expr><operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><name>recycleBinUUID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>recycleId</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isGroupSearchable</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>omitBackup</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>super</name><operator>.</operator><name>isGroupSearchable</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>, <argument><expr><name>omitBackup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>g</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>group</name></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name><name>g</name><operator>.</operator><name>isSearchEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>validatePasswordEncoding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>initNew</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dbPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>URLUtil</name><operator>.</operator><name>guessFileName</name></name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>rootGroup</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV4</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>dbNameFromPath</name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name><name>PwIconStandard</name><operator>.</operator><name>FOLDER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>groups</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>rootGroup</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rootGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>dbNameFromPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dbPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>URLUtil</name><operator>.</operator><name>guessFileName</name></name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="string">"KeePass Database"</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lastExtDot</name> <init>= <expr><call><name><name>filename</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>lastExtDot</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>filename</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>filename</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>lastExtDot</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<class><specifier>private</specifier> class <name>GroupHasCustomData</name> <super_list><extends>extends <super><name><name>GroupHandler</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

		<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCustomData</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>group</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>g4</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>group</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>g4</name><operator>.</operator><name>customData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>hasCustomData</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></function>
	}</block></class>

	<class><specifier>private</specifier> class <name>EntryHasCustomData</name> <super_list><extends>extends <super><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCustomData</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>e4</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator><name>entry</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>e4</name><operator>.</operator><name>customData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>hasCustomData</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></function>
	}</block></class>

	<function><type><specifier>public</specifier> <name>int</name></type> <name>getMinKdbxVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>AesKdf</name><operator>.</operator><name>CIPHER_UUID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>kdfParameters</name><operator>.</operator><name>kdfUUID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>publicCustomData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>EntryHasCustomData</name></type> <name>entryHandler</name> <init>= <expr><operator>new</operator> <call><name>EntryHasCustomData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GroupHasCustomData</name></type> <name>groupHandler</name> <init>= <expr><operator>new</operator> <call><name>GroupHasCustomData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>rootGroup</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_3</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>rootGroup</name><operator>.</operator><name>preOrderTraverseTree</name></name><argument_list>(<argument><expr><name>groupHandler</name></expr></argument>, <argument><expr><name>entryHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>groupHandler</name><operator>.</operator><name>hasCustomData</name></name> <operator>||</operator> <name><name>entryHandler</name><operator>.</operator><name>hasCustomData</name></name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_3</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>binPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabaseV4Debug.java" hash="9764566bfa778635bf6d2c0b7c925f4259fe40f3"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDatabaseV4Debug</name> <super_list><extends>extends <super><name>PwDatabaseV4</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>postHeader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDbHeaderV3</name></type> <name>dbHeader</name></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDatabaseV4XML.java" hash="682f238873cd9de5d8005f22eda4f4d2b6c0042a"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDatabaseV4XML</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDocNode</name> <init>= <expr><literal type="string">"KeePassFile"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemMeta</name> <init>= <expr><literal type="string">"Meta"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemRoot</name> <init>= <expr><literal type="string">"Root"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemGroup</name> <init>= <expr><literal type="string">"Group"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemEntry</name> <init>= <expr><literal type="string">"Entry"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemGenerator</name> <init>= <expr><literal type="string">"Generator"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemHeaderHash</name> <init>= <expr><literal type="string">"HeaderHash"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemSettingsChanged</name> <init>= <expr><literal type="string">"SettingsChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbName</name> <init>= <expr><literal type="string">"DatabaseName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbNameChanged</name> <init>= <expr><literal type="string">"DatabaseNameChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbDesc</name> <init>= <expr><literal type="string">"DatabaseDescription"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbDescChanged</name> <init>= <expr><literal type="string">"DatabaseDescriptionChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbDefaultUser</name> <init>= <expr><literal type="string">"DefaultUserName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbDefaultUserChanged</name> <init>= <expr><literal type="string">"DefaultUserNameChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbMntncHistoryDays</name> <init>= <expr><literal type="string">"MaintenanceHistoryDays"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbColor</name> <init>= <expr><literal type="string">"Color"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbKeyChanged</name> <init>= <expr><literal type="string">"MasterKeyChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbKeyChangeRec</name> <init>= <expr><literal type="string">"MasterKeyChangeRec"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbKeyChangeForce</name> <init>= <expr><literal type="string">"MasterKeyChangeForce"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDbKeyChangeForceOnce</name> <init>= <expr><literal type="string">"MasterKeyChangeForceOnce"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemRecycleBinEnabled</name> <init>= <expr><literal type="string">"RecycleBinEnabled"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemRecycleBinUuid</name> <init>= <expr><literal type="string">"RecycleBinUUID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemRecycleBinChanged</name> <init>= <expr><literal type="string">"RecycleBinChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemEntryTemplatesGroup</name> <init>= <expr><literal type="string">"EntryTemplatesGroup"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemEntryTemplatesGroupChanged</name> <init>= <expr><literal type="string">"EntryTemplatesGroupChanged"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemHistoryMaxItems</name> <init>= <expr><literal type="string">"HistoryMaxItems"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemHistoryMaxSize</name> <init>= <expr><literal type="string">"HistoryMaxSize"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLastSelectedGroup</name> <init>= <expr><literal type="string">"LastSelectedGroup"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLastTopVisibleGroup</name> <init>= <expr><literal type="string">"LastTopVisibleGroup"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemMemoryProt</name> <init>= <expr><literal type="string">"MemoryProtection"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtTitle</name> <init>= <expr><literal type="string">"ProtectTitle"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtUserName</name> <init>= <expr><literal type="string">"ProtectUserName"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtPassword</name> <init>= <expr><literal type="string">"ProtectPassword"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtURL</name> <init>= <expr><literal type="string">"ProtectURL"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtNotes</name> <init>= <expr><literal type="string">"ProtectNotes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemProtAutoHide</name> <init>= <expr><literal type="string">"AutoEnableVisualHiding"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomIcons</name> <init>= <expr><literal type="string">"CustomIcons"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomIconItem</name> <init>= <expr><literal type="string">"Icon"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomIconItemID</name> <init>= <expr><literal type="string">"UUID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomIconItemData</name> <init>= <expr><literal type="string">"Data"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemAutoType</name> <init>= <expr><literal type="string">"AutoType"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemHistory</name> <init>= <expr><literal type="string">"History"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemName</name> <init>= <expr><literal type="string">"Name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemNotes</name> <init>= <expr><literal type="string">"Notes"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemUuid</name> <init>= <expr><literal type="string">"UUID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemIcon</name> <init>= <expr><literal type="string">"IconID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomIconID</name> <init>= <expr><literal type="string">"CustomIconUUID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemFgColor</name> <init>= <expr><literal type="string">"ForegroundColor"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemBgColor</name> <init>= <expr><literal type="string">"BackgroundColor"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemOverrideUrl</name> <init>= <expr><literal type="string">"OverrideURL"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemTimes</name> <init>= <expr><literal type="string">"Times"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemTags</name> <init>= <expr><literal type="string">"Tags"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCreationTime</name> <init>= <expr><literal type="string">"CreationTime"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLastModTime</name> <init>= <expr><literal type="string">"LastModificationTime"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLastAccessTime</name> <init>= <expr><literal type="string">"LastAccessTime"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemExpiryTime</name> <init>= <expr><literal type="string">"ExpiryTime"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemExpires</name> <init>= <expr><literal type="string">"Expires"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemUsageCount</name> <init>= <expr><literal type="string">"UsageCount"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLocationChanged</name> <init>= <expr><literal type="string">"LocationChanged"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemGroupDefaultAutoTypeSeq</name> <init>= <expr><literal type="string">"DefaultAutoTypeSequence"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemEnableAutoType</name> <init>= <expr><literal type="string">"EnableAutoType"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemEnableSearching</name> <init>= <expr><literal type="string">"EnableSearching"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemString</name> <init>= <expr><literal type="string">"String"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemBinary</name> <init>= <expr><literal type="string">"Binary"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemKey</name> <init>= <expr><literal type="string">"Key"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemValue</name> <init>= <expr><literal type="string">"Value"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemAutoTypeEnabled</name> <init>= <expr><literal type="string">"Enabled"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemAutoTypeObfuscation</name> <init>= <expr><literal type="string">"DataTransferObfuscation"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemAutoTypeDefaultSeq</name> <init>= <expr><literal type="string">"DefaultSequence"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemAutoTypeItem</name> <init>= <expr><literal type="string">"Association"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemWindow</name> <init>= <expr><literal type="string">"Window"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemKeystrokeSequence</name> <init>= <expr><literal type="string">"KeystrokeSequence"</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemBinaries</name> <init>= <expr><literal type="string">"Binaries"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AttrId</name> <init>= <expr><literal type="string">"ID"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AttrRef</name> <init>= <expr><literal type="string">"Ref"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AttrProtected</name> <init>= <expr><literal type="string">"Protected"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>AttrCompressed</name> <init>= <expr><literal type="string">"Compressed"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemIsExpanded</name> <init>= <expr><literal type="string">"IsExpanded"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemLastTopVisibleEntry</name> <init>= <expr><literal type="string">"LastTopVisibleEntry"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDeletedObjects</name> <init>= <expr><literal type="string">"DeletedObjects"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDeletedObject</name> <init>= <expr><literal type="string">"DeletedObject"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemDeletionTime</name> <init>= <expr><literal type="string">"DeletionTime"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ValFalse</name> <init>= <expr><literal type="string">"False"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ValTrue</name> <init>= <expr><literal type="string">"True"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemCustomData</name> <init>= <expr><literal type="string">"CustomData"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ElemStringDictExItem</name> <init>= <expr><literal type="string">"Item"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>SimpleDateFormat</name></argument>&gt;</argument_list></name></type> <name>dateFormatter</name> <init>=
            <expr><operator>new</operator> <class><super><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>SimpleDateFormat</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>protected</specifier> <name>SimpleDateFormat</name></type> <name>initialValue</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>dateFormat</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>dateFormat</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd'T'HH:mm:ss'Z'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>dateFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>dateFormat</name></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDate.java" hash="88e599e4ef0bca070786af2e86f9aee7e464c5dc"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<comment type="block" format="javadoc">/** Converting from the C Date format to the Java data format is
 *  expensive when done for every record at once.  I use this class to
 *  allow lazy conversions between the formats.
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>PwDate</name> <super_list><implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DATE_SIZE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt> 
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>cDateBuilt</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>jDateBuilt</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>jDate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cDate</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwDate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>cDate</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>DATE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DATE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cDateBuilt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwDate</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>jDate</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>jDateBuilt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>jDate</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jDateBuilt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>private</specifier> <name>PwDate</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDate</name></type> <name>copy</name> <init>= <expr><operator>new</operator> <call><name>PwDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>cDateBuilt</name></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>newC</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>DATE_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>newC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DATE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>cDate</name></name> <operator>=</operator> <name>newC</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>cDateBuilt</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>jDateBuilt</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>jDate</name></name> <operator>=</operator> <operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>jDate</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>jDateBuilt</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
			
		<return>return <expr><name>copy</name></expr>;</return>
	</block_content>}</block></function>


	
	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getJDate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>jDateBuilt</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>jDate</name> <operator>=</operator> <call><name>readTime</name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getCalendar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>jDateBuilt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>jDate</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getCDate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>cDateBuilt</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>cDate</name> <operator>=</operator> <call><name>writeTime</name><argument_list>(<argument><expr><name>jDate</name></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getCalendar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cDateBuilt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>cDate</name></expr>;</return>
	</block_content>}</block></function>
	
	
	<comment type="block" format="javadoc">/**
	 * Unpack date from 5 byte format. The five bytes at 'offset' are unpacked
	 * to a java.util.Date instance.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>readTime</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>dw1</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>dw2</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>dw3</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>dw4</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>dw5</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Unpack 5 byte structure to date and time</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><operator>(</operator><name>dw1</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dw2</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dw2</name> <operator>&amp;</operator> <literal type="number">0x00000003</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dw3</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><operator>(</operator><name>dw3</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000001F</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dw3</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dw4</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><operator>(</operator><operator>(</operator><name>dw4</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>dw5</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><name>dw5</name> <operator>&amp;</operator> <literal type="number">0x0000003F</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>time</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="line">// File format is a 1 based month, java Calendar uses a zero based month</comment>
		<comment type="line">// File format is a 1 based day, java Calendar uses a 1 based day</comment>
		<expr_stmt><expr><call><name><name>time</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>time</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>

	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>writeTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>writeTime</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>writeTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>cal</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>date</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>cal</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cal</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>year</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// File format is a 1 based month, java Calendar uses a zero based month</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>month</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">// File format is a 0 based day, java Calendar uses a 1 based day</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>day</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>hour</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>minute</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>second</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>writeUByte</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>year</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000003F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>writeUByte</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>year</name> <operator>&amp;</operator> <literal type="number">0x0000003F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>month</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000003</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>month</name> <operator>&amp;</operator> <literal type="number">0x00000003</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>day</name> <operator>&amp;</operator> <literal type="number">0x0000001F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>hour</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>hour</name> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>minute</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000000F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>minute</name> <operator>&amp;</operator> <literal type="number">0x00000003</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>second</name> <operator>&amp;</operator> <literal type="number">0x0000003F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<return>return <expr><name>buf</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>this</name> <operator>==</operator> <name>o</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwDate</name></type> <name>date</name> <init>= <expr><operator>(</operator><name>PwDate</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>cDateBuilt</name> <operator>&amp;&amp;</operator> <name><name>date</name><operator>.</operator><name>cDateBuilt</name></name></expr> )</condition> <block>{<block_content>
			<return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>cDate</name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>cDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>jDateBuilt</name> <operator>&amp;&amp;</operator> <name><name>date</name><operator>.</operator><name>jDateBuilt</name></name></expr> )</condition> <block>{<block_content>
			<return>return <expr><call><name>IsSameDate</name><argument_list>(<argument><expr><name>jDate</name></expr></argument>, <argument><expr><name><name>date</name><operator>.</operator><name>jDate</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>cDateBuilt</name> <operator>&amp;&amp;</operator> <name><name>date</name><operator>.</operator><name>jDateBuilt</name></name></expr> )</condition> <block>{<block_content>
			<return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>date</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cDate</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><call><name>IsSameDate</name><argument_list>(<argument><expr><call><name><name>date</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>jDate</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>IsSameDate</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>d1</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>d2</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Calendar</name></type> <name>cal1</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cal1</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal1</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<decl_stmt><decl><type><name>Calendar</name></type> <name>cal2</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cal2</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal2</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
		<operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		<operator>(</operator><call><name><name>cal1</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal2</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDbHeader.java" hash="daf004aec1bcaa2bd049f5973fb6a67de449dc29"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwDbHeader</name> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PWM_DBSIG_1</name> <init>= <expr><literal type="number">0x9AA2D903</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** Seed that gets hashed with the userkey to form the final key */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type> <name><name>masterSeed</name><index>[]</index></name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** IV used for content encryption */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type> <name><name>encryptionIV</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDbHeaderFactory.java" hash="48473cc04a8e5370b355457c261407b422d7bd0d"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDbHeaderFactory</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwDbHeader</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>instanceof</operator> <name>PwDatabaseV3</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwDbHeaderV3</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>db</name> <operator>instanceof</operator> <name>PwDatabaseV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwDbHeaderV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Not implemented."</literal></expr></argument>)</argument_list></call></expr>;</throw>
			
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDbHeaderV3.java" hash="97d976e3b907496203a36b6d90a4eb672be504ef"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 *

Derived from

KeePass for J2ME


Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbHeaderV3</name> <super_list><extends>extends <super><name>PwDbHeader</name></super></extends></super_list> <block>{

	<comment type="line">// DB sig from KeePass 1.03</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DBSIG_2</name>               <init>= <expr><literal type="number">0xB54BFB65</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// DB sig from KeePass 1.03</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DBVER_DW</name>              <init>= <expr><literal type="number">0x00030003</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FLAG_SHA2</name>             <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FLAG_RIJNDAEL</name>         <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FLAG_ARCFOUR</name>          <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FLAG_TWOFISH</name>          <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** Size of byte buffer needed to hold this struct. */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUF_SIZE</name>        <init>= <expr><literal type="number">124</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** Used for the dwKeyEncRounds AES transformations */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type> <name><name>transformSeed</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>signature1</name></decl>;</decl_stmt>                  <comment type="line">// = PWM_DBSIG_1</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>signature2</name></decl>;</decl_stmt>                  <comment type="line">// = DBSIG_2</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>version</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** Number of groups in the database */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>numGroups</name></decl>;</decl_stmt>
	<comment type="block" format="javadoc">/** Number of entries in the database */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>numEntries</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** SHA-256 hash of the database, used for integrity check */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>byte</name></type>             <name><name>contentsHash</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>numKeyEncRounds</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * Parse given buf, as read from file.
	 * @param buf
	 * @throws IOException 
	 */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>loadFromFile</name><parameter_list>( <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>signature1</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>signature2</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>masterSeed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>encryptionIV</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>numGroups</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>numEntries</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">52</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><name>contentsHash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">88</literal></expr></argument>, <argument><expr><name>transformSeed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>numKeyEncRounds</name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <literal type="number">120</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>numKeyEncRounds</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// TODO: Really treat this like an unsigned integer</comment>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Does not support more than "</literal> <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>+</operator> <literal type="string">" rounds."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<constructor><specifier>public</specifier> <name>PwDbHeaderV3</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>masterSeed</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>matchesHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig2</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>sig1</name> <operator>==</operator> <name>PWM_DBSIG_1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>sig2</name> <operator>==</operator> <name>DBSIG_2</name><operator>)</operator></expr>;</return>
	</block_content>}</block></function>
	
	
	<comment type="block" format="javadoc">/** Determine if the database version is compatible with this application
	 * @return true, if it is compatible
	 */</comment>
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>matchesVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>compatibleHeaders</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>DBVER_DW</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>compatibleHeaders</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>one</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>two</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>one</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>two</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDbHeaderV4.java" hash="bcda4f9169eaeed00c5b4007202b7e82865c9916"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>AesKdf</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfParameters</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBVersionException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>CopyInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HmacBlockStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbHeaderV4</name> <super_list><extends>extends <super><name>PwDbHeader</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DBSIG_PRE2</name>            <init>= <expr><literal type="number">0xB54BFB66</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DBSIG_2</name>               <init>= <expr><literal type="number">0xB54BFB67</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_VERSION_CRITICAL_MASK</name> <init>= <expr><literal type="number">0xFFFF0000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_VERSION_32_3</name> <init>=           <expr><literal type="number">0x00030001</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_VERSION_32_4</name> <init>=           <expr><literal type="number">0x00040000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_VERSION_32</name> <init>=             <expr><name>FILE_VERSION_32_4</name></expr></init></decl>;</decl_stmt>

    <class><specifier>public</specifier> class <name>PwDbHeaderV4Fields</name> <block>{
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>EndOfHeader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Comment</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>CipherID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>CompressionFlags</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>MasterSeed</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TransformSeed</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>TransformRounds</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>EncryptionIV</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>InnerRandomstreamKey</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>StreamStartBytes</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>InnerRandomStreamID</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>KdfParameters</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>PublicCustomData</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    }</block></class>

	<class><specifier>public</specifier> class <name>PwDbInnerHeaderV4Fields</name> <block>{
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>EndOfHeader</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>InnerRandomStreamID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>InnerRandomstreamKey</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Binary</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	}</block></class>

	<class><specifier>public</specifier> class <name>KdbxBinaryFlags</name> <block>{
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>None</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name></type> <name>Protected</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	}</block></class>

	<class><specifier>public</specifier> class <name>HeaderAndHash</name> <block>{
		<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>header</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>HeaderAndHash</name> <parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
	}</block></class>
    
    <decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabaseV4</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>innerRandomStreamKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>streamStartBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name>CrsAlgorithm</name></type> <name>innerRandomStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>version</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PwDbHeaderV4</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    	<expr_stmt><expr><name>db</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>d</name><operator>.</operator><name>getMinKdbxVersion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>masterSeed</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

	<comment type="block" format="javadoc">/** Assumes the input stream is at the beginning of the .kdbx file
	 * @param is
	 * @throws IOException 
	 * @throws InvalidDBVersionException 
	 */</comment>
	<function><type><specifier>public</specifier> <name>HeaderAndHash</name></type> <name>loadFromFile</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBVersionException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No SHA-256 implementation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>headerBOS</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CopyInputStream</name></type> <name>cis</name> <init>= <expr><operator>new</operator> <call><name>CopyInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>headerBOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DigestInputStream</name></type> <name>dis</name> <init>= <expr><operator>new</operator> <call><name>DigestInputStream</name><argument_list>(<argument><expr><name>cis</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LEDataInputStream</name></type> <name>lis</name> <init>= <expr><operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>sig1</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sig2</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>matchesHeader</name><argument_list>(<argument><expr><name>sig1</name></expr></argument>, <argument><expr><name>sig2</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidDBVersionException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name><name>lis</name><operator>.</operator><name>readUInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>validVersion</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidDBVersionException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>( <expr><operator>!</operator> <name>done</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>readHeaderField</name><argument_list>(<argument><expr><name>lis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>new</operator> <call><name>HeaderAndHash</name><argument_list>(<argument><expr><call><name><name>headerBOS</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>readHeaderField</name><parameter_list>(<parameter><decl><type><name>LEDataInputStream</name></type> <name>dis</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>byte</name></type> <name>fieldID</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator> <call><name><name>dis</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>fieldSize</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>FILE_VERSION_32_4</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>fieldSize</name> <operator>=</operator> <call><name><name>dis</name><operator>.</operator><name>readUShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>fieldSize</name> <operator>=</operator> <call><name><name>dis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fieldData</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>fieldSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>fieldData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>fieldSize</name></expr>]</index></name></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>readSize</name> <init>= <expr><call><name><name>dis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>readSize</name> <operator>!=</operator> <name>fieldSize</name></expr> )</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Header ended early."</literal></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		
		<switch>switch <condition>( <expr><name>fieldID</name></expr> )</condition> <block>{<block_content>
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>EndOfHeader</name></name></expr>:</case>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>CipherID</name></name></expr>:</case>
				<expr_stmt><expr><call><name>setCipher</name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>CompressionFlags</name></name></expr>:</case>
				<expr_stmt><expr><call><name>setCompressionFlags</name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>MasterSeed</name></name></expr>:</case>
				<expr_stmt><expr><name>masterSeed</name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>TransformSeed</name></name></expr>:</case>
				<assert>assert<expr><operator>(</operator><name>version</name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name><operator>)</operator></expr>;</assert>
				<decl_stmt><decl><type><name>AesKdf</name></type> <name>kdfS</name> <init>= <expr><operator>new</operator> <call><name>AesKdf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>kdfUUID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>kdfS</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>db</name><operator>.</operator><name>kdfParameters</name></name> <operator>=</operator> <call><name><name>kdfS</name><operator>.</operator><name>getDefaultParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>setByteArray</name></name><argument_list>(<argument><expr><name><name>AesKdf</name><operator>.</operator><name>ParamSeed</name></name></expr></argument>, <argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>TransformRounds</name></name></expr>:</case>
				<assert>assert<expr><operator>(</operator><name>version</name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name><operator>)</operator></expr>;</assert>
				<decl_stmt><decl><type><name>AesKdf</name></type> <name>kdfR</name> <init>= <expr><operator>new</operator> <call><name>AesKdf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>kdfUUID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>kdfR</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>db</name><operator>.</operator><name>kdfParameters</name></name> <operator>=</operator> <call><name><name>kdfR</name><operator>.</operator><name>getDefaultParameters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<decl_stmt><decl><type><name>long</name></type> <name>rounds</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readLong</name></name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>setUInt64</name></name><argument_list>(<argument><expr><name><name>AesKdf</name><operator>.</operator><name>ParamRounds</name></name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>numKeyEncRounds</name></name> <operator>=</operator> <name>rounds</name></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>EncryptionIV</name></name></expr>:</case>
				<expr_stmt><expr><name>encryptionIV</name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>InnerRandomstreamKey</name></name></expr>:</case>
			    <assert>assert<expr><operator>(</operator><name>version</name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name><operator>)</operator></expr>;</assert>
				<expr_stmt><expr><name>innerRandomStreamKey</name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>StreamStartBytes</name></name></expr>:</case>
				<expr_stmt><expr><name>streamStartBytes</name> <operator>=</operator> <name>fieldData</name></expr>;</expr_stmt>
				<break>break;</break>
			
			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>InnerRandomStreamID</name></name></expr>:</case>
				<assert>assert<expr><operator>(</operator><name>version</name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name><operator>)</operator></expr>;</assert>
				<expr_stmt><expr><call><name>setRandomStreamID</name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>KdfParameters</name></name></expr>:</case>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>kdfParameters</name></name> <operator>=</operator> <call><name><name>KdfParameters</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>PublicCustomData</name></name></expr>:</case>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>publicCustomData</name></name> <operator>=</operator>  <call><name><name>KdfParameters</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><name>fieldData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid header type: "</literal> <operator>+</operator> <name>fieldID</name></expr></argument>)</argument_list></call></expr>;</throw>
			
		</block_content>}</block></switch>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setCipher</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>pbId</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>pbId</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid cipher ID."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name><name>db</name><operator>.</operator><name>dataCipher</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>pbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setCompressionFlags</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbFlags</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>pbFlags</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>pbFlags</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid compression flags."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>pbFlags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>flag</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>flag</name> <operator>&gt;=</operator> <name><name>PwCompressionAlgorithm</name><operator>.</operator><name>count</name></name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unrecognized compression flag."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name><name>db</name><operator>.</operator><name>compressionAlgorithm</name></name> <operator>=</operator> <call><name><name>PwCompressionAlgorithm</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setTransformRounds</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>rounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>rounds</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>rounds</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid rounds."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>rnd</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readLong</name></name><argument_list>(<argument><expr><name>rounds</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>rnd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rnd</name> <operator>&gt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> )</condition> <block>{<block_content>
			<comment type="line">//TODO: Actually support really large numbers</comment>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Rounds higher than "</literal> <operator>+</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>+</operator> <literal type="string">" are not currently supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name><name>db</name><operator>.</operator><name>numKeyEncRounds</name></name> <operator>=</operator> <name>rnd</name></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setRandomStreamID</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>streamID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>streamID</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>streamID</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid stream id."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>streamID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>id</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>id</name> <operator>&gt;=</operator> <name><name>CrsAlgorithm</name><operator>.</operator><name>count</name></name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid stream id."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>innerRandomStream</name> <operator>=</operator> <call><name><name>CrsAlgorithm</name><operator>.</operator><name>fromId</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** Determines if this is a supported version.
	 * 
	 *  A long is needed here to represent the unsigned int since we perform
	 *  arithmetic on it.
	 * @param version
	 * @return
	 */</comment>
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>validVersion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<return>return <expr><operator>!</operator> <operator>(</operator><operator>(</operator><name>version</name> <operator>&amp;</operator> <name>FILE_VERSION_CRITICAL_MASK</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>FILE_VERSION_32</name> <operator>&amp;</operator> <name>FILE_VERSION_CRITICAL_MASK</name><operator>)</operator><operator>)</operator></expr>;</return>
		
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>matchesHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig2</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>sig1</name> <operator>==</operator> <name>PWM_DBSIG_1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>sig2</name> <operator>==</operator> <name>DBSIG_PRE2</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>sig2</name> <operator>==</operator> <name>DBSIG_2</name><operator>)</operator> <operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>computeHeaderHmac</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws><block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerHmac</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blockKey</name> <init>= <expr><call><name><name>HmacBlockStream</name><operator>.</operator><name>GetHmacKey64</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ULONG_MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>signingKey</name> <init>= <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>blockKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>signingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No HmacAlogirthm"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid Hmac Key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<return>return <expr><call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getTransformSeed</name><parameter_list>()</parameter_list> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>version</name> <operator>&lt;</operator> <name>FILE_VERSION_32_4</name><operator>)</operator></expr>;</assert>

		<return>return <expr><call><name><name>db</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>getByteArray</name></name><argument_list>(<argument><expr><name><name>AesKdf</name><operator>.</operator><name>ParamSeed</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDefsV4.java" hash="4e51bbe08550151d7d766116952dbd3f2c1a0852"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDefsV4</name> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TITLE_FIELD</name> <init>= <expr><literal type="string">"Title"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>USERNAME_FIELD</name> <init>= <expr><literal type="string">"UserName"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PASSWORD_FIELD</name> <init>= <expr><literal type="string">"Password"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>URL_FIELD</name> <init>= <expr><literal type="string">"URL"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NOTES_FIELD</name> <init>= <expr><literal type="string">"Notes"</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwDeletedObject.java" hash="dcf7499097e7a2a214085a8c5c391dd77512ea89"><comment type="block">/*
 * Copyright 2010-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDeletedObject</name> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>deletionTime</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwDeletedObject</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwDeletedObject</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwDeletedObject</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>deletionTime</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getDeletionTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>deletionTime</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>deletionTime</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setDeletionTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>deletionTime</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>PwDeletedObject</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwDeletedObject</name></type> <name>rhs</name> <init>= <expr><operator>(</operator><name>PwDeletedObject</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwEncryptionAlgorithm.java" hash="e22b64888b9c0b0e46fc17b16aca56aa850002ea"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<enum><specifier>public</specifier> enum <name>PwEncryptionAlgorithm</name> <block>{
	
	<decl><name>Rjindal</name></decl>,
	<decl><name>Twofish</name></decl>;
}</block></enum>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwEntry.java" hash="6943e2a241b85a2492c1882f3128355b44bce942"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>iterator</name><operator>.</operator><name>EntrySearchStringIterator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>SprEngine</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwEntry</name> <super_list><implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{

	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PMS_TAN_ENTRY</name> <init>= <expr><literal type="string">"&lt;TAN&gt;"</literal></expr></init></decl>;</decl_stmt>
	
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>EntryNameComparator</name> <super_list><implements>implements <super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

		<function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>object1</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>object2</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><call><name><name>object1</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>object2</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></function>
		
	}</block></class>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwIconStandard</name></type> <name>icon</name> <init>= <expr><name><name>PwIconStandard</name><operator>.</operator><name>FIRST</name></name></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>PwEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwEntry</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>PwEntry</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwEntry</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initDates</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>instanceof</operator> <name>PwGroupV3</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwEntryV3</name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>parent</name> <operator>instanceof</operator> <name>PwGroupV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwEntryV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Unknown PwGroup instance."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntry</name></type> <name>newEntry</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>newEntry</name> <operator>=</operator> <operator>(</operator><name>PwEntry</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Clone should be supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>PwEntry</name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>deepStrings</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>PwEntry</name><operator>)</operator> <call><name>clone</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>icon</name></name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setUUID</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getTitle</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getUsername</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getPassword</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getUrl</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getUrl</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getNotes</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getNotes</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getUrl</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getNotes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Date</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Date</name></type> <name>getLastModificationTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Date</name></type> <name>getLastAccessTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Date</name></type> <name>getExpiryTime</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>expires</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwGroup</name></type> <name>getParent</name><parameter_list>()</parameter_list>;</function_decl>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setNotes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setCreationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>create</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>access</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setExpires</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>exp</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setExpiryTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>expires</name></decl></parameter>)</parameter_list>;</function_decl>
	
	
	<function><type><specifier>public</specifier> <name>PwIcon</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>icon</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTan</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>PMS_TAN_ENTRY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>getUsername</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>getDisplayTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><call><name>isTan</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name>PMS_TAN_ENTRY</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getUsername</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><call><name>getTitle</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>


	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMetaStream</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>EntrySearchStringIterator</name></type> <name>stringIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>EntrySearchStringIterator</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>modified</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>touchParents</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setLastAccessTime</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>modified</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setLastModificationTime</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>touchParents</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><name>modified</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>touchLocation</name><parameter_list>()</parameter_list> <block>{<block_content> </block_content>}</block></function>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSearchingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwEntryV3.java" hash="35796e4837e7067a782dc51850d944092395a680"><comment type="block">/*
 * Copyright 2010-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *

This file was derived from 

Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<comment type="line">// PhoneID</comment>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Structure containing information about one entry.
 * 
 * &lt;PRE&gt;
 * One entry: [FIELDTYPE(FT)][FIELDSIZE(FS)][FIELDDATA(FD)]
 *            [FT+FS+(FD)][FT+FS+(FD)][FT+FS+(FD)][FT+FS+(FD)][FT+FS+(FD)]...
 *            
 * [ 2 bytes] FIELDTYPE
 * [ 4 bytes] FIELDSIZE, size of FIELDDATA in bytes
 * [ n bytes] FIELDDATA, n = FIELDSIZE
 * 
 * Notes:
 *  - Strings are stored in UTF-8 encoded form and are null-terminated.
 *  - FIELDTYPE can be one of the FT_ constants.
 * &lt;/PRE&gt;
 *
 * @author Naomaru Itoi &lt;nao@phoneid.org&gt;
 * @author Bill Zwicky &lt;wrzwicky@pobox.com&gt;
 * @author Dominik Reichl &lt;dominik.reichl@t-online.de&gt;
 */</comment>
<class><specifier>public</specifier> class <name>PwEntryV3</name> <super_list><extends>extends <super><name>PwEntry</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>NEVER_EXPIRE</name> <init>= <expr><call><name>getNeverExpire</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>NEVER_EXPIRE_BUG</name> <init>= <expr><call><name>getNeverExpireBug</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>DEFAULT_DATE</name> <init>= <expr><call><name>getDefaultDate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PwDate</name></type> <name>PW_NEVER_EXPIRE</name> <init>= <expr><operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>NEVER_EXPIRE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PwDate</name></type> <name>PW_NEVER_EXPIRE_BUG</name> <init>= <expr><operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>NEVER_EXPIRE_BUG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PwDate</name></type> <name>DEFAULT_PWDATE</name> <init>= <expr><operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>DEFAULT_DATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	

	<comment type="block" format="javadoc">/** Size of byte buffer needed to hold this struct. */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PMS_ID_BINDESC</name> <init>= <expr><literal type="string">"bin-stream"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PMS_ID_TITLE</name>   <init>= <expr><literal type="string">"Meta-Info"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PMS_ID_USER</name>    <init>= <expr><literal type="string">"SYSTEM"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PMS_ID_URL</name>     <init>= <expr><literal type="string">"$"</literal></expr></init></decl>;</decl_stmt>



	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type>              <name>groupId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> 	<name>String</name></type> 			<name>username</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type>          <name>password</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type>          <name>uuid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>url</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>additional</name></decl>;</decl_stmt>


	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type>             <name>tCreation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type>             <name>tLastMod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type>             <name>tLastAccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type>             <name>tExpire</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** A string describing what is in pBinaryData */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type>           <name>binaryDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type>          <name>binaryData</name></decl>;</decl_stmt>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>Date</name></type> <name>getDefaultDate</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">2004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>JANUARY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>Date</name></type> <name>getNeverExpire</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">2999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** This date was was accidentally being written
	 *  out when an entry was supposed to be marked as
	 *  expired. We'll use this to silently correct those
	 *  entries.
	 * @return
	 */</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>Date</name></type> <name>getNeverExpireBug</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><literal type="number">2999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>IsNever</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>PwDate</name><operator>.</operator><name>IsSameDate</name></name><argument_list>(<argument><expr><name>NEVER_EXPIRE</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<comment type="line">// for tree traversing</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwGroupV3</name></type> <name>parent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>


	<constructor><specifier>public</specifier> <name>PwEntryV3</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block">/*
	public PwEntryV3(PwEntryV3 source) {
		assign(source);
	}
	*/</comment>
	
	<constructor><specifier>public</specifier> <name>PwEntryV3</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PwEntryV3</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initDates</name></decl></parameter>)</parameter_list> <block>{<block_content>

		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>groupId</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PwGroupIdV3</name><operator>)</operator><call><name><name>parent</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>initId</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>uuid</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>initDates</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>NEVER_EXPIRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></constructor>
	
	<comment type="block" format="javadoc">/**
	 * @return the actual password byte array.
	 */</comment>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>password</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getPasswordBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>password</name></expr>;</return>
	</block_content>}</block></function>


	<comment type="block" format="javadoc">/**
	 * fill byte array
	 */</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>byte</name></type> <name>value</name></decl></parameter>)</parameter_list>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></for>
		<return>return;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/** Securely erase old password before copying new. */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>password</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fill</name><argument_list>( <argument><expr><name>password</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>password</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>



	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name><name>pass</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>password</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<assert>assert <expr><literal type="boolean">false</literal></expr>;</assert>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name><name>pass</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setPassword</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>password</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * @return the actual binaryData byte array.
	 */</comment>
	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getBinaryData</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>binaryData</name></expr>;</return>
	</block_content>}</block></function>



	<comment type="block" format="javadoc">/** Securely erase old data before copying new. */</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setBinaryData</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<if_stmt><if>if<condition>( <expr><name>binaryData</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fill</name><argument_list>( <argument><expr><name>binaryData</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>binaryData</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>binaryData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>binaryData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<comment type="line">// Determine if this is a MetaStream entry</comment>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isMetaStream</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>binaryData</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><name>additional</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>additional</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>binaryDesc</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>PMS_ID_BINDESC</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><name>title</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>title</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>PMS_ID_TITLE</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><name>username</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>username</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>PMS_ID_USER</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>url</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>PMS_ID_URL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name><name>icon</name><operator>.</operator><name>isMetaStreamIcon</name></name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>source</name> <operator>instanceof</operator> <name>PwEntryV3</name><operator>)</operator></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"DB version mix"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>PwEntryV3</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>title</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>url</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>groupId</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>username</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>username</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>additional</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>additional</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>uuid</name></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>passLen</name> <init>= <expr><name><name>source</name><operator>.</operator><name>password</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>password</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>passLen</name></expr>]</index></name></expr>;</expr_stmt> 
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>source</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>passLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>source</name><operator>.</operator><name>tCreation</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>source</name><operator>.</operator><name>tLastMod</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>source</name><operator>.</operator><name>tLastAccess</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>source</name><operator>.</operator><name>tExpire</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>binaryDesc</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>binaryDesc</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><name><name>source</name><operator>.</operator><name>binaryData</name></name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>descLen</name> <init>= <expr><name><name>source</name><operator>.</operator><name>binaryData</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>binaryData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>descLen</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>source</name><operator>.</operator><name>binaryData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>binaryData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>descLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>

	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>newEntry</name> <init>= <expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>password</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>passLen</name> <init>= <expr><name><name>password</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>passLen</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newEntry</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>passLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>tCreation</name></name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>tCreation</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>tLastMod</name></name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>tLastMod</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>tLastAccess</name></name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>tLastAccess</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>tExpire</name></name> <operator>=</operator> <operator>(</operator><name>PwDate</name><operator>)</operator> <call><name><name>tExpire</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>binaryDesc</name></name> <operator>=</operator> <name>binaryDesc</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><name>binaryData</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>descLen</name> <init>= <expr><name><name>binaryData</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>binaryData</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>descLen</name></expr>]</index></name></expr>;</expr_stmt> 
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>binaryData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>newEntry</name><operator>.</operator><name>binaryData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>descLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>newEntry</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastAccessTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>tLastAccess</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>tCreation</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getExpiryTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>tExpire</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastModificationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>tLastMod</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setCreationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>create</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>access</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setExpires</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>expires</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>expires</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <name>PW_NEVER_EXPIRE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setExpiryTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>expires</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupV3</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parent</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUUID</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>username</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>username</name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>title</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getNotes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>additional</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setNotes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>additional</name> <operator>=</operator> <name>notes</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getUrl</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>url</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>url</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>expires</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>!</operator> <call><name>IsNever</name><argument_list>(<argument><expr><call><name><name>tExpire</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>populateBlankFields</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>username</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>password</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>title</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>url</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>additional</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>additional</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tCreation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <name>DEFAULT_PWDATE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tLastMod</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <name>DEFAULT_PWDATE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tLastAccess</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <name>DEFAULT_PWDATE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tExpire</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <name>PW_NEVER_EXPIRE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>binaryDesc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>binaryDesc</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>binaryData</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>binaryData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>(</operator><name>PwGroupV3</name><operator>)</operator> <name>parent</name></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwEntryV4.java" hash="f9a998a8376f0d3b8cd99cad70faf2cd12980870"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>SprEngine</name></name>;</import>

<class><specifier>public</specifier> class <name>PwEntryV4</name> <super_list><extends>extends <super><name>PwEntry</name></super></extends> <implements>implements <super><name>ITimeLogger</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_TITLE</name> <init>= <expr><literal type="string">"Title"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_USERNAME</name> <init>= <expr><literal type="string">"UserName"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_PASSWORD</name> <init>= <expr><literal type="string">"Password"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_URL</name> <init>= <expr><literal type="string">"URL"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_NOTES</name> <init>= <expr><literal type="string">"Notes"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwGroupV4</name></type> <name>parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>uuid</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>strings</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>binaries</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwIconCustom</name></type> <name>customIcon</name> <init>= <expr><name><name>PwIconCustom</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>foregroundColor</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>backgroupColor</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>overrideURL</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>AutoType</name></type> <name>autoType</name> <init>= <expr><operator>new</operator> <call><name>AutoType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name></type> <name>history</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>parentGroupLastMod</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>creation</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>lastMod</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>lastAccess</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>expireDate</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>expires</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>usageCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>url</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>additional</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>tags</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>customData</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<class><specifier>public</specifier> class <name>AutoType</name> <super_list><implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>OBF_OPT_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>enabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>long</name></type> <name>obfuscationOptions</name> <init>= <expr><name>OBF_OPT_NONE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>defaultSequence</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><specifier>private</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>windowSeqPairs</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
		<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>AutoType</name></type> <name>auto</name></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>auto</name> <operator>=</operator> <operator>(</operator><name>AutoType</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> 
			<catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
				<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
			
			<expr_stmt><expr><name><name>auto</name><operator>.</operator><name>windowSeqPairs</name></name> <operator>=</operator> <operator>(</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>windowSeqPairs</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<return>return <expr><name>auto</name></expr>;</return>
			
		</block_content>}</block></function>
		
		<function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>windowSeqPairs</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
		
		<function><type><specifier>public</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{<block_content>
			<return>return <expr><call><name><name>windowSeqPairs</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></function>

	}</block></class>
	
	<constructor><specifier>public</specifier> <name>PwEntryV4</name><parameter_list>()</parameter_list> <block>{<block_content>

	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwEntryV4</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwEntryV4</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>initDates</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>initId</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>initDates</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>creation</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastAccess</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastMod</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>expires</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
	<annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwEntry</name></type> <name>clone</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>deepStrings</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>(<argument><expr><name>deepStrings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>deepStrings</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>strings</name></name> <operator>=</operator> <operator>(</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>strings</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>entry</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
	<type><specifier>public</specifier> <name>PwEntryV4</name></type> <name>cloneDeep</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <call><name>clone</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>binaries</name></name> <operator>=</operator> <operator>(</operator><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>binaries</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>history</name></name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>history</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>.</operator><name>autoType</name></name> <operator>=</operator> <operator>(</operator><name>AutoType</name><operator>)</operator> <call><name><name>autoType</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>entry</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>source</name> <operator>instanceof</operator> <name>PwEntryV4</name><operator>)</operator></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"DB version mix."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>src</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>source</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>assign</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>uuid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>strings</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>strings</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>binaries</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>binaries</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>customIcon</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>customIcon</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>foregroundColor</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>foregroundColor</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>backgroupColor</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>backgroupColor</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>overrideURL</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>overrideURL</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>autoType</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>autoType</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>history</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>history</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>parentGroupLastMod</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>parentGroupLastMod</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>creation</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>creation</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastMod</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>lastMod</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lastAccess</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>lastAccess</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expireDate</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>expireDate</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>expires</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>expires</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>usageCount</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>url</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>url</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>additional</name> <operator>=</operator> <name><name>source</name><operator>.</operator><name>additional</name></name></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>newEntry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><name>newEntry</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>decodeRefKey</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>decodeRef</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>decodeRef</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>text</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>String</name></type> <name>decodeRef</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>text</name></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>SprEngine</name></type> <name>spr</name> <init>= <expr><call><name><name>SprEngine</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>spr</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getUsername</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>decodeRefKey</name><argument_list>(<argument><expr><name>decodeRef</name></expr></argument>, <argument><expr><name>STR_USERNAME</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getTitle</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>decodeRefKey</name><argument_list>(<argument><expr><name>decodeRef</name></expr></argument>, <argument><expr><name>STR_TITLE</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getPassword</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>decodeRefKey</name><argument_list>(<argument><expr><name>decodeRef</name></expr></argument>, <argument><expr><name>STR_PASSWORD</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastAccessTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>lastAccess</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>creation</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getExpiryTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>expireDate</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastModificationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>lastMod</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectTitle</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setString</name><argument_list>(<argument><expr><name>STR_TITLE</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUsername</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUserName</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setString</name><argument_list>(<argument><expr><name>STR_USERNAME</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectPassword</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setString</name><argument_list>(<argument><expr><name>STR_PASSWORD</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUrl</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUrl</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setString</name><argument_list>(<argument><expr><name>STR_URL</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setNotes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>notes</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>db</name> <init>= <expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectNotes</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setString</name><argument_list>(<argument><expr><name>STR_NOTES</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>, <argument><expr><name>protect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setCreationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>creation</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExpiryTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>expireDate</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>lastAccess</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>lastMod</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupV4</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parent</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>UUID</name></type> <name>getUUID</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>uuid</name></expr>;</return>
	</block_content>}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setUUID</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ProtectedString</name></type> <name>value</name> <init>= <expr><call><name><name>strings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		
		<return>return <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>protect</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ProtectedString</name></type> <name>ps</name> <init>= <expr><operator>new</operator> <call><name>ProtectedString</name><argument_list>(<argument><expr><name>protect</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getLocationChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parentGroupLastMod</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>long</name></type> <name>getUsageCount</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>usageCount</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setLocationChanged</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parentGroupLastMod</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setUsageCount</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>expires</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>expires</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExpires</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>expires</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getNotes</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>decodeRefKey</name><argument_list>(<argument><expr><name>decodeRef</name></expr></argument>, <argument><expr><name>STR_NOTES</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getUrl</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>decodeRef</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>decodeRefKey</name><argument_list>(<argument><expr><name>decodeRef</name></expr></argument>, <argument><expr><name>STR_URL</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwIcon</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>customIcon</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>customIcon</name><operator>.</operator><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name><name>super</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>customIcon</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>IsStandardString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STR_TITLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STR_USERNAME</name></expr></argument>)</argument_list></call> 
		  <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STR_PASSWORD</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STR_URL</name></expr></argument>)</argument_list></call>
		  <operator>||</operator> <call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>STR_NOTES</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>createBackup</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>copy</name> <init>= <expr><call><name>cloneDeep</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>copy</name><operator>.</operator><name>history</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>maintainBackups</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>maintainBackups</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>boolean</name></type> <name>deleted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>maxItems</name> <init>= <expr><name><name>db</name><operator>.</operator><name>historyMaxItems</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>maxItems</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<while>while <condition>(<expr><call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxItems</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>removeOldestBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>maxSize</name> <init>= <expr><name><name>db</name><operator>.</operator><name>historyMaxSize</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>maxSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>long</name></type> <name>histSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>PwEntryV4</name></type> <name>entry</name> <range>: <expr><name>history</name></expr></range></decl></init>)</control> <block>{<block_content>
					<expr_stmt><expr><name>histSize</name> <operator>+=</operator> <call><name><name>entry</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				
				<if_stmt><if>if <condition>(<expr><name>histSize</name> <operator>&gt;</operator> <name>maxSize</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>removeOldestBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>deleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>deleted</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>removeOldestBackup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Date</name></type> <name>min</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>history</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Date</name></type> <name>lastMod</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getLastModificationTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>min</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name><name>lastMod</name><operator>.</operator><name>before</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>min</name> <operator>=</operator> <name>lastMod</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>history</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>FIXED_LENGTH_SIZE</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Approximate fixed length size</comment>
	<function><type><specifier>public</specifier> <name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><name>FIXED_LENGTH_SIZE</name></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>binaries</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>autoType</name><operator>.</operator><name>defaultSequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>autoType</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<for>for <control>(<init><decl><type><name>PwEntryV4</name></type> <name>entry</name> <range>: <expr><name>history</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>entry</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>overrideURL</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>tags</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>size</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>modified</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>touchParents</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><name>modified</name></expr></argument>, <argument><expr><name>touchParents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><operator>++</operator><name>usageCount</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>touchLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parentGroupLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>parent</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSearchingEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name><name>parent</name><operator>.</operator><name>isSearchEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name><name>PwGroupV4</name><operator>.</operator><name>DEFAULT_SEARCHING_ENABLED</name></name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroup.java" hash="bd7fcfabfa9163cd627c8e97e705796af1e839fe"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>StrUtil</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwGroup</name> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>childGroups</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>childEntries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwIconStandard</name></type> <name>icon</name></decl>;</decl_stmt>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwGroup</name></type> <name>getParent</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwGroupId</name></type> <name>getId</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>PwGroupId</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>Date</name></type> <name>getLastMod</name><parameter_list>()</parameter_list>;</function_decl>
	
	<function><type><specifier>public</specifier> <name>PwIcon</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>icon</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>sortGroupsByName</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>childGroups</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>GroupNameComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>GroupNameComparator</name> <super_list><implements>implements <super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{

		<function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>object1</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>object2</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><call><name><name>object1</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareToIgnoreCase</name><argument_list>(<argument><expr><call><name><name>object2</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></function>
		
	}</block></class>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>sortEntriesByName</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>childEntries</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>PwEntry</name><operator>.</operator><name>EntryNameComparator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>initNewGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nm</name></decl></parameter>, <parameter><decl><type><name>PwGroupId</name></type> <name>newId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><name>newId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name>nm</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isContainedIn</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>container</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>cur</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>cur</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>container</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name><name>cur</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>touch</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>modified</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>touchParents</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>setLastAccessTime</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>modified</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setLastModificationTime</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>touchParents</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><name>modified</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>searchEntries</name><parameter_list>(<parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>  <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>listStorage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>terms</name> <init>= <expr><call><name><name>StrUtil</name><operator>.</operator><name>splitSearchTerms</name></name><argument_list>(<argument><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>sp</name><operator>.</operator><name>regularExpression</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>searchEntriesSingle</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Search longest term first</comment>
		<decl_stmt><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringLengthComparator</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
	
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<return>return <expr><call><name><name>lhs</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>rhs</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
			</block_content>}</block></function>
			
		}</block></class></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>stringLengthComparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>fullSearch</name> <init>= <expr><name><name>sp</name><operator>.</operator><name>searchString</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>pg</name> <init>= <expr><name><name>this</name><operator>.</operator><name>childEntries</name></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>terms</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>pgNew</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name> <operator>=</operator> <call><name><name>terms</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>boolean</name></type> <name>negate</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>sp</name><operator>.</operator><name>searchString</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name> <operator>=</operator> <call><name><name>sp</name><operator>.</operator><name>searchString</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>negate</name> <operator>=</operator> <call><name><name>sp</name><operator>.</operator><name>searchString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>searchEntriesSingle</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>pgNew</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pg</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>complement</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition> <block>{<block_content>
				<for>for <control>(<init><decl><type><name>PwEntry</name></type> <name>entry</name><range>: <expr><name>pg</name></expr></range></decl></init>)</control> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>pgNew</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name><name>complement</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				
				<expr_stmt><expr><name>pg</name> <operator>=</operator> <name>complement</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>pg</name> <operator>=</operator> <name>pgNew</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		
		<if_stmt><if>if <condition>(<expr><name>pg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>listStorage</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name> <operator>=</operator> <name>fullSearch</name></expr>;</expr_stmt>

	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>searchEntriesSingle</name><parameter_list>(<parameter><decl><type><name>SearchParameters</name></type> <name>spIn</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>listStorage</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SearchParameters</name></type> <name>sp</name> <init>= <expr><operator>(</operator><name>SearchParameters</name><operator>)</operator> <call><name><name>spIn</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>eh</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>sp</name><operator>.</operator><name>searchString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>eh</name> <operator>=</operator> <operator>new</operator> <call><name>EntrySearchHandlerAll</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>eh</name> <operator>=</operator> <call><name><name>EntrySearchHandler</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>listStorage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>preOrderTraverseTree</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>eh</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>preOrderTraverseTree</name><parameter_list>(<parameter><decl><type><name><name>GroupHandler</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groupHandler</name></decl></parameter>, <parameter><decl><type><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>entryHandler</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>entryHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>PwEntry</name></type> <name>entry</name> <range>: <expr><name>childEntries</name></expr></range></decl></init>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entryHandler</name><operator>.</operator><name>operate</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
				
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	
		<for>for <control>(<init><decl><type><name>PwGroup</name></type> <name>group</name> <range>: <expr><name>childGroups</name></expr></range></decl></init>)</control> <block>{<block_content>
			
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>groupHandler</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>groupHandler</name><operator>.</operator><name>operate</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
			
			<expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>preOrderTraverseTree</name></name><argument_list>(<argument><expr><name>groupHandler</name></expr></argument>, <argument><expr><name>entryHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroupId.java" hash="3894a4145a915cbe23bf8978b317966797f18fc8"><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwGroupId</name> <block>{

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroupIdV3.java" hash="d0d3b01aa6c66077d6b20e4cd0bdc14abd54db9b"><comment type="block">/*
 * Copyright 2010-2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwGroupIdV3</name> <super_list><extends>extends <super><name>PwGroupId</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwGroupIdV3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>compare</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>compare</name> <operator>instanceof</operator> <name>PwGroupIdV3</name><operator>)</operator></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroupIdV3</name></type> <name>cmp</name> <init>= <expr><operator>(</operator><name>PwGroupIdV3</name><operator>)</operator> <name>compare</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>id</name> <operator>==</operator> <name><name>cmp</name><operator>.</operator><name>id</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Integer</name></type> <name>i</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>i</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>id</name></expr>;</return>
	</block_content>}</block></function>
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroupIdV4.java" hash="526cebb9f25889ae5ee06fd30e2be5e4bebf01dd"><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>PwGroupIdV4</name> <super_list><extends>extends <super><name>PwGroupId</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwGroupIdV4</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>(</operator><name>id</name> <operator>instanceof</operator> <name>PwGroupIdV4</name><operator>)</operator></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>PwGroupIdV4</name></type> <name>v4</name> <init>= <expr><operator>(</operator><name>PwGroupIdV4</name><operator>)</operator> <name>id</name></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>v4</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>uuid</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>UUID</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>uuid</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroupV3.java" hash="efbcdb762054115549d3fc5ff0ad0ad7a7116e9d"><comment type="block">/*
 * Copyright 2009 Brian Pellin.

This file was derived from

Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
*/</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>acl</name><operator>.</operator><name>LastOwnerException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>



<comment type="block" format="javadoc">/**
 * @author Brian Pellin &lt;bpellin@gmail.com&gt;
 * @author Naomaru Itoi &lt;nao@phoneid.org&gt;
 * @author Bill Zwicky &lt;wrzwicky@pobox.com&gt;
 * @author Dominik Reichl &lt;dominik.reichl@t-online.de&gt;
 */</comment>
<class><specifier>public</specifier> class <name>PwGroupV3</name> <super_list><extends>extends <super><name>PwGroup</name></super></extends></super_list> <block>{
  <constructor><specifier>public</specifier> <name>PwGroupV3</name><parameter_list>()</parameter_list> <block>{<block_content>
  </block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>name</name></expr>;</return>
	</block_content>}</block></function>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Date</name></type> <name>NEVER_EXPIRE</name> <init>= <expr><name><name>PwEntryV3</name><operator>.</operator><name>NEVER_EXPIRE</name></name></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** Size of byte buffer needed to hold this struct. */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BUF_SIZE</name> <init>= <expr><literal type="number">124</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// for tree traversing</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwGroupV3</name></type> <name>parent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>groupId</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type> <name>tCreation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type> <name>tLastMod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type> <name>tLastAccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDate</name></type> <name>tExpire</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>level</name></decl>;</decl_stmt> <comment type="line">// short</comment>

	<comment type="block" format="javadoc">/** Used by KeePass internally, don't use */</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setGroups</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>childGroups</name> <operator>=</operator> <name>groups</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroup</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parent</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupId</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV3</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>PwGroupId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupIdV3</name></type> <name>id3</name> <init>= <expr><operator>(</operator><name>PwGroupIdV3</name><operator>)</operator> <name>id</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>groupId</name> <operator>=</operator> <call><name><name>id3</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>name</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastMod</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>tLastMod</name><operator>.</operator><name>getJDate</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>prt</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>PwGroupV3</name><operator>)</operator> <name>prt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>parent</name><operator>.</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>initNewGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nm</name></decl></parameter>, <parameter><decl><type><name>PwGroupId</name></type> <name>newId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initNewGroup</name></name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>newId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Date</name></type> <name>now</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name><name>PwGroupV3</name><operator>.</operator><name>NEVER_EXPIRE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>populateBlankFields</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tCreation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tCreation</name> <operator>=</operator> <name><name>PwEntryV3</name><operator>.</operator><name>DEFAULT_PWDATE</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tLastMod</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <name><name>PwEntryV3</name><operator>.</operator><name>DEFAULT_PWDATE</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tLastAccess</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <name><name>PwEntryV3</name><operator>.</operator><name>DEFAULT_PWDATE</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tExpire</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>tExpire</name> <operator>=</operator> <name><name>PwEntryV3</name><operator>.</operator><name>DEFAULT_PWDATE</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tLastAccess</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>tLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwGroupV4.java" hash="0981705eeb52ed2185322fec9ad8e2921d0d1e28"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>PwGroupV4</name> <super_list><extends>extends <super><name>PwGroup</name></super></extends> <implements>implements <super><name>ITimeLogger</name></super></implements></super_list> <block>{

	<comment type="line">//public static final int FOLDER_ICON = 48;</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_SEARCHING_ENABLED</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwGroupV4</name></type> <name>parent</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>uuid</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>notes</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwIconCustom</name></type> <name>customIcon</name> <init>= <expr><name><name>PwIconCustom</name><operator>.</operator><name>ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>isExpanded</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>defaultAutoTypeSequence</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>Boolean</name></type> <name>enableAutoType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>Boolean</name></type> <name>enableSearching</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>UUID</name></type> <name>lastTopVisibleEntry</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>parentGroupLastMod</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>creation</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>lastMod</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>lastAccess</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>expireDate</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>DEFAULT_NOW</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>expires</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>usageCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>customData</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>PwGroupV4</name><parameter_list>()</parameter_list> <block>{<block_content>
		
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>PwGroupV4</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>createUUID</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>setTimes</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>PwIconStandard</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>createUUID</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>setTimes</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>creation</name> <operator>=</operator> <name>lastMod</name> <operator>=</operator> <name>lastAccess</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>AddGroup</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>subGroup</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>takeOwnership</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>AddGroup</name><argument_list>(<argument><expr><name>subGroup</name></expr></argument>, <argument><expr><name>takeOwnership</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>AddGroup</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>subGroup</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>takeOwnership</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateLocationChanged</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>subGroup</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"subGroup"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>childGroups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>takeOwnership</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>subGroup</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>updateLocationChanged</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>subGroup</name><operator>.</operator><name>parentGroupLastMod</name></name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>AddEntry</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>takeOwnership</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>AddEntry</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>takeOwnership</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>AddEntry</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>takeOwnership</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateLocationChanged</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>pe</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>childEntries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>takeOwnership</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pe</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>updateLocationChanged</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pe</name><operator>.</operator><name>setLocationChanged</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroup</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parent</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>buildChildGroupsRecursive</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <call><name><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>buildChildGroupsRecursive</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></for>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>buildChildEntriesRecursive</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childEntries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>childEntries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <call><name><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>buildChildEntriesRecursive</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwGroupId</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwGroupIdV4</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>PwGroupId</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupIdV4</name></type> <name>id4</name> <init>= <expr><operator>(</operator><name>PwGroupIdV4</name><operator>)</operator> <name>id</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>id4</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>name</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Date</name></type> <name>getLastMod</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parentGroupLastMod</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getCreationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>creation</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getExpiryTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>expireDate</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getLastAccessTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>lastAccess</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getLastModificationTime</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>lastMod</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Date</name></type> <name>getLocationChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>parentGroupLastMod</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>long</name></type> <name>getUsageCount</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>usageCount</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setCreationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>creation</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExpiryTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>expireDate</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastAccessTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>lastAccess</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setLastModificationTime</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>lastMod</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setLocationChanged</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parentGroupLastMod</name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setUsageCount</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>usageCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>expires</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>expires</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>setExpires</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>expires</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setParent</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>prt</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>prt</name></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwIcon</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>customIcon</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>customIcon</name><operator>.</operator><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name><name>super</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>customIcon</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>initNewGroup</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nm</name></decl></parameter>, <parameter><decl><type><name>PwGroupId</name></type> <name>newId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>initNewGroup</name></name><argument_list>(<argument><expr><name>nm</name></expr></argument>, <argument><expr><name>newId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>lastAccess</name> <operator>=</operator> <name>lastMod</name> <operator>=</operator> <name>creation</name> <operator>=</operator> <name>parentGroupLastMod</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSearchEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>group</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Boolean</name></type> <name>search</name> <init>= <expr><name><name>group</name><operator>.</operator><name>enableSearching</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>search</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>search</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name>group</name> <operator>=</operator> <name><name>group</name><operator>.</operator><name>parent</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<comment type="line">// If we get to the root group and its null, default to true</comment>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwIcon.java" hash="007dfe5d44a959403085e4a36a92ae52c1322fc5"><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwIcon</name> <block>{
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMetaStreamIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>writeBytes</name><parameter_list>()</parameter_list> <block>{<block_content>
	</block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwIconCustom.java" hash="42c75a3a33f4047f77b218a6c3841324545cbf85"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>PwIconCustom</name> <super_list><extends>extends <super><name>PwIcon</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>PwIconCustom</name></type> <name>ZERO</name> <init>= <expr><operator>new</operator> <call><name>PwIconCustom</name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>UUID</name></type> <name>uuid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>imageData</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwIconCustom</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>uuid</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>imageData</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>uuid</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>uuid</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>PwIconCustom</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>PwIconCustom</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>uuid</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwIconFactory.java" hash="e121bb892ff9272a3c08c7f09b53233c8ae0b75f"><comment type="block">/*
 * Copyright 2010-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>AbstractReferenceMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>ReferenceMap</name></name>;</import>

<class><specifier>public</specifier> class <name>PwIconFactory</name> <block>{
	<comment type="block" format="javadoc">/** customIconMap
	 *  Cache for icon drawable. 
	 *  Keys: Integer, Values: PwIconStandard
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ReferenceMap</name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name>ReferenceMap</name><argument_list>(<argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>HARD</name></name></expr></argument>, <argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>WEAK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** standardIconMap
	 *  Cache for icon drawable. 
	 *  Keys: UUID, Values: PwIconCustom
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ReferenceMap</name></type> <name>customCache</name> <init>= <expr><operator>new</operator> <call><name>ReferenceMap</name><argument_list>(<argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>HARD</name></name></expr></argument>, <argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>WEAK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <name>PwIconStandard</name></type> <name>getIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwIconStandard</name></type> <name>icon</name> <init>= <expr><operator>(</operator><name>PwIconStandard</name><operator>)</operator> <call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>iconId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>iconId</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>PwIconStandard</name><operator>.</operator><name>FIRST</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>new</operator> <call><name>PwIconStandard</name><argument_list>(<argument><expr><name>iconId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>iconId</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>icon</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>PwIconCustom</name></type> <name>getIcon</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>iconUuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwIconCustom</name></type> <name>icon</name> <init>= <expr><operator>(</operator><name>PwIconCustom</name><operator>)</operator> <call><name><name>customCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>new</operator> <call><name>PwIconCustom</name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>customCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>icon</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>PwIconCustom</name></type> <name>getIcon</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>iconUuid</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwIconCustom</name></type> <name>icon</name> <init>= <expr><operator>(</operator><name>PwIconCustom</name><operator>)</operator> <call><name><name>customCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>new</operator> <call><name>PwIconCustom</name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>customCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>icon</name><operator>.</operator><name>imageData</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><name>icon</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setIconData</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>iconUuid</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>getIcon</name><argument_list>(<argument><expr><name>iconUuid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>PwIconCustom</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>customCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>uuid</name></name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/PwIconStandard.java" hash="7fbde71046cb86b38c832b2d951398ea1af29510"><comment type="block">/*
 * Copyright 2010-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>PwIconStandard</name> <super_list><extends>extends <super><name>PwIcon</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>iconId</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>PwIconStandard</name></type> <name>FIRST</name> <init>= <expr><operator>new</operator> <call><name>PwIconStandard</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRASH_BIN</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FOLDER</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwIconStandard</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconId</name></name> <operator>=</operator> <name>iconId</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>isMetaStreamIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>iconId</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <name>iconId</name></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>PwIconStandard</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>PwIconStandard</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>iconId</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>iconId</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/SearchParameters.java" hash="5550f8e35905edbaa03dc58259ed689c41c6f408"><comment type="block">/*
 * Copyright 2013-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<comment type="block" format="javadoc">/**
 * @author bpellin
 * Parameters for searching strings in the database.
 *
 */</comment>
<class><specifier>public</specifier> class <name>SearchParameters</name> <super_list><implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SearchParameters</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>SearchParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>String</name></type> <name>searchString</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>regularExpression</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInTitles</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInUserNames</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInPasswords</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInUrls</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInGroupNames</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInNotes</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>ignoreCase</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>ignoreExpired</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>respectEntrySearchingDisabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>excludeExpired</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<return>return <expr><call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setupNone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>searchInTitles</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInUserNames</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInPasswords</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInUrls</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInGroupNames</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInNotes</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/SearchParametersFactory.java" hash="697197dbc0fd702830b459b7f67b8349723ab32c"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>SearchParametersFactory</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>SearchParameters</name></type> <name>getNone</name><parameter_list>(<parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SearchParameters</name></type> <name>sp</name> <init>= <expr><call><name>getInstance</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>setupNone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>sp</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>SearchParameters</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>instanceof</operator> <name>PwDatabase</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>SearchParametersV4</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>SearchParameters</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>SearchParameters</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>group</name> <operator>instanceof</operator> <name>PwGroupV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>SearchParametersV4</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>SearchParameters</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/SearchParametersV4.java" hash="10dbba716efdcc09baf8d24d9f69de77a7d84e57"><comment type="block">/*
 * Copyright 2013-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name></name>;</package>

<class><specifier>public</specifier> class <name>SearchParametersV4</name> <super_list><extends>extends <super><name>SearchParameters</name></super></extends> <implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>SearchParametersV4</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>SearchParametersV4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInOther</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInUUIDs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>searchInTags</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setupNone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setupNone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInOther</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInUUIDs</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>searchInTags</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/AddEntry.java" hash="679ac2e6883ac3486ff554bcf17bfdeb2914e12c"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>

<class><specifier>public</specifier> class <name>AddEntry</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>AddEntry</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>AddEntry</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<constructor><specifier>protected</specifier> <name>AddEntry</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterAdd</name><argument_list>(<argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>addEntryTo</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Commit to disk</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterAdd</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{

		<constructor><specifier>public</specifier> <name>AfterAdd</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				
				<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>mEntry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line">// Mark parent group dirty</comment>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>removeEntryFrom</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>, <argument><expr><call><name><name>mEntry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
	}</block></class>
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/AddGroup.java" hash="2b39cf9901d6aeb8e83a215acf18085ecbffe433"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>

<class><specifier>public</specifier> class <name>AddGroup</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mIconID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroup</name></type> <name>mGroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroup</name></type> <name>mParent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>AddGroup</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconid</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>AddGroup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>iconid</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><name>dontSave</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	
	<constructor><specifier>private</specifier> <name>AddGroup</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iconid</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mName</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mIconID</name> <operator>=</operator> <name>iconid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mParent</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterAdd</name><argument_list>(<argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// Generate new group</comment>
		<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>createGroup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mGroup</name><operator>.</operator><name>initNewGroup</name></name><argument_list>(<argument><expr><name>mName</name></expr></argument>, <argument><expr><call><name><name>pm</name><operator>.</operator><name>newGroupId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mGroup</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name>mIconID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>addGroupTo</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>, <argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//mParent.sortGroupsByName();</comment>
		
		<comment type="line">// Commit to disk</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>mDontSave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterAdd</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{

		<constructor><specifier>public</specifier> <name>AfterAdd</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Mark parent group dirty</comment>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>removeGroupFrom</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>, <argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>

	}</block></class>
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/CreateDB.java" hash="d39d18e281dae864af156293e75466158175e058"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEncryptionAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>CreateDB</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ENCRYPTION_ROUNDS</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mFilename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>CreateDB</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mFilename</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Create new database record</comment>
		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setDB</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><call><name><name>PwDatabase</name><operator>.</operator><name>getNewDBInstance</name></name><argument_list>(<argument><expr><name>mFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>initNew</name></name><argument_list>(<argument><expr><name>mFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Set Database state</comment>
		<expr_stmt><expr><name><name>db</name><operator>.</operator><name>pm</name></name> <operator>=</operator> <name>pm</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Uri</name><operator>.</operator><name>Builder</name></name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name><name>Uri</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>db</name><operator>.</operator><name>mUri</name></name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>mFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setLoaded</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>clearShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Commit changes</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>mDontSave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/DeleteEntry.java" hash="96e7363fbfdcda44dd7d490f4f3cc6a710301285"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>

<comment type="block" format="javadoc">/** Task to delete entries
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>DeleteEntry</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>DeleteEntry</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>DeleteEntry</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>mEntry</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Remove Entry from parent</comment>
		<decl_stmt><decl><type><name>boolean</name></type> <name>recycle</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>canRecycle</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>recycle</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>recycle</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>deleteEntry</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<comment type="line">// Save</comment>
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterDelete</name><argument_list>(<argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>mEntry</name></expr></argument>, <argument><expr><name>recycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Commit database</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>mDontSave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
		
	</block_content>}</block></function>

	<class><specifier>private</specifier> class <name>AfterDelete</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{

		<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroup</name></type> <name>mParent</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mEntry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recycled</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>AfterDelete</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>mParent</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>recycled</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
		
		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Mark parent dirty</comment>
				<if_stmt><if>if <condition>( <expr><name>mParent</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<if_stmt><if>if <condition>(<expr><name>recycled</name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>PwGroup</name></type> <name>recycleBin</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>getRecycleBin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>recycleBin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>recycled</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>undoRecycle</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>, <argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>undoDeleteEntry</name></name><argument_list>(<argument><expr><name>mEntry</name></expr></argument>, <argument><expr><name>mParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></function>
		
	}</block></class>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/DeleteGroup.java" hash="4aa20ed6111af2d88bc01f326e04b1345bbcdfda"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupBaseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>

<class><specifier>public</specifier> class <name>DeleteGroup</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroup</name></type> <name>mGroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>GroupBaseActivity</name></type> <name>mAct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>DeleteGroup</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMembers</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>DeleteGroup</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMembers</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>act</name></expr></argument>, <argument><expr><name>dontSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	
	<constructor><specifier>public</specifier> <name>DeleteGroup</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMembers</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>dontSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setMembers</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mAct</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterDelete</name><argument_list>(<argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		
		<comment type="line">// Remove child entries</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>childEnt</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mGroup</name><operator>.</operator><name>childEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childEnt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<decl_stmt><decl><type><name>DeleteEntry</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>DeleteEntry</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><call><name><name>childEnt</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<comment type="line">// Remove child groups</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>childGrp</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>mGroup</name><operator>.</operator><name>childGroups</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>childGrp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<decl_stmt><decl><type><name>DeleteGroup</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>DeleteGroup</name><argument_list>(<argument><expr><name>mDb</name></expr></argument>, <argument><expr><call><name><name>childGrp</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mAct</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		
		<comment type="line">// Remove from parent</comment>
		<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>mGroup</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Remove from PwDatabaseV3</comment>
		<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Save</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>mDontSave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterDelete</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<constructor><specifier>public</specifier> <name>AfterDelete</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Remove from group global</comment>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>groups</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>mGroup</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="line">// Remove group from the dirty global (if it is present), not a big deal if this fails</comment>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="line">// Mark parent dirty</comment>
				<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>mGroup</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// Let's not bother recovering from a failure to save a deleted group.  It is too much work.</comment>
				<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></function>

	}</block></class>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/FileOnFinish.java" hash="d287404ae40538fd4a7a020b21590d2ca90aff39"><comment type="block">/*
 * Copyright 2016 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<class><specifier>public</specifier> class <name>FileOnFinish</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mFilename</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>FileOnFinish</name></type> <name>mOnFinish</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>FileOnFinish</name><parameter_list>(<parameter><decl><type><name>FileOnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mOnFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setFilename</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mFilename</name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>Uri</name></type> <name>getFilename</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>mFilename</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/LoadDB.java" hash="b9d17f414db9f9c0bb0ba485a6bc35415cae7d95"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>ArcFourException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>ContentFileNotFoundException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidAlgorithmException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBSignatureException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBVersionException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidPasswordException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>KeyFileEmptyException</name></name>;</import>

<class><specifier>public</specifier> class <name>LoadDB</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mUri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mPass</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mRememberKeyfile</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LoadDB</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mUri</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mPass</name> <operator>=</operator> <name>pass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mRememberKeyfile</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>keyfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>keyfile_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>LoadData</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>, <argument><expr><name>mUri</name></expr></argument>, <argument><expr><name>mPass</name></expr></argument>, <argument><expr><name>mKey</name></expr></argument>, <argument><expr><name>mStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>saveFileData</name><argument_list>(<argument><expr><name>mUri</name></expr></argument>, <argument><expr><name>mKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ArcFourException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_arc4</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidPasswordException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>InvalidPassword</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ContentFileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>file_not_found_content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>FileNotFound</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>KeyFileEmptyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>keyfile_is_empty</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>invalid_algorithm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyFileException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>keyfile_does_not_exist</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidDBSignatureException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>invalid_db_sig</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidDBVersionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>unsupported_db_version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidDBException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_invalid_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>OutOfMemoryError</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_out_of_memory</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveFileData</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>( <expr><operator>!</operator> <name>mRememberKeyfile</name></expr> )</condition> <block>{<block_content>
            <expr_stmt><expr><name>key</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getFileHistory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>createFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>



}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/OnFinish.java" hash="5f534be2f2ffc7943f385733229f5c741b1101da"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Callback after a task is completed.
 * 
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>OnFinish</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>mSuccess</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>mMessage</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>OnFinish</name></type> <name>mOnFinish</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>Handler</name></type> <name>mHandler</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>OnFinish</name><parameter_list>()</parameter_list> <block>{<block_content>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>OnFinish</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mOnFinish</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mHandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>OnFinish</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mOnFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mHandler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>OnFinish</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mOnFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mHandler</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mSuccess</name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mMessage</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mSuccess</name> <operator>=</operator> <name>success</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mOnFinish</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// Pass on result on call finish</comment>
			<expr_stmt><expr><call><name><name>mOnFinish</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name>mSuccess</name></expr></argument>, <argument><expr><name>mMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>mHandler</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>mOnFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>mOnFinish</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>displayMessage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>ctx</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>mMessage</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mMessage</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mMessage</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/RunnableOnFinish.java" hash="b13f4d11da813638e1ed5bdf2777b8195b9e3021"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RunnableOnFinish</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>public</specifier> <name>OnFinish</name></type> <name>mFinish</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>UpdateStatus</name></type> <name>mStatus</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>RunnableOnFinish</name><parameter_list>(<parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <name>finish</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mFinish</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>void</name></type> <name>finish</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>mFinish</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>mFinish</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setStatus</name><parameter_list>(<parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mStatus</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/SaveDB.java" hash="726ac7b5b7cd6b7656c10b3af430c02ebe25aa0b"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>

<class><specifier>public</specifier> class <name>SaveDB</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>SaveDB</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>SaveDB</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>

		<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>mDontSave</name></expr> )</condition> <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>SaveData</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>PwDbOutputException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<comment type="line">// TODO: Restore</comment>
				<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
				<comment type="block">/*
				finish(false, e.getMessage());
				return;
				*/</comment>
			</block_content>}</block></catch></try>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/SetPassword.java" hash="4d685c1a4ec1037c0b7acfc990f316bbbea65af8"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name><operator>.</operator><name>PasswordEncodingDialogHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>SetPassword</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mPassword</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mKeyfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mDontSave</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>SetPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>SetPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dontSave</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mPassword</name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mKeyfile</name> <operator>=</operator> <name>keyfile</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDontSave</name> <operator>=</operator> <name>dontSave</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>validatePassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></type> <name>onclick</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>validatePasswordEncoding</name></name><argument_list>(<argument><expr><name>mPassword</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>PasswordEncodingDialogHelper</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>PasswordEncodingDialogHelper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>onclick</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>mDb</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>backupKey</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>pm</name><operator>.</operator><name>masterKey</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>pm</name><operator>.</operator><name>masterKey</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>backupKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>backupKey</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Set key</comment>
		<try>try <block>{<block_content>
			<decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>UriUtil</name><operator>.</operator><name>getUriInputStream</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mKeyfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>setMasterKey</name></name><argument_list>(<argument><expr><name>mPassword</name></expr></argument>, <argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyFileException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>backupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name>backupKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>finish</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></catch></try>
		
		<comment type="line">// Save Database</comment>
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterSave</name><argument_list>(<argument><expr><name>backupKey</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>, <argument><expr><name>mDontSave</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterSave</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>mBackup</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>AfterSave</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>backup</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>mBackup</name> <operator>=</operator> <name>backup</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Erase the current master key</comment>
				<expr_stmt><expr><call><name>erase</name><argument_list>(<argument><expr><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>masterKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>mDb</name><operator>.</operator><name>pm</name><operator>.</operator><name>masterKey</name></name> <operator>=</operator> <name>mBackup</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>

	}</block></class>
	
	<comment type="block" format="javadoc">/** Overwrite the array as soon as we don't need it to avoid keeping the extra data in memory
	 * @param array
	 */</comment>
	<function><type><specifier>private</specifier> <name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>array</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/edit/UpdateEntry.java" hash="dc35ea210806edce86f2caf5b0bc84602b10a9b3"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>

<class><specifier>public</specifier> class <name>UpdateEntry</name> <super_list><extends>extends <super><name>RunnableOnFinish</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mOldE</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mNewE</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>UpdateEntry</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>oldE</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>newE</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mOldE</name> <operator>=</operator> <name>oldE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mNewE</name> <operator>=</operator> <name>newE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		
		<comment type="line">// Keep backup of original values in case save fails</comment>
		<decl_stmt><decl><type><name>PwEntry</name></type> <name>backup</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>backup</name> <operator>=</operator> <operator>(</operator><name>PwEntry</name><operator>)</operator> <call><name><name>mOldE</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mFinish</name> <operator>=</operator> <operator>new</operator> <call><name>AfterUpdate</name><argument_list>(<argument><expr><name>backup</name></expr></argument>, <argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Update entry with new values</comment>
		<expr_stmt><expr><call><name><name>mOldE</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>mNewE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOldE</name><operator>.</operator><name>touch</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<comment type="line">// Commit to disk</comment>
		<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mDb</name></expr></argument>, <argument><expr><name>mFinish</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>save</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>AfterUpdate</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntry</name></type> <name>mBackup</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>AfterUpdate</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>backup</name></decl></parameter>, <parameter><decl><type><name>OnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>mBackup</name> <operator>=</operator> <name>backup</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
		
		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Mark group dirty if title or icon changes</comment>
				<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>mBackup</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>mNewE</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator> <call><name><name>mBackup</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>mNewE</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>PwGroup</name></type> <name>parent</name> <init>= <expr><call><name><name>mBackup</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>( <expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
						<comment type="line">// Resort entries</comment>
						<expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>sortEntriesByName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

						<comment type="line">// Mark parent group dirty</comment>
						<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>dirty</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="line">// If we fail to save, back out changes to global structure</comment>
				<expr_stmt><expr><call><name><name>mOldE</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>mBackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
		
	}</block></class>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/ArcFourException.java" hash="448a8d9216e4b12b79986ae3690dd6f2d36a27b7"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>ArcFourException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">2103983626687861237L</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/ContentFileNotFoundException.java" hash="a820b517b9251c49d204da9eabbca9ab3cb09811"><comment type="block">/*
 * Copyright 2016 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by bpellin on 3/14/16.
 */</comment>
<class><specifier>public</specifier> class <name>ContentFileNotFoundException</name> <super_list><extends>extends <super><name>FileNotFoundException</name></super></extends></super_list> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>FileNotFoundException</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>scheme</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>ContentFileNotFoundException</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>new</operator> <call><name>FileNotFoundException</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier>  <name>ContentFileNotFoundException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InconsistentDBException.java" hash="201be05f76d5c784e213bb811ac915bf9d8f733b"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InconsistentDBException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>InconsistentDBException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">4879502365625912291L</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidAlgorithmException.java" hash="dbde40066cf5e6c2a3df92edb1fda9d0b836ac99"><comment type="block">/*
 * Copyright 2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidAlgorithmException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{
	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">3062682891863487208L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>InvalidAlgorithmException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidDBException.java" hash="c4a803470b987f6c8860070c9a9bd92b87916e79"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidDBException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>InvalidDBException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>InvalidDBException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">5191964825154190923L</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidDBSignatureException.java" hash="624091d7b9963d1d7664228d22d7bad8439647e3"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidDBSignatureException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{
	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">5358923878743513758L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>InvalidDBSignatureException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidDBVersionException.java" hash="5ade49bf8435d7c7abcee5036163ea4173424fb5"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidDBVersionException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{
	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">4260650987856400586L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>InvalidDBVersionException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidKeyFileException.java" hash="9e3930be2cba7cfa2e1e5d69b1dc91aebd468691"><comment type="block">/*
 * Copyright 2009-2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidKeyFileException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{
	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">5540694419562294464L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>InvalidKeyFileException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/InvalidPasswordException.java" hash="26be6eb840d650d71dcdd798fd58fc470c9b097a"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>InvalidPasswordException</name> <super_list><extends>extends <super><name>InvalidDBException</name></super></extends></super_list> <block>{

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">8729476180242058319L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>InvalidPasswordException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>InvalidPasswordException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/KeyFileEmptyException.java" hash="f965fd8092067f05994c6ef2286f25331f34edff"><comment type="block">/*
 * Copyright 2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>KeyFileEmptyException</name> <super_list><extends>extends <super><name>InvalidKeyFileException</name></super></extends></super_list> <block>{
	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">1630780661204212325L</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>KeyFileEmptyException</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/PwDbOutputException.java" hash="8d7fb4aed4854f7d58e0efcaeeace6481d8e4c85"><comment type="block">/*
 * Copyright 2009-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDbOutputException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{
	<constructor><specifier>public</specifier> <name>PwDbOutputException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PwDbOutputException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PwDbOutputException</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">3321212743159473368L</literal></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/exception/SamsungClipboardException.java" hash="0e63fd81f9bdda26d03eb98118378159978e0736"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name></name>;</package>

<class><specifier>public</specifier> class <name>SamsungClipboardException</name> <super_list><extends>extends <super><name>Exception</name></super></extends></super_list> <block>{
	
	<constructor><specifier>public</specifier> <name>SamsungClipboardException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>SamsungClipboardException</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="block" format="javadoc">/**
	 * 
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">3168837280393843509L</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/iterator/EntrySearchStringIterator.java" hash="2826ded52f867b6a92b139dc07afceba2f53f0e2"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>iterator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchParameters</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchParametersV4</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>EntrySearchStringIterator</name> <super_list><implements>implements <super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>EntrySearchStringIterator</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>PwEntryV3</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>EntrySearchStringIteratorV3</name><argument_list>(<argument><expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>PwEntryV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>EntrySearchStringIteratorV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"This should not be possible"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>EntrySearchStringIterator</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>PwEntryV3</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>EntrySearchStringIteratorV3</name><argument_list>(<argument><expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <name>e</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>PwEntryV4</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>EntrySearchStringIteratorV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>SearchParametersV4</name><operator>)</operator> <name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"This should not be possible"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function_decl><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>;</function_decl>

	<function_decl><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>next</name><parameter_list>()</parameter_list>;</function_decl>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
		<throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"This iterator cannot be used to remove strings."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		
	</block_content>}</block></function>
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/iterator/EntrySearchStringIteratorV3.java" hash="4157d75c6f0777f858455655cc1fc9a02998b87f"><comment type="block">/*
 * Copyright 2011-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>iterator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>EntrySearchStringIteratorV3</name> <super_list><extends>extends <super><name>EntrySearchStringIterator</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntryV3</name></type> <name>entry</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier>private</specifier> <name>SearchParameters</name></type> <name>sp</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>EntrySearchStringIteratorV3</name><parameter_list>(<parameter><decl><type><name>PwEntryV3</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name><name>SearchParameters</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>EntrySearchStringIteratorV3</name><parameter_list>(<parameter><decl><type><name>PwEntryV3</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>SearchParameters</name></type> <name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>title</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>url</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>username</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>comment</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxEntries</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>current</name> <operator>&lt;</operator> <name>maxEntries</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Past the end of the list</comment>
		<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>maxEntries</name></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"Past final string"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
        <expr_stmt><expr><call><name>useSearchParameters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>getCurrentString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name>str</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>useSearchParameters</name><parameter_list>()</parameter_list> <block>{<block_content>
		
		<if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<while>while <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
            <switch>switch <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>title</name></expr>:</case>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sp</name><operator>.</operator><name>searchInTitles</name></name></expr>;</expr_stmt>
                <break>break;</break>
            
            <case>case <expr><name>url</name></expr>:</case>
            	<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sp</name><operator>.</operator><name>searchInUrls</name></name></expr>;</expr_stmt>
                <break>break;</break>
                    
            <case>case <expr><name>username</name></expr>:</case>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sp</name><operator>.</operator><name>searchInUserNames</name></name></expr>;</expr_stmt>    
                <break>break;</break>
            	
            <case>case <expr><name>comment</name></expr>:</case>
            	<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>sp</name><operator>.</operator><name>searchInNotes</name></name></expr>;</expr_stmt>
                <break>break;</break>
                    
            <default>default:</default>
            	<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></switch>
                
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>   
		</block_content>}</block></while>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>getCurrentString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<switch>switch <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>title</name></expr>:</case>
			<return>return <expr><call><name><name>entry</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr>;</return>
		
		<case>case <expr><name>url</name></expr>:</case>
			<return>return <expr><call><name><name>entry</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr>;</return>
			
		<case>case <expr><name>username</name></expr>:</case>
			<return>return <expr><call><name><name>entry</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr>;</return>
			
		<case>case <expr><name>comment</name></expr>:</case>
			<return>return <expr><call><name><name>entry</name><operator>.</operator><name>getNotes</name></name><argument_list>()</argument_list></call></expr>;</return>
			
		<default>default:</default>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/iterator/EntrySearchStringIteratorV4.java" hash="00f89218ee2ddc3c96b4854c4dd2f78007ff4649"><comment type="block">/*
 * Copyright 2011-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>iterator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchParametersV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>

<class><specifier>public</specifier> class <name>EntrySearchStringIteratorV4</name> <super_list><extends>extends <super><name>EntrySearchStringIterator</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>setIterator</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>SearchParametersV4</name></type> <name>sp</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>EntrySearchStringIteratorV4</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name><name>SearchParametersV4</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>setIterator</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>EntrySearchStringIteratorV4</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>SearchParametersV4</name></type> <name>sp</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>sp</name></name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>setIterator</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"Past the end of the list."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>next</name> <init>= <expr><name>current</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>next</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>advance</name><parameter_list>()</parameter_list> <block>{<block_content>
		<while>while <condition>(<expr><call><name><name>setIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><call><name><name>setIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><call><name>searchInField</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			
		</block_content>}</block></while>
		
		<expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>searchInField</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV4</name><operator>.</operator><name>STR_TITLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInTitles</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV4</name><operator>.</operator><name>STR_USERNAME</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInUserNames</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV4</name><operator>.</operator><name>STR_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInPasswords</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV4</name><operator>.</operator><name>STR_URL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInUrls</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV4</name><operator>.</operator><name>STR_NOTES</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInNotes</name></name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name><name>sp</name><operator>.</operator><name>searchInOther</name></name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/Importer.java" hash="f91860a46c1a1cadd5c4b79b095463887f7d777a"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Importer</name> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwDatabase</name></type> <name>openDatabase</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws>;</function_decl>

	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwDatabase</name></type> <name>openDatabase</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list>
		<throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws>;</function_decl>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/ImporterFactory.java" hash="98fa40325282b83e147452b909ba2b8d09557a54"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBSignatureException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>ImporterFactory</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Importer</name></type> <name>createImporter</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>streamDir</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidDBSignatureException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{<block_content>
		<return>return <expr><call><name>createImporter</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>streamDir</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>Importer</name></type> <name>createImporter</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>streamDir</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>debug</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InvalidDBSignatureException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>sig1</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sig2</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>PwDbHeaderV3</name><operator>.</operator><name>matchesHeader</name></name><argument_list>(<argument><expr><name>sig1</name></expr></argument>, <argument><expr><name>sig2</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><operator>new</operator> <call><name>ImporterV3Debug</name><argument_list>()</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<return>return <expr><operator>new</operator> <call><name>ImporterV3</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>PwDbHeaderV4</name><operator>.</operator><name>matchesHeader</name></name><argument_list>(<argument><expr><name>sig1</name></expr></argument>, <argument><expr><name>sig2</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>ImporterV4</name><argument_list>(<argument><expr><name>streamDir</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<throw>throw <expr><operator>new</operator> <call><name>InvalidDBSignatureException</name><argument_list>()</argument_list></call></expr>;</throw>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/ImporterV3.java" hash="447fee2cf167c25115c658ad63120d3e7e8b95e2"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 *

Derived from

KeePass for J2ME

Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ShortBufferException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEncryptionAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidAlgorithmException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBSignatureException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBVersionException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidKeyFileException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidPasswordException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>NullOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Load a v3 database file.
 *
 * @author Naomaru Itoi &lt;nao@phoneid.org&gt;
 * @author Bill Zwicky &lt;wrzwicky@pobox.com&gt;
 */</comment>
<class><specifier>public</specifier> class <name>ImporterV3</name> <super_list><extends>extends <super><name>Importer</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>ImporterV3</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>protected</specifier> <name>PwDatabaseV3</name></type> <name>createDB</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwDatabaseV3</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * Load a v3 database file, return contents in a new PwDatabaseV3.
	 * 
	 * @param inStream  Existing file to load.
	 * @param password Pass phrase for infile.
	 * @return new PwDatabaseV3 container.
	 * 
	 * @throws IOException on any file error.
	 * @throws InvalidKeyFileException 
	 * @throws InvalidPasswordException 
	 * @throws InvalidPasswordException on a decryption error, or possible internal bug.
	 * @throws InvalidDBSignatureException 
	 * @throws InvalidDBVersionException 
	 * @throws IllegalBlockSizeException on a decryption error, or possible internal bug.
	 * @throws BadPaddingException on a decryption error, or possible internal bug.
	 * @throws NoSuchAlgorithmException on a decryption error, or possible internal bug.
	 * @throws NoSuchPaddingException on a decryption error, or possible internal bug.
	 * @throws InvalidAlgorithmParameterException if error decrypting main file body. 
	 * @throws ShortBufferException if error decrypting main file body.
	 */</comment>
	<function><type><specifier>public</specifier> <name>PwDatabaseV3</name></type> <name>openDatabase</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>kfIs</name></decl></parameter>)</parameter_list>
	<throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws>
	<block>{<block_content>
		<return>return <expr><call><name>openDatabase</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>PwDatabaseV3</name></type> <name>openDatabase</name><parameter_list>( <parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>InputStream</name></type> <name>kfIs</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list>
	<throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabaseV3</name></type>        <name>newManager</name></decl>;</decl_stmt>


		<comment type="line">// Load entire file, most of it's encrypted.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>fileSize</name> <init>= <expr><call><name><name>inStream</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>filebuf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>fileSize</name> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// Pad with a blocksize (Twofish uses 128 bits), since Android 4.3 tries to write more to the buffer</comment>
		<expr_stmt><expr><call><name><name>inStream</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>filebuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>inStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Parse header (unencrypted)</comment>
		<if_stmt><if>if<condition>( <expr><name>fileSize</name> <operator>&lt;</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr> )</condition><block type="pseudo"><block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>( <argument><expr><literal type="string">"File too short for header"</literal></expr></argument> )</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
		<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>hdr</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderV3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>hdr</name><operator>.</operator><name>loadFromFile</name></name><argument_list>(<argument><expr><name>filebuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>hdr</name><operator>.</operator><name>signature1</name></name> <operator>!=</operator> <name><name>PwDbHeader</name><operator>.</operator><name>PWM_DBSIG_1</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>hdr</name><operator>.</operator><name>signature2</name></name> <operator>!=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>DBSIG_2</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidDBSignatureException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name><name>hdr</name><operator>.</operator><name>matchesVersion</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidDBVersionException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>updateMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>creating_db_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newManager</name> <operator>=</operator> <call><name>createDB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>setMasterKey</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>kfIs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Select algorithm</comment>
		<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>FLAG_RIJNDAEL</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>newManager</name><operator>.</operator><name>algorithm</name></name> <operator>=</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>hdr</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>FLAG_TWOFISH</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>newManager</name><operator>.</operator><name>algorithm</name></name> <operator>=</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Twofish</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidAlgorithmException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// Copy for testing</comment>
		<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>copyHeader</name></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>newManager</name><operator>.</operator><name>numKeyEncRounds</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>numKeyEncRounds</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>newManager</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="string">"KeePass Password Manager"</literal></expr>;</expr_stmt>

		<comment type="line">// Generate transformedMasterKey from masterKey</comment>
		<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>makeFinalKey</name></name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>transformSeed</name></name></expr></argument>, <argument><expr><name><name>newManager</name><operator>.</operator><name>numKeyEncRounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>status</name><operator>.</operator><name>updateMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>decrypting_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Initialize Rijndael algorithm</comment>
		<decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name><name>newManager</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS5Padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name><name>newManager</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Twofish</name></name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"Twofish/CBC/PKCS7PADDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>( <argument><expr><literal type="string">"Encryption algorithm is not supported"</literal></expr></argument> )</argument_list></call></expr>;</throw>
			</block_content>}</block></else></if_stmt>

		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No such algorithm"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchPaddingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No such pdading"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>( <argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>( <argument><expr><name><name>newManager</name><operator>.</operator><name>finalKey</name></name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>( <argument><expr><name><name>hdr</name><operator>.</operator><name>encryptionIV</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidAlgorithmParameterException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm parameter."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<comment type="line">// Decrypt! The first bytes aren't encrypted (that's the header)</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>encryptedPartSize</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>encryptedPartSize</name> <operator>=</operator> <call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></argument>, <argument><expr><name>fileSize</name> <operator>-</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></argument>, <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ShortBufferException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Buffer too short"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalBlockSizeException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid block size"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>BadPaddingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidPasswordException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<comment type="line">// Copy decrypted data for testing</comment>
		<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>copyEncrypted</name></name><argument_list>(<argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></argument>, <argument><expr><name>encryptedPartSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"No SHA-256 algorithm"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		<decl_stmt><decl><type><name>NullOutputStream</name></type> <name>nos</name> <init>= <expr><operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></argument>, <argument><expr><name>encryptedPartSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>contentsHash</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"KeePassDroid"</literal></expr></argument>,<argument><expr><literal type="string">"Database file did not decrypt correctly. (checksum code is broken)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>InvalidPasswordException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Import all groups</comment>

		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>PwDbHeaderV3</name><operator>.</operator><name>BUF_SIZE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>newGrp</name> <init>= <expr><operator>new</operator> <call><name>PwGroupV3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>numGroups</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>fieldType</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readUShort</name></name><argument_list>( <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>fieldSize</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

			<if_stmt><if>if<condition>( <expr><name>fieldType</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr> )</condition> <block>{<block_content>

				<comment type="line">// End-Group record.  Save group and count it.</comment>
				<expr_stmt><expr><call><name><name>newGrp</name><operator>.</operator><name>populateBlankFields</name></name><argument_list>(<argument><expr><name>newManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>groups</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newGrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>newGrp</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>readGroupField</name><argument_list>(<argument><expr><name>newManager</name></expr></argument>, <argument><expr><name>newGrp</name></expr></argument>, <argument><expr><name>fieldType</name></expr></argument>, <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>fieldSize</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="line">// Import all entries</comment>
		<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>newEnt</name> <init>= <expr><operator>new</operator> <call><name>PwEntryV3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>numEntries</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>fieldType</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readUShort</name></name><argument_list>( <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>fieldSize</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>( <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if<condition>( <expr><name>fieldType</name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr> )</condition> <block>{<block_content>
				<comment type="line">// End-Group record.  Save group and count it.</comment>
				<expr_stmt><expr><call><name><name>newEnt</name><operator>.</operator><name>populateBlankFields</name></name><argument_list>(<argument><expr><name>newManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newEnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>newEnt</name> <operator>=</operator> <operator>new</operator> <call><name>PwEntryV3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>readEntryField</name><argument_list>(<argument><expr><name>newManager</name></expr></argument>, <argument><expr><name>newEnt</name></expr></argument>, <argument><expr><name>filebuf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>fieldSize</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name><name>newManager</name><operator>.</operator><name>constructTree</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>newManager</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * KeePass's custom pad style.
	 * 
	 * @param data buffer to pad.
	 * @return addtional bytes to append to data[] to make
	 *    a properly padded array.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>makePad</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<comment type="line">//custom pad method</comment>

		<comment type="line">// append 0x80 plus zeros to a multiple of 4 bytes</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>thisblk</name> <init>= <expr><literal type="number">32</literal> <operator>-</operator> <name><name>data</name><operator>.</operator><name>length</name></name> <operator>%</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// bytes needed to finish blk</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>nextblk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                      <comment type="line">// 32 if we need another block</comment>
		<comment type="line">// need 9 bytes; add new block if no room</comment>
		<if_stmt><if>if<condition>( <expr><name>thisblk</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>nextblk</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// all bytes are zeroed for free</comment>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pad</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>thisblk</name> <operator>+</operator> <name>nextblk</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>

		<comment type="line">// write length*8 to end of final block</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ix</name> <init>= <expr><name>thisblk</name> <operator>+</operator> <name>nextblk</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeInt</name></name><argument_list>( <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name><operator>&gt;&gt;</operator><literal type="number">29</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>ix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bsw32</name><argument_list>( <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>ix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ix</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeInt</name></name><argument_list>( <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>ix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bsw32</name><argument_list>( <argument><expr><name>pad</name></expr></argument>, <argument><expr><name>ix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>pad</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>bsw32</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>byte</name></type> <name>t</name> <init>= <expr><name><name>ary</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></function>


	<comment type="block" format="javadoc">/**
	 * Parse and save one record from binary file.
	 * @param buf
	 * @param offset
	 * @return If &gt;0, 
	 * @throws UnsupportedEncodingException 
	 */</comment>
	<function><type><name>void</name></type> <name>readGroupField</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwGroupV3</name></type> <name>grp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fieldType</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{<block_content>
		<switch>switch<condition>( <expr><name>fieldType</name></expr> )</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0x0000</literal></expr> :</case>
			<comment type="line">// Ignore field</comment>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0001</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0002</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0003</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>tCreation</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0004</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>tLastMod</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0005</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>tLastAccess</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0006</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>tExpire</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0007</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0008</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>level</name></name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readUShort</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0009</literal></expr> :</case>
			<expr_stmt><expr><name><name>grp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></function>



	<function><type><name>void</name></type> <name>readEntryField</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntryV3</name></type> <name>ent</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
	<throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>fieldType</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readUShort</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fieldSize</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<switch>switch<condition>( <expr><name>fieldType</name></expr> )</condition> <block>{<block_content>
		<case>case <expr><literal type="number">0x0000</literal></expr> :</case>
			<comment type="line">// Ignore field</comment>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0001</literal></expr> :</case>
			<expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>setUUID</name></name><argument_list>(<argument><expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0002</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0003</literal></expr> :</case>
			<decl_stmt><decl><type><name>int</name></type> <name>iconId</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line">// Clean up after bug that set icon ids to -1</comment>
			<if_stmt><if>if <condition>(<expr><name>iconId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>iconId</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><name>iconId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0004</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>title</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			<break>break;</break>
		<case>case <expr><literal type="number">0x0005</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>url</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0006</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>username</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0007</literal></expr> :</case>
			<expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>strlen</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0008</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>additional</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x0009</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>tCreation</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x000A</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>tLastMod</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x000B</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>tLastAccess</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x000C</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>tExpire</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwDate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x000D</literal></expr> :</case>
			<expr_stmt><expr><name><name>ent</name><operator>.</operator><name>binaryDesc</name></name> <operator>=</operator> <call><name><name>Types</name><operator>.</operator><name>readCString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x000E</literal></expr> :</case>
			<expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>setBinaryData</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>fieldSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/ImporterV3Debug.java" hash="eba6c9c7c1a701555a708e57b150ed0949ccaa2e"><comment type="block">/*
 * Copyright 2011-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3Debug</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>

<class><specifier>public</specifier> class <name>ImporterV3Debug</name> <super_list><extends>extends <super><name>ImporterV3</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwDatabaseV3Debug</name></type> <name>createDB</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwDatabaseV3Debug</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwDatabaseV3Debug</name></type> <name>openDatabase</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>,
			<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
			<argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>PwDatabaseV3Debug</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>openDatabase</name></name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
				<argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/ImporterV4.java" hash="0c1d3bdc12f6cb6ddd3cef4a7914c75aaf15faf9"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>PwStreamCipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>CipherEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>ITimeLogger</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwCompressionAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDeletedObject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwIconCustom</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>ArcFourException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidPasswordException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>BetterCipherInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HashedBlockInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HmacBlockInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataInputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>DateUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>MemUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>StreamCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>jcajce</name><operator>.</operator><name>provider</name><operator>.</operator><name>symmetric</name><operator>.</operator><name>ARC4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xmlpull</name><operator>.</operator><name>v1</name><operator>.</operator><name>XmlPullParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xmlpull</name><operator>.</operator><name>v1</name><operator>.</operator><name>XmlPullParserException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xmlpull</name><operator>.</operator><name>v1</name><operator>.</operator><name>XmlPullParserFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ImporterV4</name> <super_list><extends>extends <super><name>Importer</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>StreamCipher</name></type> <name>randomStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabaseV4</name></type> <name>db</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashOfHeader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>pbHeader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>binNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Calendar</name></type> <name>utcCal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>streamDir</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ImporterV4</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>streamDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>utcCal</name></name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"UTC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>streamDir</name></name> <operator>=</operator> <name>streamDir</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>protected</specifier> <name>PwDatabaseV4</name></type> <name>createDB</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwDatabaseV4</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwDatabaseV4</name></type> <name>openDatabase</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>,
			<parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>

		<return>return <expr><call><name>openDatabase</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>UpdateStatus</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>PwDatabaseV4</name></type> <name>openDatabase</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>,
            <parameter><decl><type><name>InputStream</name></type> <name>keyInputStream</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
            <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>createDB</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwDbHeaderV4</name></type> <name>header</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderV4</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name><name>PwDbHeaderV4</name><operator>.</operator><name>HeaderAndHash</name></name></type> <name>hh</name> <init>= <expr><call><name><name>header</name><operator>.</operator><name>loadFromFile</name></name><argument_list>(<argument><expr><name>inStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashOfHeader</name> <operator>=</operator> <name><name>hh</name><operator>.</operator><name>hash</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pbHeader</name> <operator>=</operator> <name><name>hh</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt>
			
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setMasterKey</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyInputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>makeFinalKey</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>kdfParameters</name></name></expr></argument>, <argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>CipherEngine</name></type> <name>engine</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>engine</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>dataCipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>db</name><operator>.</operator><name>dataEngine</name></name> <operator>=</operator> <name>engine</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>engine</name><operator>.</operator><name>getCipher</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>finalKey</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<decl_stmt><decl><type><name>InputStream</name></type> <name>isPlain</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>

			<decl_stmt><decl><type><name>InputStream</name></type> <name>decrypted</name> <init>= <expr><call><name>AttachCipherStream</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LEDataInputStream</name></type> <name>dataDecrypted</name> <init>= <expr><operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>decrypted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>storedStartBytes</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>storedStartBytes</name> <operator>=</operator> <call><name><name>dataDecrypted</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>storedStartBytes</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>storedStartBytes</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
					<throw>throw <expr><operator>new</operator> <call><name>InvalidPasswordException</name><argument_list>()</argument_list></call></expr>;</throw>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>InvalidPasswordException</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>storedStartBytes</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>streamStartBytes</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>InvalidPasswordException</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>isPlain</name> <operator>=</operator> <operator>new</operator> <call><name>HashedBlockInputStream</name><argument_list>(<argument><expr><name>dataDecrypted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content> <comment type="line">// KDBX 4</comment>
			<decl_stmt><decl><type><name>LEDataInputStream</name></type> <name>isData</name> <init>= <expr><operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>inStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>storedHash</name> <init>= <expr><call><name><name>isData</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>storedHash</name></expr></argument>,<argument><expr><name>hashOfHeader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>InvalidDBException</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hmacKey</name> <init>= <expr><name><name>db</name><operator>.</operator><name>hmacKey</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerHmac</name> <init>= <expr><call><name><name>PwDbHeaderV4</name><operator>.</operator><name>computeHeaderHmac</name></name><argument_list>(<argument><expr><name>pbHeader</name></expr></argument>, <argument><expr><name>hmacKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>storedHmac</name> <init>= <expr><call><name><name>isData</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>storedHmac</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>storedHmac</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>InvalidDBException</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// Mac doesn't match</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>headerHmac</name></expr></argument>, <argument><expr><name>storedHmac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>InvalidDBException</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>HmacBlockInputStream</name></type> <name>hmIs</name> <init>= <expr><operator>new</operator> <call><name>HmacBlockInputStream</name><argument_list>(<argument><expr><name>isData</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>hmacKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>isPlain</name> <operator>=</operator> <call><name>AttachCipherStream</name><argument_list>(<argument><expr><name>hmIs</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<decl_stmt><decl><type><name>InputStream</name></type> <name>isXml</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name><name>db</name><operator>.</operator><name>compressionAlgorithm</name></name> <operator>==</operator> <name><name>PwCompressionAlgorithm</name><operator>.</operator><name>Gzip</name></name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>isXml</name> <operator>=</operator> <operator>new</operator> <call><name>GZIPInputStream</name><argument_list>(<argument><expr><name>isPlain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>isXml</name> <operator>=</operator> <name>isPlain</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>header</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>LoadInnerHeader</name><argument_list>(<argument><expr><name>isXml</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name></name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid stream key."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>randomStream</name> <operator>=</operator> <call><name><name>PwStreamCipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStream</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>randomStream</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>ArcFourException</name><argument_list>()</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>ReadXmlStreamed</name><argument_list>(<argument><expr><name>isXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>db</name></expr>;</return>
		
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>InputStream</name></type> <name>AttachCipherStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>Cipher</name></type> <name>cipher</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>BetterCipherInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>LoadInnerHeader</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>PwDbHeaderV4</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>LEDataInputStream</name></type> <name>lis</name> <init>= <expr><operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadInnerHeader</name><argument_list>(<argument><expr><name>lis</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>

	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>ReadInnerHeader</name><parameter_list>(<parameter><decl><type><name>LEDataInputStream</name></type> <name>lis</name></decl></parameter>, <parameter><decl><type><name>PwDbHeaderV4</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>byte</name></type> <name>fieldId</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator><call><name><name>lis</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Corrupted file"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>fieldId</name> <operator>!=</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>Binary</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>lis</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>fieldId</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>EndOfHeader</name></name></expr>:</case>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>InnerRandomStreamID</name></name></expr>:</case>
			    <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>setRandomStreamID</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>InnerRandomstreamKey</name></name></expr>:</case>
			    <expr_stmt><expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>Binary</name></name></expr>:</case>
				<decl_stmt><decl><type><name>byte</name></type> <name>flag</name> <init>= <expr><call><name><name>lis</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>boolean</name></type> <name>protectedFlag</name> <init>= <expr><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>KdbxBinaryFlags</name><operator>.</operator><name>Protected</name></name><operator>)</operator> <operator>!=</operator>
						<name><name>PwDbHeaderV4</name><operator>.</operator><name>KdbxBinaryFlags</name><operator>.</operator><name>None</name></name></expr></init></decl>;</decl_stmt>
				<comment type="line">// Read the serialized binary</comment>
				<decl_stmt><decl><type><name>int</name></type> <name>binaryKey</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>findUnusedKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>streamDir</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>binaryKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ProtectedBinary</name></type> <name>protectedBinary</name> <init>= <expr><operator>new</operator> <call><name>ProtectedBinary</name><argument_list>(<argument><expr><name>protectedFlag</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><call><name><name>protectedBinary</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyStream</name></name><argument_list>(<argument><expr><name>lis</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>poolAdd</name></name><argument_list>(<argument><expr><name>protectedBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
				<break>break;</break>
		</block_content>}</block></switch>

		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></function>

	<enum><specifier>private</specifier> enum <name>KdbContext</name> <block>{
        <decl><name>Null</name></decl>,
        <decl><name>KeePassFile</name></decl>,
        <decl><name>Meta</name></decl>,
        <decl><name>Root</name></decl>,
        <decl><name>MemoryProtection</name></decl>,
        <decl><name>CustomIcons</name></decl>,
        <decl><name>CustomIcon</name></decl>,
        <decl><name>CustomData</name></decl>,
        <decl><name>CustomDataItem</name></decl>,
        <decl><name>RootDeletedObjects</name></decl>,
        <decl><name>DeletedObject</name></decl>,
        <decl><name>Group</name></decl>,
        <decl><name>GroupTimes</name></decl>,
		<decl><name>GroupCustomData</name></decl>,
		<decl><name>GroupCustomDataItem</name></decl>,
        <decl><name>Entry</name></decl>,
        <decl><name>EntryTimes</name></decl>,
        <decl><name>EntryString</name></decl>,
        <decl><name>EntryBinary</name></decl>,
        <decl><name>EntryAutoType</name></decl>,
        <decl><name>EntryAutoTypeItem</name></decl>,
        <decl><name>EntryHistory</name></decl>,
		<decl><name>EntryCustomData</name></decl>,
		<decl><name>EntryCustomDataItem</name></decl>,
        <decl><name>Binaries</name></decl>
	}</block></enum>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_HISTORY_DAYS</name> <init>= <expr><literal type="number">365</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>readNextNode</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name></type> <name>ctxGroups</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroupV4</name></type> <name>ctxGroup</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntryV4</name></type> <name>ctxEntry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ctxStringName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ProtectedString</name></type> <name>ctxStringValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ctxBinaryName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ProtectedBinary</name></type> <name>ctxBinaryValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ctxATName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>ctxATSeq</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>entryInHistory</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntryV4</name></type> <name>ctxHistoryBase</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDeletedObject</name></type> <name>ctxDeletedObject</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>UUID</name></type> <name>customIconID</name> <init>= <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>customIconData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>customDataKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>customDataValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>groupCustomDataKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>groupCustomDataValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>entryCustomDataKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>entryCustomDataValue</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>ReadXmlStreamed</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>readerStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
		
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name>ReadDocumentStreamed</name><argument_list>(<argument><expr><call><name>CreatePullParser</name><argument_list>(<argument><expr><name>readerStream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>XmlPullParserException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>XmlPullParser</name></type> <name>CreatePullParser</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>readerStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>XmlPullParserFactory</name></type> <name>xppf</name> <init>= <expr><call><name><name>XmlPullParserFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>xppf</name><operator>.</operator><name>setNamespaceAware</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>XmlPullParser</name></type> <name>xpp</name> <init>= <expr><call><name><name>xppf</name><operator>.</operator><name>newPullParser</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>xpp</name><operator>.</operator><name>setInput</name></name><argument_list>(<argument><expr><name>readerStream</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>xpp</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>ReadDocumentStreamed</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>

		<expr_stmt><expr><call><name><name>ctxGroups</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>KdbContext</name></type> <name>ctx</name> <init>= <expr><name><name>KdbContext</name><operator>.</operator><name>Null</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>readNextNode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		
		<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>readNextNode</name></expr> )</condition> <block>{<block_content>
				<if_stmt><if>if<condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>XmlPullParser</name><operator>.</operator><name>END_DOCUMENT</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>readNextNode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<switch>switch <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<case>case <expr><name><name>XmlPullParser</name><operator>.</operator><name>START_TAG</name></name></expr>:</case>
				<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>ReadXmlElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name><name>XmlPullParser</name><operator>.</operator><name>END_TAG</name></name></expr>:</case>
				<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EndXmlElement</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
				<break>break;</break>
					
			</block_content>}</block></switch>
			
		</block_content>}</block></while>
		
		<comment type="line">// Error checks</comment>
		<if_stmt><if>if <condition>( <expr><name>ctx</name> <operator>!=</operator> <name><name>KdbContext</name><operator>.</operator><name>Null</name></name></expr> )</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Malformed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>ctxGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Malformed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
	</block_content>}</block></function>


	<function><type><specifier>private</specifier> <name>KdbContext</name></type> <name>ReadXmlElement</name><parameter_list>(<parameter><decl><type><name>KdbContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch>switch <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>Null</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDocNode</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>KeePassFile</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>KeePassFile</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemMeta</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Meta</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemRoot</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Root</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>Meta</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemGenerator</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Ignore</comment>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemHeaderHash</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>encodedHash</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>encodedHash</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>hashOfHeader</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encodedHash</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashOfHeader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
						<throw>throw <expr><operator>new</operator> <call><name>InvalidDBException</name><argument_list>()</argument_list></call></expr>;</throw>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemSettingsChanged</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>settingsChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbName</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbNameChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>nameChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbDesc</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>description</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbDescChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>descriptionChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbDefaultUser</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>defaultUserName</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbDefaultUserChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>defaultUserNameChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbColor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<comment type="line">// TODO: Add support to interpret the color if we want to allow changing the database color</comment>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbMntncHistoryDays</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>maintenanceHistoryDays</name></name> <operator>=</operator> <call><name>ReadUInt</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>DEFAULT_HISTORY_DAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbKeyChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>keyLastChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbKeyChangeRec</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>keyChangeRecDays</name></name> <operator>=</operator> <call><name>ReadLong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbKeyChangeForce</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>keyChangeForceDays</name></name> <operator>=</operator> <call><name>ReadLong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDbKeyChangeForceOnce</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>keyChangeForceOnce</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemMemoryProt</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>MemoryProtection</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIcons</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>CustomIcons</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemRecycleBinEnabled</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>recycleBinEnabled</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemRecycleBinUuid</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>recycleBinUUID</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemRecycleBinChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>recycleBinChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntryTemplatesGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>entryTemplatesGroup</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntryTemplatesGroupChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>entryTemplatesGroupChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemHistoryMaxItems</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>historyMaxItems</name></name> <operator>=</operator> <call><name>ReadInt</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemHistoryMaxSize</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>historyMaxSize</name></name> <operator>=</operator> <call><name>ReadLong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntryTemplatesGroupChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>entryTemplatesGroupChanged</name></name> <operator>=</operator> <call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLastSelectedGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>lastSelectedGroup</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLastTopVisibleGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>lastTopVisibleGroup</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBinaries</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Binaries</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>CustomData</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>MemoryProtection</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtTitle</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectTitle</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtUserName</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUserName</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtPassword</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectPassword</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtURL</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUrl</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtNotes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectNotes</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemProtAutoHide</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>autoEnableVisualHiding</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>CustomIcons</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>CustomIcon</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>CustomIcon</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconItemID</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>customIconID</name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconItemData</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>strData</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>strData</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>strData</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><name>customIconData</name> <operator>=</operator> <call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>strData</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>Binaries</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>key</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>ProtectedBinary</name></type> <name>pbData</name> <init>= <expr><call><name>ReadProtectedBinary</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>pbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<break>break;</break>

		<case>case <expr><name>CustomData</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>CustomDataItem</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>CustomDataItem</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>customDataKey</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>customDataValue</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>Root</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<assert>assert<expr><operator>(</operator><call><name><name>ctxGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
				<if_stmt><if>if <condition>( <expr><call><name><name>ctxGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Group list should be empty."</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
				
				<expr_stmt><expr><name><name>db</name><operator>.</operator><name>rootGroup</name></name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ctxGroups</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator><name><name>db</name><operator>.</operator><name>rootGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ctxGroup</name> <operator>=</operator> <call><name><name>ctxGroups</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDeletedObjects</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>RootDeletedObjects</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>Group</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemName</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemNotes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>notes</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemIcon</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ReadUInt</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconID</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>customIcon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>GroupTimes</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemIsExpanded</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>isExpanded</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemGroupDefaultAutoTypeSeq</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>defaultAutoTypeSequence</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEnableAutoType</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>enableAutoType</name></name> <operator>=</operator> <call><name>StringToBoolean</name><argument_list>(<argument><expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEnableSearching</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>enableSearching</name></name> <operator>=</operator> <call><name>StringToBoolean</name><argument_list>(<argument><expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLastTopVisibleEntry</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>lastTopVisibleEntry</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
                <return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>GroupCustomData</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxGroup</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ctxGroups</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>AddGroup</name><argument_list>(<argument><expr><name>ctxGroup</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ctxGroups</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>ctxGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntry</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxEntry</name> <operator>=</operator> <operator>new</operator> <call><name>PwEntryV4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ctxGroup</name><operator>.</operator><name>AddEntry</name></name><argument_list>(<argument><expr><name>ctxEntry</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><name>entryInHistory</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
        <case>case <expr><name>GroupCustomData</name></expr>:</case>
        	<if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>GroupCustomDataItem</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>GroupCustomDataItem</name></expr>:</case>
        	<if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>groupCustomDataKey</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>groupCustomDataValue</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>

			
		<case>case <expr><name>Entry</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>ctxEntry</name><operator>.</operator><name>setUUID</name></name><argument_list>(<argument><expr><call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemIcon</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ReadUInt</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconID</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>customIcon</name></name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>getIcon</name></name><argument_list>(<argument><expr><call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemFgColor</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>foregroundColor</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBgColor</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>backgroupColor</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemOverrideUrl</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>overrideURL</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemTags</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryTimes</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemString</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryString</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryBinary</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoType</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryAutoType</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryCustomData</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemHistory</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<assert>assert<expr><operator>(</operator><operator>!</operator><name>entryInHistory</name><operator>)</operator></expr>;</assert>
				
				<if_stmt><if>if <condition>( <expr><operator>!</operator> <name>entryInHistory</name></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><name>ctxHistoryBase</name> <operator>=</operator> <name>ctxEntry</name></expr>;</expr_stmt>
					<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryHistory</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
        <case>case <expr><name>EntryCustomData</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryCustomDataItem</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        <case>case <expr><name>EntryCustomDataItem</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>entryCustomDataKey</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>entryCustomDataValue</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>

		<case>case <expr><name>GroupTimes</name></expr>:</case>
		<case>case <expr><name>EntryTimes</name></expr>:</case>
			<decl_stmt><decl><type><name>ITimeLogger</name></type> <name>tl</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>GroupTimes</name></name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>ctxGroup</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>ctxEntry</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLastModTime</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setLastModificationTime</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCreationTime</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setCreationTime</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLastAccessTime</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setLastAccessTime</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemExpiryTime</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setExpiryTime</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemExpires</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setExpires</name></name><argument_list>(<argument><expr><call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemUsageCount</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setUsageCount</name></name><argument_list>(<argument><expr><call><name>ReadULong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemLocationChanged</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>tl</name><operator>.</operator><name>setLocationChanged</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>EntryString</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxStringName</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxStringValue</name> <operator>=</operator> <call><name>ReadProtectedString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>EntryBinary</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxBinaryName</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxBinaryValue</name> <operator>=</operator> <call><name>ReadProtectedBinary</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>EntryAutoType</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoTypeEnabled</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>autoType</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>ReadBool</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoTypeObfuscation</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>autoType</name><operator>.</operator><name>obfuscationOptions</name></name> <operator>=</operator> <call><name>ReadUInt</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoTypeDefaultSeq</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>autoType</name><operator>.</operator><name>defaultSequence</name></name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoTypeItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>EntryAutoTypeItem</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>EntryAutoTypeItem</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemWindow</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxATName</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemKeystrokeSequence</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxATSeq</name> <operator>=</operator> <call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>EntryHistory</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntry</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxEntry</name> <operator>=</operator> <operator>new</operator> <call><name>PwEntryV4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ctxHistoryBase</name><operator>.</operator><name>history</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ctxEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><name>entryInHistory</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>RootDeletedObjects</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDeletedObject</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxDeletedObject</name> <operator>=</operator> <operator>new</operator> <call><name>PwDeletedObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>deletedObjects</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ctxDeletedObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<return>return <expr><call><name>SwitchContext</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>KdbContext</name><operator>.</operator><name>DeletedObject</name></name></expr></argument>, <argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<case>case <expr><name>DeletedObject</name></expr>:</case>
			<if_stmt><if>if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxDeletedObject</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <call><name>ReadUuid</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDeletionTime</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>ctxDeletedObject</name><operator>.</operator><name>setDeletionTime</name></name><argument_list>(<argument><expr><call><name>ReadTime</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
			
		<default>default:</default>
			<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
		
		<return>return <expr><name>ctx</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>KdbContext</name></type> <name>EndXmlElement</name><parameter_list>(<parameter><decl><type><name>KdbContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><call><name><name>xpp</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>XmlPullParser</name><operator>.</operator><name>END_TAG</name></name><operator>)</operator></expr>;</assert>
		
		<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>KeePassFile</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDocNode</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Null</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>Meta</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemMeta</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>KeePassFile</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>Root</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemRoot</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>KeePassFile</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>MemoryProtection</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemMemoryProt</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Meta</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>CustomIcons</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIcons</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Meta</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>CustomIcon</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomIconItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>customIconID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>PwIconCustom</name></type> <name>icon</name> <init>= <expr><operator>new</operator> <call><name>PwIconCustom</name><argument_list>(<argument><expr><name>customIconID</name></expr></argument>, <argument><expr><name>customIconData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>customIcons</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>iconFactory</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert></block_content></block></else></if_stmt>
			
			<expr_stmt><expr><name>customIconID</name> <operator>=</operator> <name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>customIconData</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>CustomIcons</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>Binaries</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBinaries</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Meta</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>CustomData</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Meta</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>CustomDataItem</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>customDataKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>customDataValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>customData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>customDataKey</name></expr></argument>, <argument><expr><name>customDataValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert></block_content></block></else></if_stmt>
			
			<expr_stmt><expr><name>customDataKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>customDataValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>CustomData</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>Group</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name><name>ctxGroup</name><operator>.</operator><name>uuid</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>ctxGroup</name><operator>.</operator><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxGroup</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><call><name><name>ctxGroups</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if <condition>( <expr><call><name><name>ctxGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxGroup</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
				<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Root</name></name></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>ctxGroup</name> <operator>=</operator> <call><name><name>ctxGroups</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>GroupTimes</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>GroupCustomData</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>GroupCustomDataItem</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>groupCustomDataKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>groupCustomDataValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>ctxGroup</name><operator>.</operator><name>customData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>groupCustomDataKey</name></expr></argument>, <argument><expr><name>groupCustomDataKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>groupCustomDataKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>groupCustomDataValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>GroupCustomData</name></name></expr>;</return>

		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>Entry</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemEntry</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name><name>ctxEntry</name><operator>.</operator><name>uuid</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>ctxEntry</name><operator>.</operator><name>uuid</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>ctxEntry</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<if_stmt><if>if <condition>( <expr><name>entryInHistory</name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>ctxEntry</name> <operator>=</operator> <name>ctxHistoryBase</name></expr>;</expr_stmt>
				<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>EntryHistory</name></name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Group</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryTimes</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryString</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemString</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctxEntry</name><operator>.</operator><name>strings</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ctxStringName</name></expr></argument>, <argument><expr><name>ctxStringValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxStringName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxStringValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryBinary</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctxEntry</name><operator>.</operator><name>binaries</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ctxBinaryName</name></expr></argument>, <argument><expr><name>ctxBinaryValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxBinaryName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxBinaryValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryAutoType</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoType</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryAutoTypeItem</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemAutoTypeItem</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctxEntry</name><operator>.</operator><name>autoType</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ctxATName</name></expr></argument>, <argument><expr><name>ctxATSeq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxATName</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ctxATSeq</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>EntryAutoType</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryCustomData</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryCustomDataItem</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>entryCustomDataKey</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>entryCustomDataValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>ctxEntry</name><operator>.</operator><name>customData</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>entryCustomDataKey</name></expr></argument>, <argument><expr><name>entryCustomDataValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>entryCustomDataKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>entryCustomDataValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>EntryCustomData</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>EntryHistory</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemHistory</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>entryInHistory</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Entry</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>RootDeletedObjects</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDeletedObjects</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>Root</name></name></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ctx</name> <operator>==</operator> <name><name>KdbContext</name><operator>.</operator><name>DeletedObject</name></name> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ElemDeletedObject</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>ctxDeletedObject</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
			<return>return <expr><name><name>KdbContext</name><operator>.</operator><name>RootDeletedObjects</name></name></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>

			<decl_stmt><decl><type><name>String</name></type> <name>contextName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>contextName</name> <operator>=</operator> <call><name><name>ctx</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Invalid end element: Context "</literal> <operator>+</operator>  <name>contextName</name> <operator>+</operator> <literal type="string">"End element: "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>Date</name></type> <name>ReadTime</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>sDate</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Date</name></type> <name>utcDate</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>sDate</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf8</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>buf8</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readLong</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>utcDate</name> <operator>=</operator> <call><name><name>DateUtil</name><operator>.</operator><name>convertKDBX4Time</name></name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <else>else <block>{<block_content>

			<try>try <block>{<block_content>
				<expr_stmt><expr><name>utcDate</name> <operator>=</operator> <call><name><name>PwDatabaseV4XML</name><operator>.</operator><name>dateFormatter</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><name>sDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<comment type="line">// Catch with null test below</comment>
			</block_content>}</block></catch></try>

			<if_stmt><if>if <condition>(<expr><name>utcDate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>utcDate</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		
		<return>return <expr><name>utcDate</name></expr>;</return>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>ReadUnknown</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</assert>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>isEmptyElementTag</name></name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>unknownName</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ProcessNode</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<while>while <condition>(<expr><call><name><name>xpp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>XmlPullParser</name><operator>.</operator><name>END_DOCUMENT</name></name></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>XmlPullParser</name><operator>.</operator><name>END_TAG</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>XmlPullParser</name><operator>.</operator><name>START_TAG</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
			
			<expr_stmt><expr><call><name>ReadUnknown</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<assert>assert<expr><operator>(</operator><call><name><name>xpp</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>unknownName</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</assert>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>ReadBool</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>bDefault</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>str</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>str</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><name>bDefault</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>UUID</name></type> <name>ReadUuid</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>encoded</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>encoded</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><name><name>PwDatabaseV4</name><operator>.</operator><name>UUID_ZERO</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>int</name></type> <name>ReadInt</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>def</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		
		<return>return <expr><name>u</name></expr>;</return>
	</block_content>}</block></function>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>MAX_UINT</name> <init>= <expr><literal type="number">4294967296L</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 2^32</comment>
	<function><type><specifier>private</specifier> <name>long</name></type> <name>ReadUInt</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>uDefault</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type> <name>u</name></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>ReadULong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>uDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>u</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>u</name> <operator>&gt;</operator> <name>MAX_UINT</name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>NumberFormatException</name><argument_list>(<argument><expr><literal type="string">"Outside of the uint size"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>u</name></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>long</name></type> <name>ReadLong</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>def</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>u</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch<parameter_list>( <parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		
		<return>return <expr><name>u</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>long</name></type> <name>ReadULong</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>uDefault</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type> <name>u</name> <init>= <expr><call><name>ReadLong</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>, <argument><expr><name>uDefault</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>u</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>u</name> <operator>=</operator> <name>uDefault</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>u</name></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>ProtectedString</name></type> <name>ReadProtectedString</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>ProcessNode</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>buf</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<try>try <block>{<block_content>
				<return>return <expr><operator>new</operator> <call><name>ProtectedString</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try> 
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>ProtectedString</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>ProtectedBinary</name></type> <name>ReadProtectedBinary</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>ref</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xpp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Consume end tag</comment>

			<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt> 
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>compressed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>comp</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrCompressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>compressed</name> <operator>=</operator> <call><name><name>comp</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ValTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>ProcessNode</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>buf</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>new</operator> <call><name>ProtectedBinary</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>base64</name> <init>= <expr><call><name>ReadString</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>base64</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name><name>ProtectedBinary</name><operator>.</operator><name>EMPTY</name></name></expr>;</return></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>base64</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>compressed</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>MemUtil</name><operator>.</operator><name>decompress</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><operator>new</operator> <call><name>ProtectedBinary</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>ReadString</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>XmlPullParserException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>ProcessNode</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>buf</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<try>try <block>{<block_content>
				<return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">//readNextNode = false;</comment>
		<return>return <expr><call><name><name>xpp</name><operator>.</operator><name>nextText</name></name><argument_list>()</argument_list></call></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>ReadStringRaw</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		
		<comment type="line">//readNextNode = false;</comment>
		<return>return <expr><call><name><name>xpp</name><operator>.</operator><name>nextText</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ProcessNode</name><parameter_list>(<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><call><name><name>xpp</name><operator>.</operator><name>getEventType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>XmlPullParser</name><operator>.</operator><name>START_TAG</name></name><operator>)</operator></expr>;</assert>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>getAttributeCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>protect</name> <init>= <expr><call><name><name>xpp</name><operator>.</operator><name>getAttributeValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrProtected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>( <expr><name>protect</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>protect</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>ValTrue</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>encrypted</name> <init>= <expr><call><name>ReadStringRaw</name><argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				
				<if_stmt><if>if <condition>( <expr><call><name><name>encrypted</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encrypted</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>plainText</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					
					<expr_stmt><expr><call><name><name>randomStream</name><operator>.</operator><name>processBytes</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>plainText</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					<return>return <expr><name>plainText</name></expr>;</return>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>buf</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>KdbContext</name></type> <name>SwitchContext</name><parameter_list>(<parameter><decl><type><name>KdbContext</name></type> <name>ctxCurrent</name></decl></parameter>, <parameter><decl><type><name>KdbContext</name></type> <name>ctxNew</name></decl></parameter>,
			<parameter><decl><type><name>XmlPullParser</name></type> <name>xpp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>XmlPullParserException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<if_stmt><if>if <condition>( <expr><call><name><name>xpp</name><operator>.</operator><name>isEmptyElementTag</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xpp</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Consume the end tag</comment>
			<return>return <expr><name>ctxCurrent</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>ctxNew</name></expr>;</return>
	</block_content>}</block></function>


	<function><type><specifier>private</specifier> <name>Boolean</name></type> <name>StringToBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>str</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>trimmed</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>trimmed</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>trimmed</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/load/ImporterV4Debug.java" hash="61775e7da347570895e320a8c7a5da6c143f9eb4"><comment type="block">/*
 * Copyright 2011-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>load</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>UpdateStatus</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4Debug</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>InvalidDBException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>ImporterV4Debug</name> <super_list><extends>extends <super><name>ImporterV4</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>ImporterV4Debug</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>streamDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>streamDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>PwDatabaseV4Debug</name></type> <name>createDB</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwDatabaseV4Debug</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwDatabaseV4Debug</name></type> <name>openDatabase</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inStream</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>,
			<parameter><decl><type><name>InputStream</name></type> <name>keyInputFile</name></decl></parameter>, <parameter><decl><type><name>UpdateStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>roundsFix</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
			<argument><expr><name>InvalidDBException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>PwDatabaseV4Debug</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>openDatabase</name></name><argument_list>(<argument><expr><name>inStream</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>keyInputFile</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
				<argument><expr><name>roundsFix</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbHeaderOutput.java" hash="01bfe8d20676404ceb2cd7a39b072130fe5f7d37"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<class><specifier>public</specifier> class <name>PwDbHeaderOutput</name> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashOfHeader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getHashOfHeader</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>hashOfHeader</name></expr>;</return> </block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbHeaderOutputV3.java" hash="7b6b5e8f37e3854b323e5b2cd88968d62c25a2b8"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>


<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbHeaderOutputV3</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDbHeaderV3</name></type> <name>mHeader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>mOS</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwDbHeaderOutputV3</name><parameter_list>(<parameter><decl><type><name>PwDbHeaderV3</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mHeader</name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mOS</name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>outputStart</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>signature1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>signature2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>masterSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>numGroups</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>numEntries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>outputContentHash</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>contentsHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>outputEnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>transformSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mHeader</name><operator>.</operator><name>numKeyEncRounds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>outputStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>outputContentHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>outputEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbHeaderOutputV4.java" hash="72782fbd073ef62c6a88df48a714c8e3698c9ba7"><comment type="block">/*
 * Copyright 2012-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>collections</name><operator>.</operator><name>VariantDictionary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfParameters</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbHeaderV4Fields</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HmacBlockStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>MacOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbHeaderOutputV4</name> <super_list><extends>extends <super><name>PwDbHeaderOutput</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDbHeaderV4</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>LEDataOutputStream</name></type> <name>los</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MacOutputStream</name></type> <name>mos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>DigestOutputStream</name></type> <name>dos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabaseV4</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>headerHmac</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EndHeaderValue</name> <init>= <expr><block>{<expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwDbHeaderOutputV4</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>PwDbHeaderV4</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>db</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>header</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>makeFinalKey</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>kdfParameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
		    <throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>signingKey</name> <init>= <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><call><name><name>HmacBlockStream</name><operator>.</operator><name>GetHmacKey64</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>hmacKey</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ULONG_MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>signingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<expr_stmt><expr><name>dos</name> <operator>=</operator> <operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mos</name> <operator>=</operator> <operator>new</operator> <call><name>MacOutputStream</name><argument_list>(<argument><expr><name>dos</name></expr></argument>, <argument><expr><name>hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>los</name> <operator>=</operator> <operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>mos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUInt</name></name><argument_list>(<argument><expr><name><name>PwDbHeader</name><operator>.</operator><name>PWM_DBSIG_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUInt</name></name><argument_list>(<argument><expr><name><name>PwDbHeaderV4</name><operator>.</operator><name>DBSIG_2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUInt</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>CipherID</name></name></expr></argument>, <argument><expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>dataCipher</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>CompressionFlags</name></name></expr></argument>, <argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>compressionAlgorithm</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>MasterSeed</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>masterSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>TransformSeed</name></name></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>getTransformSeed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>TransformRounds</name></name></expr></argument>, <argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLongBuf</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>numKeyEncRounds</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>KdfParameters</name></name></expr></argument>, <argument><expr><call><name><name>KdfParameters</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>kdfParameters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>encryptionIV</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>EncryptionIV</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>InnerRandomstreamKey</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>StreamStartBytes</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>streamStartBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>InnerRandomStreamID</name></name></expr></argument>, <argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStream</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>publicCustomData</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LEDataOutputStream</name></type> <name>los</name> <init>= <expr><operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>VariantDictionary</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>publicCustomData</name></name></expr></argument>, <argument><expr><name>los</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>PublicCustomData</name></name></expr></argument>, <argument><expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>writeHeaderField</name><argument_list>(<argument><expr><name><name>PwDbHeaderV4Fields</name><operator>.</operator><name>EndOfHeader</name></name></expr></argument>, <argument><expr><name>EndHeaderValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashOfHeader</name> <operator>=</operator> <call><name><name>dos</name><operator>.</operator><name>getMessageDigest</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>digest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>headerHmac</name> <operator>=</operator> <call><name><name>mos</name><operator>.</operator><name>getMac</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeHeaderField</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>fieldId</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbData</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">// Write the field id</comment>
		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>fieldId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>pbData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeHeaderFieldSize</name><argument_list>(<argument><expr><name><name>pbData</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>pbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
		    <expr_stmt><expr><call><name>writeHeaderFieldSize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeHeaderFieldSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUShort</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbInnerHeaderOutputV4.java" hash="59a9836fe8910f0ee1454ff7b9fa78a0751ba87c"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name><operator>.</operator><name>KdbxBinaryFlags</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name><operator>.</operator><name>PwDbInnerHeaderV4Fields</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbInnerHeaderOutputV4</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabaseV4</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PwDbHeaderV4</name></type> <name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LEDataOutputStream</name></type> <name>los</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PwDbInnerHeaderOutputV4</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwDbHeaderV4</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>los</name></name> <operator>=</operator> <operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>InnerRandomStreamID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStream</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>streamKeySize</name> <init>= <expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>InnerRandomstreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>streamKeySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>innerRandomStreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ProtectedBinary</name></type> <name>bin</name> <range>: <expr><call><name><name>db</name><operator>.</operator><name>binPool</name><operator>.</operator><name>binaries</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>byte</name></type> <name>flag</name> <init>= <expr><name><name>KdbxBinaryFlags</name><operator>.</operator><name>None</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>bin</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name><name>KdbxBinaryFlags</name><operator>.</operator><name>Protected</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>Binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>bin</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>bin</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>binLength</name> <init>= <expr><call><name><name>bin</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyStream</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>los</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>PwDbInnerHeaderV4Fields</name><operator>.</operator><name>EndOfHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbOutput.java" hash="8913a822b4ab81170f35cd1fbf9dbe13a9596c62"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>PwDbOutput</name> <block>{
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>OutputStream</name></type> <name>mOS</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwDbOutput</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwDatabase</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>pm</name> <operator>instanceof</operator> <name>PwDatabaseV3</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwDbV3Output</name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV3</name><operator>)</operator><name>pm</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>pm</name> <operator>instanceof</operator> <name>PwDatabaseV4</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwDbV4Output</name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator><name>pm</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>
	
	<constructor><specifier>protected</specifier> <name>PwDbOutput</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mOS</name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>protected</specifier> <name>SecureRandom</name></type> <name>setIVs</name><parameter_list>(<parameter><decl><type><name>PwDbHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws>  <block>{<block_content>
		<decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>random</name> <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Does not support secure random number generation."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>masterSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>random</name></expr>;</return>
	</block_content>}</block></function>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws>;</function_decl>
	
	<function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>PwDbHeader</name></type> <name>outputHeader</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws>;</function_decl>
	
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbV3Output.java" hash="a338ea46c7fc2b8abbbbd0a76aa8c2c4c1ba84e2"><comment type="block">/*
` * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherOutputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEncryptionAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>NullOutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbV3Output</name> <super_list><extends>extends <super><name>PwDbOutput</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabaseV3</name></type> <name>mPM</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>headerHashBlock</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PwDbV3Output</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mPM</name> <operator>=</operator> <name>pm</name></expr>;</expr_stmt>

	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getFinalKey</name><parameter_list>(<parameter><decl><type><name>PwDbHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<try>try <block>{<block_content>
			<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>h3</name> <init>= <expr><operator>(</operator><name>PwDbHeaderV3</name><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>mPM</name><operator>.</operator><name>makeFinalKey</name></name><argument_list>(<argument><expr><name><name>h3</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><name><name>h3</name><operator>.</operator><name>transformSeed</name></name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>numKeyEncRounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>mPM</name><operator>.</operator><name>finalKey</name></name></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Key creation failed: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>prepForOutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwDbHeader</name></type> <name>header</name> <init>= <expr><call><name>outputHeader</name><argument_list>(<argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>finalKey</name> <init>= <expr><call><name>getFinalKey</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>mPM</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS5Padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mPM</name><operator>.</operator><name>algorithm</name></name> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Twofish</name></name></expr>)</condition><block>{<block_content>
				<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"Twofish/CBC/PKCS7PADDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>()</argument_list></call></expr>;</throw>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Algorithm not supported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>( <argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>finalKey</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>CipherOutputStream</name></type> <name>cos</name> <init>= <expr><operator>new</operator> <call><name>CipherOutputStream</name><argument_list>(<argument><expr><name>mOS</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><name>cos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>outputPlanGroupAndEntries</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Invalid key"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm parameter."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to output final encrypted part."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>prepForOutput</name><parameter_list>()</parameter_list> <block>{<block_content>
		<comment type="line">// Before we output the header, we should sort our list of groups and remove any orphaned nodes that are no longer part of the group hierarchy</comment>
		<expr_stmt><expr><call><name>sortGroupsForOutput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>SecureRandom</name></type> <name>setIVs</name><parameter_list>(<parameter><decl><type><name>PwDbHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>setIVs</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>h3</name> <init>= <expr><operator>(</operator><name>PwDbHeaderV3</name><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>h3</name><operator>.</operator><name>transformSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>random</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>PwDbHeaderV3</name></type> <name>outputHeader</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">// Build header</comment>
		<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>header</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderV3</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>signature1</name></name> <operator>=</operator> <name><name>PwDbHeader</name><operator>.</operator><name>PWM_DBSIG_1</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>signature2</name></name> <operator>=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>DBSIG_2</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>FLAG_SHA2</name></name></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>mPM</name><operator>.</operator><name>getEncAlgorithm</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>header</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>FLAG_RIJNDAEL</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><call><name><name>mPM</name><operator>.</operator><name>getEncAlgorithm</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Twofish</name></name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>header</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>FLAG_TWOFISH</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Unsupported algorithm."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>PwDbHeaderV3</name><operator>.</operator><name>DBVER_DW</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>numGroups</name></name> <operator>=</operator> <call><name><name>mPM</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>numEntries</name></name> <operator>=</operator> <call><name><name>mPM</name><operator>.</operator><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>numKeyEncRounds</name></name> <operator>=</operator> <call><name><name>mPM</name><operator>.</operator><name>getNumKeyEncRecords</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setIVs</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Content checksum</comment>
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<comment type="line">// Header checksum</comment>
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>headerDigest</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>headerDigest</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		<decl_stmt><decl><type><name>NullOutputStream</name></type> <name>nos</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>nos</name> <operator>=</operator> <operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>headerDos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>headerDigest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Output header for the purpose of calculating the header checksum</comment>
		<decl_stmt><decl><type><name>PwDbHeaderOutputV3</name></type> <name>pho</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderOutputV3</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>headerDos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>outputStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>outputEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>headerDos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerHash</name> <init>= <expr><call><name><name>headerDigest</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>headerHashBlock</name> <operator>=</operator> <call><name>getHeaderHashBuffer</name><argument_list>(<argument><expr><name>headerHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Output database for the purpose of calculating the content checksum</comment>
		<expr_stmt><expr><name>nos</name> <operator>=</operator> <operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name>outputPlanGroupAndEntries</name><argument_list>(<argument><expr><name>bos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to generate checksum."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>

		<expr_stmt><expr><name><name>header</name><operator>.</operator><name>contentsHash</name></name> <operator>=</operator> <call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Output header for real output, containing content hash</comment>
		<expr_stmt><expr><name>pho</name> <operator>=</operator> <operator>new</operator> <call><name>PwDbHeaderOutputV3</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>outputStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>outputContentHash</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>on</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>outputEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>dos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<return>return <expr><name>header</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>outputPlanGroupAndEntries</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws>  <block>{<block_content>
		<decl_stmt><decl><type><name>LEDataOutputStream</name></type> <name>los</name> <init>= <expr><operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>useHeaderHash</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>headerHashBlock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
		    <try>try <block>{<block_content>
			    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUShort</name></name><argument_list>(<argument><expr><literal type="number">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>headerHashBlock</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>headerHashBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			    <throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to output header hash: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		    </block_content>}</block></catch></try>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Groups</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groups</name> <init>= <expr><call><name><name>mPM</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>groups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV3</name></type> <name>pg</name> <init>= <expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>groups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PwGroupOutputV3</name></type> <name>pgo</name> <init>= <expr><operator>new</operator> <call><name>PwGroupOutputV3</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>pgo</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to output a group: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
		</block_content>}</block></for>
		
		<comment type="line">// Entries</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>mPM</name><operator>.</operator><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntryV3</name></type> <name>pe</name> <init>= <expr><operator>(</operator><name>PwEntryV3</name><operator>)</operator> <call><name><name>mPM</name><operator>.</operator><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PwEntryOutputV3</name></type> <name>peo</name> <init>= <expr><operator>new</operator> <call><name>PwEntryOutputV3</name><argument_list>(<argument><expr><name>pe</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>peo</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to output an entry."</literal></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>sortGroupsForOutput</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groupList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<comment type="line">// Rebuild list according to coalation sorting order removing any orphaned groups</comment>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>roots</name> <init>= <expr><call><name><name>mPM</name><operator>.</operator><name>getGrpRoots</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>roots</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<expr_stmt><expr><call><name>sortGroup</name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>roots</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>groupList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>mPM</name><operator>.</operator><name>setGroups</name></name><argument_list>(<argument><expr><name>groupList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>sortGroup</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>groupList</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Add current group</comment>
		<expr_stmt><expr><call><name><name>groupList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Recurse over children</comment>
		<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>group</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>
			<expr_stmt><expr><call><name>sortGroup</name><argument_list>(<argument><expr><operator>(</operator><name>PwGroupV3</name><operator>)</operator> <call><name><name>group</name><operator>.</operator><name>childGroups</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>groupList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getHeaderHashBuffer</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerDigest</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name>writeExtData</name><argument_list>(<argument><expr><name>headerDigest</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeExtData</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerDigest</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>LEDataOutputStream</name></type> <name>los</name> <init>= <expr><operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
	    <expr_stmt><expr><call><name>writeExtDataField</name><argument_list>(<argument><expr><name>los</name></expr></argument>, <argument><expr><literal type="number">0x0001</literal></expr></argument>, <argument><expr><name>headerDigest</name></expr></argument>, <argument><expr><name><name>headerDigest</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerRandom</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>SecureRandom</name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>rand</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>headerRandom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>writeExtDataField</name><argument_list>(<argument><expr><name>los</name></expr></argument>, <argument><expr><literal type="number">0x0002</literal></expr></argument>, <argument><expr><name>headerRandom</name></expr></argument>, <argument><expr><name><name>headerRandom</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>writeExtDataField</name><argument_list>(<argument><expr><name>los</name></expr></argument>, <argument><expr><literal type="number">0xFFFF</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeExtDataField</name><parameter_list>(<parameter><decl><type><name>LEDataOutputStream</name></type> <name>los</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fieldType</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fieldSize</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeUShort</name></name><argument_list>(<argument><expr><name>fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>fieldSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name><name>los</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>protected</specifier> <name>boolean</name></type> <name>useHeaderHash</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbV3OutputDebug.java" hash="2d60c343a19a953608336b58ada26e3dfc1a8b30"><comment type="block">/*
 * Copyright 2011-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3Debug</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbV3OutputDebug</name> <super_list><extends>extends <super><name>PwDbV3Output</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><name>PwDatabaseV3Debug</name></type> <name>debugDb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>noHeaderHash</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>PwDbV3OutputDebug</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PwDbV3OutputDebug</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV3</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>noHeaderHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pm</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>debugDb</name> <operator>=</operator> <operator>(</operator><name>PwDatabaseV3Debug</name><operator>)</operator> <name>pm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>noHeaderHash</name></name> <operator>=</operator> <name>noHeaderHash</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>SecureRandom</name></type> <name>setIVs</name><parameter_list>(<parameter><decl><type><name>PwDbHeader</name></type> <name>h</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>header</name> <init>= <expr><operator>(</operator><name>PwDbHeaderV3</name><operator>)</operator> <name>h</name></expr></init></decl>;</decl_stmt>
		
		
		<comment type="line">// Reuse random values to test equivalence in debug mode</comment>
		<decl_stmt><decl><type><name>PwDbHeaderV3</name></type> <name>origHeader</name> <init>= <expr><name><name>debugDb</name><operator>.</operator><name>dbHeader</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>origHeader</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>origHeader</name><operator>.</operator><name>encryptionIV</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>origHeader</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>masterSeed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>origHeader</name><operator>.</operator><name>masterSeed</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>origHeader</name><operator>.</operator><name>transformSeed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>transformSeed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>origHeader</name><operator>.</operator><name>transformSeed</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>boolean</name></type> <name>useHeaderHash</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>!</operator><name>noHeaderHash</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwDbV4Output.java" hash="2774d0c043e2ad420de219cad6542b016a0b3b50"><comment type="block">/*
 * Copyright 2013-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Xml</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>PwStreamCipherFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>engine</name><operator>.</operator><name>CipherEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfEngine</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>keyDerivation</name><operator>.</operator><name>KdfFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>CrsAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>EntryHandler</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupHandler</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>ITimeLogger</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwCompressionAlgorithm</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name><operator>.</operator><name>MemoryProtectionConfig</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDbHeaderV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDefsV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDeletedObject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name><operator>.</operator><name>AutoType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwIconCustom</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>PwDbOutputException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedBinary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HashedBlockOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>HmacBlockOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>DateUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>MemUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>spongycastle</name><operator>.</operator><name>crypto</name><operator>.</operator><name>StreamCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>xmlpull</name><operator>.</operator><name>v1</name><operator>.</operator><name>XmlSerializer</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherOutputStream</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>AttrCompressed</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>AttrId</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>AttrProtected</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>AttrRef</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemAutoType</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemAutoTypeDefaultSeq</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemAutoTypeEnabled</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemAutoTypeItem</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemAutoTypeObfuscation</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemBgColor</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemBinaries</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemBinary</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCreationTime</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomData</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomIconID</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomIconItem</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomIconItemData</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomIconItemID</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemCustomIcons</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbColor</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbDefaultUser</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbDefaultUserChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbDesc</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbDescChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbKeyChangeForce</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbKeyChangeRec</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbKeyChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbMntncHistoryDays</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbName</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDbNameChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDeletedObject</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDeletedObjects</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDeletionTime</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemDocNode</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemEnableAutoType</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemEnableSearching</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemEntry</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemEntryTemplatesGroup</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemEntryTemplatesGroupChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemExpires</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemExpiryTime</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemFgColor</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemGenerator</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemGroup</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemGroupDefaultAutoTypeSeq</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemHeaderHash</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemHistory</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemHistoryMaxItems</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemHistoryMaxSize</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemIcon</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemIsExpanded</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemKey</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemKeystrokeSequence</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLastAccessTime</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLastModTime</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLastSelectedGroup</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLastTopVisibleEntry</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLastTopVisibleGroup</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemLocationChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemMemoryProt</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemMeta</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemName</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemNotes</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemOverrideUrl</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemProtNotes</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemProtPassword</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemProtTitle</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemProtURL</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemProtUserName</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemRecycleBinChanged</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemRecycleBinEnabled</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemRecycleBinUuid</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemRoot</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemString</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemStringDictExItem</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemTags</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemTimes</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemUsageCount</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemUuid</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemValue</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ElemWindow</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ValFalse</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4XML</name><operator>.</operator><name>ValTrue</name></name>;</import>

<class><specifier>public</specifier> class <name>PwDbV4Output</name> <super_list><extends>extends <super><name>PwDbOutput</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><name>PwDatabaseV4</name></type> <name>mPM</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>StreamCipher</name></type> <name>randomStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>XmlSerializer</name></type> <name>xml</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDbHeaderV4</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>hashOfHeader</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>headerHmac</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CipherEngine</name></type> <name>engine</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>protected</specifier> <name>PwDbV4Output</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>pm</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mPM</name> <operator>=</operator> <name>pm</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>

        <try>try <block>{<block_content>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>engine</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>mPM</name><operator>.</operator><name>dataCipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"No such cipher"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>

			<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator><name>PwDbHeaderV4</name><operator>)</operator> <call><name>outputHeader</name><argument_list>(<argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>OutputStream</name></type> <name>osPlain</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>CipherOutputStream</name></type> <name>cos</name> <init>= <expr><call><name>attachStreamEncryptor</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>cos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>streamStartBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>HashedBlockOutputStream</name></type> <name>hashed</name> <init>= <expr><operator>new</operator> <call><name>HashedBlockOutputStream</name><argument_list>(<argument><expr><name>cos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>osPlain</name> <operator>=</operator> <name>hashed</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>hashOfHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>headerHmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>HmacBlockOutputStream</name></type> <name>hbos</name> <init>= <expr><operator>new</operator> <call><name>HmacBlockOutputStream</name><argument_list>(<argument><expr><name>mOS</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>hmacKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>osPlain</name> <operator>=</operator> <call><name>attachStreamEncryptor</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>hbos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<decl_stmt><decl><type><name>OutputStream</name></type> <name>osXml</name></decl>;</decl_stmt>
			<try>try <block>{<block_content>


				<if_stmt><if>if <condition>(<expr><name><name>mPM</name><operator>.</operator><name>compressionAlgorithm</name></name> <operator>==</operator> <name><name>PwCompressionAlgorithm</name><operator>.</operator><name>Gzip</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>osXml</name> <operator>=</operator> <operator>new</operator> <call><name>GZIPOutputStream</name><argument_list>(<argument><expr><name>osPlain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><name>osXml</name> <operator>=</operator> <name>osPlain</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>PwDbInnerHeaderOutputV4</name></type> <name>ihOut</name> <init>=  <expr><operator>new</operator> <call><name>PwDbInnerHeaderOutputV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator><name>mPM</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>osXml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ihOut</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>


				<expr_stmt><expr><call><name>outputDatabase</name><argument_list>(<argument><expr><name>osXml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>osXml</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalStateException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<class><specifier>private</specifier> class <name>GroupWriter</name> <super_list><extends>extends <super><name><name>GroupHandler</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name></type> <name>groupStack</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>GroupWriter</name><parameter_list>(<parameter><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name></type> <name>gs</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>groupStack</name> <operator>=</operator> <name>gs</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>g</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name>g</name></expr></init></decl>;</decl_stmt>
			<assert>assert<expr><operator>(</operator><name>group</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
			
			<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
				<try>try <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>group</name><operator>.</operator><name>parent</name></name> <operator>==</operator> <call><name><name>groupStack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name><name>groupStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>startGroup</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if> <else>else <block>{<block_content>
						<expr_stmt><expr><call><name><name>groupStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><call><name><name>groupStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>endGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
				</block_content>}</block></catch></try>
			</block_content>}</block></while>
			
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></function>
	}</block></class>
	
	<class><specifier>private</specifier> class <name>EntryWriter</name> <super_list><extends>extends <super><name><name>EntryHandler</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>boolean</name></type> <name>operate</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>PwEntryV4</name></type> <name>entry</name> <init>= <expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator> <name>e</name></expr></init></decl>;</decl_stmt>
			<assert>assert<expr><operator>(</operator><name>entry</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
			
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name>writeEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
			
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		</block_content>}</block></function>
		
	}</block></class>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>outputDatabase</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<expr_stmt><expr><name>xml</name> <operator>=</operator> <call><name><name>Xml</name><operator>.</operator><name>newSerializer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>setOutput</name></name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startDocument</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemDocNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeMeta</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>PwGroupV4</name></type> <name>root</name> <init>= <expr><operator>(</operator><name>PwGroupV4</name><operator>)</operator> <name><name>mPM</name><operator>.</operator><name>rootGroup</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startGroup</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name></type> <name>groupStack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>PwGroupV4</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>groupStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>root</name><operator>.</operator><name>preOrderTraverseTree</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupWriter</name><argument_list>(<argument><expr><name>groupStack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>EntryWriter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Writing groups failed"</literal></expr></argument>)</argument_list></call></expr>;</throw></block_content></block></if></if_stmt>
		
		<while>while <condition>(<expr><call><name><name>groupStack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>groupStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<expr_stmt><expr><call><name>endGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemDeletedObjects</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>deletedObjects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemDocNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endDocument</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeMeta</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemGenerator</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>localizedAppName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>hashOfHeader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemHeaderHash</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>hashOfHeader</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbName</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbNameChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>nameChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbDesc</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>description</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbDescChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>descriptionChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbDefaultUser</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>defaultUserName</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbDefaultUserChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>defaultUserNameChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbMntncHistoryDays</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>maintenanceHistoryDays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbColor</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbKeyChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>keyLastChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbKeyChangeRec</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>keyChangeRecDays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDbKeyChangeForce</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>keyChangeForceDays</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemMemoryProt</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>memoryProtection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeCustomIconList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemRecycleBinEnabled</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>recycleBinEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemRecycleBinUuid</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>recycleBinUUID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemRecycleBinChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>recycleBinChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemEntryTemplatesGroup</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>entryTemplatesGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemEntryTemplatesGroupChanged</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>entryTemplatesGroupChanged</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemHistoryMaxItems</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>historyMaxItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemHistoryMaxSize</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>historyMaxSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLastSelectedGroup</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>lastSelectedGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLastTopVisibleGroup</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>lastTopVisibleGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeBinPool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemCustomData</name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>customData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>CipherOutputStream</name></type> <name>attachStreamEncryptor</name><parameter_list>(<parameter><decl><type><name>PwDbHeaderV4</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<comment type="line">//mPM.makeFinalKey(header.masterSeed, mPM.kdfParameters);</comment>

			<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>engine</name><operator>.</operator><name>getCipher</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><name><name>mPM</name><operator>.</operator><name>finalKey</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Invalid algorithm."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<decl_stmt><decl><type><name>CipherOutputStream</name></type> <name>cos</name> <init>= <expr><operator>new</operator> <call><name>CipherOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><name>cos</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>SecureRandom</name></type> <name>setIVs</name><parameter_list>(<parameter><decl><type><name>PwDbHeader</name></type> <name>header</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>setIVs</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>PwDbHeaderV4</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>PwDbHeaderV4</name><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>masterSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>ivLength</name> <init>= <expr><call><name><name>engine</name><operator>.</operator><name>ivLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ivLength</name> <operator>!=</operator> <name><name>h</name><operator>.</operator><name>encryptionIV</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>encryptionIV</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>ivLength</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>encryptionIV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>UUID</name></type> <name>kdfUUID</name> <init>= <expr><name><name>mPM</name><operator>.</operator><name>kdfParameters</name><operator>.</operator><name>kdfUUID</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>KdfEngine</name></type> <name>kdf</name> <init>= <expr><call><name><name>KdfFactory</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>kdfUUID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>kdf</name><operator>.</operator><name>randomize</name></name><argument_list>(<argument><expr><name><name>mPM</name><operator>.</operator><name>kdfParameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>innerRandomStream</name></name> <operator>=</operator> <name><name>CrsAlgorithm</name><operator>.</operator><name>Salsa20</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><operator>.</operator><name>innerRandomStreamKey</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>innerRandomStream</name></name> <operator>=</operator> <name><name>CrsAlgorithm</name><operator>.</operator><name>ChaCha20</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>h</name><operator>.</operator><name>innerRandomStreamKey</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>innerRandomStreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>randomStream</name> <operator>=</operator> <call><name><name>PwStreamCipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>innerRandomStream</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>innerRandomStreamKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>randomStream</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Invalid random cipher"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>( <expr><name><name>h</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>random</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>streamStartBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>random</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>PwDbHeader</name></type> <name>outputHeader</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PwDbOutputException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDbHeaderV4</name></type> <name>header</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderV4</name><argument_list>(<argument><expr><name>mPM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setIVs</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>PwDbHeaderOutputV4</name></type> <name>pho</name> <init>= <expr><operator>new</operator> <call><name>PwDbHeaderOutputV4</name><argument_list>(<argument><expr><name>mPM</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>pho</name><operator>.</operator><name>output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>PwDbOutputException</name><argument_list>(<argument><expr><literal type="string">"Failed to output the header."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<expr_stmt><expr><name>hashOfHeader</name> <operator>=</operator> <call><name><name>pho</name><operator>.</operator><name>getHashOfHeader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>headerHmac</name> <operator>=</operator> <name><name>pho</name><operator>.</operator><name>headerHmac</name></name></expr>;</expr_stmt>
		
		<return>return <expr><name>header</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>startGroup</name><parameter_list>(<parameter><decl><type><name>PwGroupV4</name></type> <name>group</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemName</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemNotes</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>notes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemIcon</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>icon</name><operator>.</operator><name>iconId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>group</name><operator>.</operator><name>customIcon</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwIconCustom</name><operator>.</operator><name>ZERO</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemCustomIconID</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>customIcon</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemIsExpanded</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>isExpanded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemGroupDefaultAutoTypeSeq</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>defaultAutoTypeSequence</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemEnableAutoType</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>enableAutoType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemEnableSearching</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>enableSearching</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLastTopVisibleEntry</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>lastTopVisibleEntry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>endGroup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeEntry</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isHistory</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>entry</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemIcon</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>icon</name><operator>.</operator><name>iconId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>customIcon</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwIconCustom</name><operator>.</operator><name>ZERO</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemCustomIconID</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>customIcon</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemFgColor</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>foregroundColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemBgColor</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>backgroupColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemOverrideUrl</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>overrideURL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemTags</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemTimes</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>strings</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>binaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemAutoType</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>autoType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isHistory</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeList</name><argument_list>(<argument><expr><name>ElemHistory</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<assert>assert<expr><operator>(</operator><call><name><name>entry</name><operator>.</operator><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ProtectedBinary</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allowRef</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>key</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name>safeXmlString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>strRef</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>allowRef</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>ref</name> <init>= <expr><call><name><name>mPM</name><operator>.</operator><name>binPool</name><operator>.</operator><name>poolFind</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>strRef</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>strRef</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>attribute</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrRef</name></expr></argument>, <argument><expr><name>strRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>subWriteValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>subWriteValue</name><parameter_list>(<parameter><decl><type><name>ProtectedBinary</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>

		<decl_stmt><decl><type><name>int</name></type> <name>valLength</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>valLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>valLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>value</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>attribute</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrProtected</name></expr></argument>, <argument><expr><name>ValTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encoded</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>valLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>randomStream</name><operator>.</operator><name>processBytes</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valLength</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if> <else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>mPM</name><operator>.</operator><name>compressionAlgorithm</name></name> <operator>==</operator> <name><name>PwCompressionAlgorithm</name><operator>.</operator><name>Gzip</name></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>attribute</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrCompressed</name></expr></argument>, <argument><expr><name>ValTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>compressData</name> <init>= <expr><call><name><name>MemUtil</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>compressData</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>filterXmlChars</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>filterXmlChars</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>safeXmlString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>PwDbHeaderV4</name><operator>.</operator><name>FILE_VERSION_32_4</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>PwDatabaseV4XML</name><operator>.</operator><name>dateFormatter</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>DateTime</name></type> <name>dt</name> <init>= <expr><operator>new</operator> <call><name>DateTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><call><name><name>DateUtil</name><operator>.</operator><name>convertDateToKDBX4Time</name></name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLongBuf</name></name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>b64</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>String</name></type> <name>text</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <name>ValTrue</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <name>ValFalse</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyValue</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>valueName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>valueValue</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>keyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name>safeXmlString</name><argument_list>(<argument><expr><name>keyValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>keyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>valueName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name>safeXmlString</name><argument_list>(<argument><expr><name>valueValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>valueName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>AutoType</name></type> <name>autoType</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>autoType</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemAutoTypeEnabled</name></expr></argument>, <argument><expr><name><name>autoType</name><operator>.</operator><name>enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemAutoTypeObfuscation</name></expr></argument>, <argument><expr><name><name>autoType</name><operator>.</operator><name>obfuscationOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>autoType</name><operator>.</operator><name>defaultSequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemAutoTypeDefaultSeq</name></expr></argument>, <argument><expr><name><name>autoType</name><operator>.</operator><name>defaultSequence</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>autoType</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemAutoTypeItem</name></expr></argument>, <argument><expr><name>ElemWindow</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ElemKeystrokeSequence</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>strings</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isEntryString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert <expr><operator>(</operator><name>strings</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedString</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>strings</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isEntryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></for>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>ProtectedString</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isEntryString</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>key</name> <operator>!=</operator><literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name>safeXmlString</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>protect</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>isEntryString</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>TITLE_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>protect</name> <operator>=</operator> <name><name>mPM</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectTitle</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>USERNAME_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>protect</name> <operator>=</operator> <name><name>mPM</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUserName</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>PASSWORD_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>protect</name> <operator>=</operator> <name><name>mPM</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectPassword</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>URL_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>protect</name> <operator>=</operator> <name><name>mPM</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectUrl</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwDefsV4</name><operator>.</operator><name>NOTES_FIELD</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>protect</name> <operator>=</operator> <name><name>mPM</name><operator>.</operator><name>memoryProtection</name><operator>.</operator><name>protectNotes</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>protect</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>attribute</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrProtected</name></expr></argument>, <argument><expr><name>ValTrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>valLength</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>valLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encoded</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>valLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>randomStream</name><operator>.</operator><name>processBytes</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>valLength</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>text</name></name><argument_list>(<argument><expr><call><name>safeXmlString</name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>PwDeletedObject</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemUuid</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDeletionTime</name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>getDeletionTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>binaries</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>binaries</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>binaries</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>


	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwDeletedObject</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>PwDeletedObject</name></type> <name>pdo</name> <range>: <expr><name>value</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemDeletedObject</name></expr></argument>, <argument><expr><name>pdo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MemoryProtectionConfig</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemProtTitle</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>protectTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemProtUserName</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>protectUserName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemProtPassword</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>protectPassword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemProtURL</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>protectUrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemProtNotes</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>protectNotes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>customData</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>customData</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>customData</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemStringDictExItem</name></expr></argument>, <argument><expr><name>ElemKey</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ElemValue</name></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ITimeLogger</name></type> <name>it</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>it</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLastModTime</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getLastModificationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemCreationTime</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getCreationTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLastAccessTime</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getLastAccessTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemExpiryTime</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getExpiryTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemExpires</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>expires</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemUsageCount</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getUsageCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemLocationChanged</name></expr></argument>, <argument><expr><call><name><name>it</name><operator>.</operator><name>getLocationChanged</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntryV4</name></argument>&gt;</argument_list></name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isHistory</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>PwEntryV4</name></type> <name>entry</name> <range>: <expr><name>value</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>writeEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>isHistory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeCustomIconList</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwIconCustom</name></argument>&gt;</argument_list></name></type> <name>customIcons</name> <init>= <expr><name><name>mPM</name><operator>.</operator><name>customIcons</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>customIcons</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemCustomIcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name>PwIconCustom</name></type> <name>icon</name> <range>: <expr><name>customIcons</name></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemCustomIconItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemCustomIconItemID</name></expr></argument>, <argument><expr><name><name>icon</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeObject</name><argument_list>(<argument><expr><name>ElemCustomIconItemData</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>imageData</name></name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemCustomIconItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemCustomIcons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeBinPool</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument>, <argument><expr><name>IllegalStateException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>ProtectedBinary</name></argument>&gt;</argument_list></name></type> <name>pair</name> <range>: <expr><call><name><name>mPM</name><operator>.</operator><name>binPool</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>startTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>attribute</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>AttrId</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>subWriteValue</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></for>
		
		<expr_stmt><expr><call><name><name>xml</name><operator>.</operator><name>endTag</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ElemBinaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>String</name></type> <name>safeXmlString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>text</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="number">0xD7FF</literal><operator>)</operator><operator>)</operator> <operator>||</operator>              
			        <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">0x9</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">0xA</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="number">0xD</literal><operator>)</operator> <operator>||</operator>
			        <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xE000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="number">0xFFFD</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				
				<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></for>
		
		<return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwEntryOutputV3.java" hash="113ad433da80bbe7f23c0cc2e1377bed33846193"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<class><specifier>public</specifier> class <name>PwEntryOutputV3</name> <block>{
	<comment type="line">// Constants</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>UUID_FIELD_TYPE</name> <init>=     <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>GROUPID_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>IMAGEID_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>TITLE_FIELD_TYPE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>URL_FIELD_TYPE</name> <init>=      <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>USERNAME_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>PASSWORD_FIELD_TYPE</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ADDITIONAL_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>CREATE_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>MOD_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ACCESS_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EXPIRE_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>BINARY_DESC_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>BINARY_DATA_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>END_FIELD_TYPE</name> <init>=     <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>LONG_FOUR</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>UUID_FIELD_SIZE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>DATE_FIELD_SIZE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>IMAGEID_FIELD_SIZE</name> <init>= <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>LEVEL_FIELD_SIZE</name> <init>=   <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>FLAGS_FIELD_SIZE</name> <init>=   <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ZERO_FIELD_SIZE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ZERO_FIVE</name>       <init>=   <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>TEST</name> <init>= <expr><block>{<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x33</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>mOS</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwEntryV3</name></type> <name>mPE</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>outputBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** Output the PwGroupV3 to the stream
	 * @param pe
	 * @param os
	 */</comment>
	<constructor><specifier>public</specifier> <name>PwEntryOutputV3</name><parameter_list>(<parameter><decl><type><name>PwEntryV3</name></type> <name>pe</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mPE</name> <operator>=</operator> <name>pe</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mOS</name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<comment type="line">//NOTE: Need be to careful about using ints.  The actual type written to file is a unsigned int</comment>
	<function><type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <literal type="number">134</literal></expr>;</expr_stmt>  <comment type="line">// Length of fixed size fields</comment>
		
		<comment type="line">// UUID</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>UUID_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>UUID_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><call><name><name>mPE</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Group ID</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>GROUPID_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>LONG_FOUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Image ID</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>IMAGEID_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>LONG_FOUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>icon</name><operator>.</operator><name>iconId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Title</comment>
		<comment type="line">//byte[] title = mPE.title.getBytes("UTF-8");</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>TITLE_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>titleLen</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>titleLen</name></expr>;</expr_stmt>

		<comment type="line">// URL</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>URL_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>urlLen</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>url</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>urlLen</name></expr>;</expr_stmt>
		
		<comment type="line">// Username</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>USERNAME_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>userLen</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>username</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>userLen</name></expr>;</expr_stmt>
		
		<comment type="line">// Password</comment>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>password</name> <init>= <expr><call><name><name>mPE</name><operator>.</operator><name>getPasswordBytes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>PASSWORD_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>password</name><operator>.</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name><name>password</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="line">// Additional</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ADDITIONAL_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>addlLen</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>additional</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>addlLen</name></expr>;</expr_stmt>

		<comment type="line">// Create date</comment>
		<expr_stmt><expr><call><name>writeDate</name><argument_list>(<argument><expr><name>CREATE_FIELD_TYPE</name></expr></argument>, <argument><expr><call><name><name>mPE</name><operator>.</operator><name>tCreation</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Modification date</comment>
		<expr_stmt><expr><call><name>writeDate</name><argument_list>(<argument><expr><name>MOD_FIELD_TYPE</name></expr></argument>, <argument><expr><call><name><name>mPE</name><operator>.</operator><name>tLastMod</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Access date</comment>
		<expr_stmt><expr><call><name>writeDate</name><argument_list>(<argument><expr><name>ACCESS_FIELD_TYPE</name></expr></argument>, <argument><expr><call><name><name>mPE</name><operator>.</operator><name>tLastAccess</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Expiration date</comment>
		<expr_stmt><expr><call><name>writeDate</name><argument_list>(<argument><expr><name>EXPIRE_FIELD_TYPE</name></expr></argument>, <argument><expr><call><name><name>mPE</name><operator>.</operator><name>tExpire</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="line">// Binary desc</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>BINARY_DESC_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>descLen</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPE</name><operator>.</operator><name>binaryDesc</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>descLen</name></expr>;</expr_stmt>
	
		<comment type="line">// Binary data</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>dataLen</name> <init>= <expr><call><name>writeByteArray</name><argument_list>(<argument><expr><call><name><name>mPE</name><operator>.</operator><name>getBinaryData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>outputBytes</name> <operator>+=</operator> <name>dataLen</name></expr>;</expr_stmt>

		<comment type="line">// End</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>END_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ZERO_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>int</name></type> <name>writeByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>dataLen</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>dataLen</name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>dataLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>BINARY_DATA_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>dataLen</name></expr>;</return>

	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>writeDate</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>date</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>DATE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>date</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ZERO_FIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** Returns the number of bytes written by the stream
	 * @return Number of bytes written
	 */</comment>
	<function><type><specifier>public</specifier> <name>long</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>outputBytes</name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/save/PwGroupOutputV3.java" hash="99cf86a4500f0134c41d6362f399c3913f00e82e"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>save</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>


<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<class><specifier>public</specifier> class <name>PwGroupOutputV3</name> <block>{
	<comment type="line">// Constants</comment>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>GROUPID_FIELD_TYPE</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>NAME_FIELD_TYPE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>CREATE_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>MOD_FIELD_TYPE</name> <init>=     <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ACCESS_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>EXPIRE_FIELD_TYPE</name> <init>=  <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>IMAGEID_FIELD_TYPE</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>LEVEL_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>FLAGS_FIELD_TYPE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>END_FIELD_TYPE</name> <init>=     <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>LONG_FOUR</name> <init>=          <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>GROUPID_FIELD_SIZE</name> <init>= <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>DATE_FIELD_SIZE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>IMAGEID_FIELD_SIZE</name> <init>= <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>LEVEL_FIELD_SIZE</name> <init>=   <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>FLAGS_FIELD_SIZE</name> <init>=   <expr><name>LONG_FOUR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ZERO_FIELD_SIZE</name> <init>=    <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>mOS</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwGroupV3</name></type> <name>mPG</name></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** Output the PwGroupV3 to the stream
	 * @param pg
	 * @param os
	 */</comment>
	<constructor><specifier>public</specifier> <name>PwGroupOutputV3</name><parameter_list>(<parameter><decl><type><name>PwGroupV3</name></type> <name>pg</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mPG</name> <operator>=</operator> <name>pg</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mOS</name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">//NOTE: Need be to careful about using ints.  The actual type written to file is a unsigned int, but most values can't be greater than 2^31, so it probably doesn't matter.</comment>

		<comment type="line">// Group ID</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>GROUPID_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>GROUPID_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mPG</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Name</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>NAME_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>Types</name><operator>.</operator><name>writeCString</name></name><argument_list>(<argument><expr><name><name>mPG</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>mOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Create date</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>CREATE_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>DATE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>mPG</name><operator>.</operator><name>tCreation</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Modification date</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>MOD_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>DATE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>mPG</name><operator>.</operator><name>tLastMod</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Access date</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ACCESS_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>DATE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>mPG</name><operator>.</operator><name>tLastAccess</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Expiration date</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>EXPIRE_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>DATE_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>mPG</name><operator>.</operator><name>tExpire</name><operator>.</operator><name>getCDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Image ID</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>IMAGEID_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>IMAGEID_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mPG</name><operator>.</operator><name>icon</name><operator>.</operator><name>iconId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Level</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>LEVEL_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>LEVEL_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeUShortBuf</name></name><argument_list>(<argument><expr><name><name>mPG</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Flags</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>FLAGS_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>FLAGS_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name><name>mPG</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// End</comment>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>END_FIELD_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mOS</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ZERO_FIELD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/security/ProtectedBinary.java" hash="3e33a1b80fe144447178e10ffa02f26c59d38618"><comment type="block">/*
 * Copyright 2013-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherInputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherOutputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>ProtectedBinary</name> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ProtectedBinary</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>ProtectedBinary</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>ProtectedBinary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>protect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dataFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>SecureRandom</name></type> <name>secureRandom</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>FileParams</name></type> <name>fileParams</name></decl>;</decl_stmt>

	<class><specifier>private</specifier> class <name>FileParams</name> <block>{

		<decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>dataFile</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>CipherOutputStream</name></type> <name>cos</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>SecretKeySpec</name></type> <name>keySpec</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>IvParameterSpec</name></type> <name>ivSpec</name></decl>;</decl_stmt>


		<function><type><specifier>public</specifier> <name>Cipher</name></type> <name>initCipher</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
		    <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name><name>CipherFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CBC/PKCS5Padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>keySpec</name></expr></argument>, <argument><expr><name>ivSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>

			<return>return <expr><name>cipher</name></expr>;</return>
		</block_content>}</block></function>

		<function><type><specifier>public</specifier> <name>void</name></type> <name>setupEnc</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>

			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>secureRandom</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>secureRandom</name><operator>.</operator><name>nextBytes</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>keySpec</name> <operator>=</operator> <operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ivSpec</name> <operator>=</operator> <operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><operator>(</operator><name>iv</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>Cipher</name></type> <name>cipherOut</name> <init>= <expr><call><name>initCipher</name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>fos</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>

			<expr_stmt><expr><name>cos</name> <operator>=</operator> <operator>new</operator> <call><name>CipherOutputStream</name><argument_list>(<argument><expr><name>fos</name></expr></argument>, <argument><expr><name>cipherOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>

		<constructor><specifier>public</specifier> <name>FileParams</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dataFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataFile</name></name> <operator>=</operator> <name>dataFile</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setupEnc</name><argument_list>(<argument><expr><name>dataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></constructor>
	}</block></class>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isProtected</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>protect</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dataFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></function>
	
	<constructor><specifier>private</specifier> <name>ProtectedBinary</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>protect</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataFile</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>ProtectedBinary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableProtection</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>protect</name></name> <operator>=</operator> <name>enableProtection</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataFile</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>ProtectedBinary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableProtection</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>dataFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>protect</name></name> <operator>=</operator> <name>enableProtection</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataFile</name></name> <operator>=</operator> <name>dataFile</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>fileParams</name> <operator>=</operator> <operator>new</operator> <call><name>FileParams</name><argument_list>(<argument><expr><name>dataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>public</specifier> <name>OutputStream</name></type> <name>getOutputStream</name><parameter_list>()</parameter_list> <block>{<block_content>
		<assert>assert<expr><operator>(</operator><name>fileParams</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>
	    <return>return <expr><name><name>fileParams</name><operator>.</operator><name>cos</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>InputStream</name></type> <name>getData</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>dataFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>new</operator> <call><name>CipherInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>dataFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>fileParams</name><operator>.</operator><name>initCipher</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dataFile</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>dataFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unable to delete temp file "</literal> <operator>+</operator> <call><name><name>dataFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>ProtectedBinary</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>this</name> <operator>==</operator> <name>o</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>o</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name>getClass</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>protect</name> <operator>==</operator> <name><name>o</name><operator>.</operator><name>protect</name></name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>==</operator> <name><name>o</name><operator>.</operator><name>size</name></name><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><name>dataFile</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>dataFile</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>dataFile</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/database/security/ProtectedString.java" hash="e675fe1c2f36ba264ec14c9eaf6022a9c7d30baa"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name></name>;</package>

<class><specifier>public</specifier> class <name>ProtectedString</name> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>protect</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isProtected</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>protect</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>string</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<constructor><specifier>public</specifier> <name>ProtectedString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>ProtectedString</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enableProtection</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>protect</name> <operator>=</operator> <name>enableProtection</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
		
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name>string</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/dialog/PasswordEncodingDialogHelper.java" hash="72db9999938a0a3504b2e52c275dcd087c5750c9"><comment type="block">/*
 * Copyright 2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordEncodingDialogHelper</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></type> <name>onclick</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>onclick</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></type> <name>onclick</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showCancel</name></decl></parameter>)</parameter_list> <block>{<block_content>
	    <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>warning_password_encoding</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>, <argument><expr><name>onclick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	    
	    <if_stmt><if>if <condition>(<expr><name>showCancel</name></expr>)</condition> <block>{<block_content>
	    	<expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
				
				<function><annotation>@<name>Override</name></annotation>
				<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    	
	    </block_content>}</block></if></if_stmt>
	    
	    <expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    
	    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/dialog/ReadOnlyDialog.java" hash="3a6f8e9ebd08ab0a7b1ccd64953ec712d5515360"><comment type="block">/*
 * Copyright 2014-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>ReadOnlyDialog</name> <super_list><extends>extends <super><name>WarningDialog</name></super></extends></super_list> <block>{
	
	<constructor><specifier>public</specifier> <name>ReadOnlyDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>show_read_only_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>warning</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>read_only_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>warning</name> <operator>=</operator> <call><name><name>warning</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>concat</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>read_only_kitkat_warning</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/dialog/WarningDialog.java" hash="76b56f9411f35ae9f67f6b2079ce54ce87632bbf"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>WarningDialog</name> <super_list><extends>extends <super><name>AlertDialog</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>String</name></type> <name>warning</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>showKey</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>WarningDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dontShowKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>showKey</name></name> <operator>=</operator> <name>dontShowKey</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>WarningDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>warningKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dontShowKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>dontShowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>warning</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>warningKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Context</name></type> <name>ctx</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON1</name></name></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON2</name></name></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>beta_dontask</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><annotation>@<name>Override</name></annotation>
			<type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>Context</name></type> <name>ctx</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>edit</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>showKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
				<expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/fileselect/BrowserDialog.java" hash="728653dfafaaabed58b7b5c81cfb98aacff4881c"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<class><specifier>public</specifier> class <name>BrowserDialog</name> <super_list><extends>extends <super><name>Dialog</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>BrowserDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>browser_install</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>file_browser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>cancel</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>BrowserDialog</name><operator>.</operator><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>market</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>install_market</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>market</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>oi_filemanager_market</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>BrowserDialog</name><operator>.</operator><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isMarketInstalled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>market</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>web</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>install_web</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>web</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
			
			<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>oi_filemanager_web</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>BrowserDialog</name><operator>.</operator><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>isMarketInstalled</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>pm</name><operator>.</operator><name>getPackageInfo</name></name><argument_list>(<argument><expr><literal type="string">"com.android.vending"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NameNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></catch></try>
		
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/fileselect/FileDbHelper.java" hash="7b9511921594796163014b8c348b90cc450b3740"><comment type="block">/*
 * Copyright 2009-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>

<class><specifier>public</specifier> class <name>FileDbHelper</name> <block>{
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LAST_FILENAME</name> <init>= <expr><literal type="string">"lastFile"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LAST_KEYFILE</name> <init>= <expr><literal type="string">"lastKey"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATABASE_NAME</name> <init>= <expr><literal type="string">"keepassdroid"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FILE_TABLE</name> <init>= <expr><literal type="string">"files"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DATABASE_VERSION</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_FILES</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_ID</name> <init>= <expr><literal type="string">"_id"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_FILENAME</name> <init>= <expr><literal type="string">"fileName"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_KEYFILE</name> <init>= <expr><literal type="string">"keyFile"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_UPDATED</name> <init>= <expr><literal type="string">"updated"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATABASE_CREATE</name> <init>= 
		<expr><literal type="string">"create table "</literal> <operator>+</operator> <name>FILE_TABLE</name> <operator>+</operator> <literal type="string">" ( "</literal> <operator>+</operator> <name>KEY_FILE_ID</name> <operator>+</operator> <literal type="string">" integer primary key autoincrement, "</literal> 
			<operator>+</operator> <name>KEY_FILE_FILENAME</name> <operator>+</operator> <literal type="string">" text not null, "</literal> <operator>+</operator> <name>KEY_FILE_KEYFILE</name> <operator>+</operator> <literal type="string">" text, "</literal>
			<operator>+</operator> <name>KEY_FILE_UPDATED</name> <operator>+</operator> <literal type="string">" integer not null);"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>DatabaseHelper</name></type> <name>mDbHelper</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>SQLiteDatabase</name></type> <name>mDb</name></decl>;</decl_stmt>
	
	<class><specifier>private</specifier> <specifier>static</specifier> class <name>DatabaseHelper</name> <super_list><extends>extends <super><name>SQLiteOpenHelper</name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
		
		<constructor><name>DatabaseHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>DATABASE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>DATABASE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<comment type="line">// Migrate preference to database if it is set.</comment>
			<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name><name>mCtx</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><literal type="string">"PasswordActivity"</literal></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name>String</name></type> <name>lastFile</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>LAST_FILENAME</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>lastKey</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>LAST_KEYFILE</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						
			<if_stmt><if>if <condition>( <expr><call><name><name>lastFile</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>ContentValues</name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_FILENAME</name></expr></argument>, <argument><expr><name>lastFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_UPDATED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<if_stmt><if>if <condition>( <expr><call><name><name>lastKey</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_KEYFILE</name></expr></argument>, <argument><expr><name>lastKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				
				<expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<comment type="line">// Clear old preferences</comment>
				<expr_stmt><expr><call><name>deletePrefs</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></function>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<comment type="line">// Only one database version so far</comment>
		</block_content>}</block></function>
		
		<function><type><specifier>private</specifier> <name>void</name></type> <name>deletePrefs</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<comment type="line">// We won't worry too much if this fails</comment>
			<try>try <block>{<block_content>
				<decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>LAST_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>LAST_KEYFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<assert>assert<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</assert>
			</block_content>}</block></catch></try>
		</block_content>}</block></function>
	}</block></class>
	
	<constructor><specifier>public</specifier> <name>FileDbHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>FileDbHelper</name></type> <name>open</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>mDbHelper</name> <operator>=</operator> <operator>new</operator> <call><name>DatabaseHelper</name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <call><name><name>mDbHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>this</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOpen</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>mDb</name><operator>.</operator><name>isOpen</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>long</name></type> <name>createFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<comment type="line">// Check to see if this filename is already used</comment>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>KEY_FILE_ID</name></expr>}</block></expr></argument>, 
					<argument><expr><name>KEY_FILE_FILENAME</name> <operator>+</operator> <literal type="string">"=?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>fileName</name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{<block_content>
			<assert>assert<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</assert>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></catch></try>
		
		<decl_stmt><decl><type><name>long</name></type> <name>result</name></decl>;</decl_stmt>
		<comment type="line">// If there is an existing entry update it with the new key file</comment>
		<if_stmt><if>if <condition>( <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>KEY_FILE_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name>ContentValues</name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_KEYFILE</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_UPDATED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>, <argument><expr><name>KEY_FILE_ID</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Otherwise add the new entry</comment>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>ContentValues</name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_FILENAME</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_KEYFILE</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_UPDATED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		</block_content>}</block></else></if_stmt>
		<comment type="line">// Delete all but the last five records</comment>
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name>deleteAllBut</name><argument_list>(<argument><expr><name>MAX_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<assert>assert<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</assert>
		</block_content>}</block></catch></try>
		
		<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>result</name></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>deleteAllBut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>mDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>KEY_FILE_UPDATED</name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>KEY_FILE_UPDATED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>limit</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>KEY_FILE_UPDATED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM "</literal> <operator>+</operator> <name>FILE_TABLE</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_FILE_UPDATED</name> <operator>+</operator> <literal type="string">"&lt;"</literal> <operator>+</operator> <name>time</name> <operator>+</operator> <literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>deleteAllKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ContentValues</name></type> <name>vals</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>vals</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_FILE_KEYFILE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>deleteFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mDb</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><name>KEY_FILE_FILENAME</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>filename</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	
	<function><type><specifier>public</specifier> <name>Cursor</name></type> <name>fetchAllFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>ret</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>KEY_FILE_ID</name></expr>, <expr><name>KEY_FILE_FILENAME</name></expr>, <expr><name>KEY_FILE_KEYFILE</name></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>KEY_FILE_UPDATED</name> <operator>+</operator> <literal type="string">" DESC"</literal></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>MAX_FILES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>Cursor</name></type> <name>fetchFile</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>fileId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>mDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>KEY_FILE_FILENAME</name></expr>, <expr><name>KEY_FILE_KEYFILE</name></expr>}</block></expr></argument>, 
				<argument><expr><name>KEY_FILE_ID</name> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <name>fileId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>cursor</name></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getFileByName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>mDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>FILE_TABLE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>KEY_FILE_KEYFILE</name></expr>}</block></expr></argument>, 
				<argument><expr><name>KEY_FILE_FILENAME</name> <operator>+</operator> <literal type="string">"= ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>name</name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>filename</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Cursor is empty</comment>
			<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>filename</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasRecentFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name>fetchAllFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>boolean</name></type> <name>hasRecent</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><name>hasRecent</name></expr>;</return> 
	</block_content>}</block></function>
	
    <comment type="block" format="javadoc">/**
     * Deletes a database including its journal file and other auxiliary files
     * that may have been created by the database engine.
     *
     * @param file The database file path.
     * @return True if the database was successfully deleted.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>deleteDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    	<decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getDatabasePath</name></name><argument_list>(<argument><expr><name>DATABASE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"file must not be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>deleted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>deleted</name> <operator>|=</operator> <call><name><name>file</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleted</name> <operator>|=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-journal"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleted</name> <operator>|=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-shm"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>deleted</name> <operator>|=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-wal"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"-mj"</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>FileFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>candidate</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <return>return <expr><call><name><name>candidate</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>File</name></type> <name>masterJournal</name> <range>: <expr><call><name><name>dir</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>deleted</name> <operator>|=</operator> <call><name><name>masterJournal</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>deleted</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/fileselect/FileSelectActivity.java" hash="9bdd0ec5d1edab9f8d2623a4a2bf5a6a502e516d"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name><operator>.</operator><name>AdapterContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>AboutDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>PasswordActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>ProgressTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>SetPasswordDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>ContentResolverCompat</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>StorageAF</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>CreateDB</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>FileOnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>ContentFileNotFoundException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name><operator>.</operator><name>Intents</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name><operator>.</operator><name>AppSettingsActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Interaction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>PermissionUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>FileNameView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLDecoder</name></name>;</import>

<class><specifier>public</specifier> class <name>FileSelectActivity</name> <super_list><extends>extends <super><name>AppCompatActivity</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ListView</name></type> <name>mList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ListAdapter</name></type> <name>mAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CMENU_CLEAR</name> <init>= <expr><name><name>Menu</name><operator>.</operator><name>FIRST</name></name></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_BROWSE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GET_CONTENT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OPEN_DOC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PERMISSION_REQUEST_ID</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RecentFileHistory</name></type> <name>fileHistory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>recentMode</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>createFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Try to create the file</comment>
        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_database_exists</name></name></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>parent</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>( <expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><call><name><name>parent</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name><name>parent</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_invalid_path</name></name></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>parent</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
                <comment type="line">// Create parent dircetory</comment>
                <if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>parent</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_could_not_create_parent</name></name></expr></argument>,
                            <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>

                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(
                    <argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                    <argument><expr><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_file_not_create</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                            <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getLocalizedMessage</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></catch></try>

        <comment type="line">// Prep an object to collect a password once the database has</comment>
        <comment type="line">// been created</comment>
        <decl_stmt><decl><type><name>CollectPassword</name></type> <name>password</name> <init>= <expr><operator>new</operator> <call><name>CollectPassword</name><argument_list>(
                <argument><expr><operator>new</operator> <call><name>LaunchGroupActivity</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create the new database</comment>
        <decl_stmt><decl><type><name>CreateDB</name></type> <name>create</name> <init>= <expr><operator>new</operator> <call><name>CreateDB</name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProgressTask</name></type> <name>createTask</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(
                <argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>create</name></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>progress_create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>createTask</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>fileHistory</name> <operator>=</operator> <call><name><name>App</name><operator>.</operator><name>getFileHistory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>fileHistory</name><operator>.</operator><name>hasRecentFiles</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>recentMode</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>file_selection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>file_selection_no_recent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mList</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(
                <argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>onListItemClick</name><argument_list>(<argument><expr><operator>(</operator><name>ListView</name><operator>)</operator><name>parent</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Open button</comment>
        <decl_stmt><decl><type><name>Button</name></type> <name>openButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>open</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>openButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>PasswordActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>ContentFileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>file_not_found_content</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch>
                <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>FileNotFound</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>

            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create button</comment>
        <decl_stmt><decl><type><name>Button</name></type> <name>createButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>create</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>createButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

            <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Make sure file name exists</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name>
                            <operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                                    <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_filename_required</name></name></expr></argument>,
                                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>PermissionUtil</name><operator>.</operator><name>checkAndRequest</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>PERMISSION_REQUEST_ID</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>createFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>ImageButton</name></type> <name>browseButton</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>browse_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>browseButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            
            <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>StorageAF</name><operator>.</operator><name>useStorageFramework</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>StorageAF</name><operator>.</operator><name>ACTION_OPEN_DOCUMENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name><operator>|</operator><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_WRITE_URI_PERMISSION</name></name><operator>|</operator><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_PERSISTABLE_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>OPEN_DOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>Intent</name></type> <name>i</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_GET_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GET_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name>lookForOpenIntentsFilePicker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name>lookForOpenIntentsFilePicker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
            
            <function><type><specifier>private</specifier> <name>void</name></type> <name>lookForOpenIntentsFilePicker</name><parameter_list>()</parameter_list> <block>{<block_content>
                
                <if_stmt><if>if <condition>(<expr><call><name><name>Interaction</name><operator>.</operator><name>isIntentAvailable</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>Intents</name><operator>.</operator><name>OPEN_INTENTS_FILE_BROWSE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>OPEN_INTENTS_FILE_BROWSE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>FILE_BROWSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name>showBrowserDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></catch></try>
                    
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>showBrowserDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
            
            <function><type><specifier>private</specifier> <name>void</name></type> <name>showBrowserDialog</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>BrowserDialog</name></type> <name>diag</name> <init>= <expr><operator>new</operator> <call><name>BrowserDialog</name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>diag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>fillData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>registerForContextMenu</name><argument_list>(<argument><expr><name>mList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Load default database</comment>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_DEFAULT_FILENAME</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>fileName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Uri</name></type> <name>dbUri</name> <init>= <expr><call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>dbUri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>scheme</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>dbUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>File</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <try>try <block>{<block_content>
                        <expr_stmt><expr><call><name><name>PasswordActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// Ignore exception</comment>
                    </block_content>}</block></catch></try>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>PasswordActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name><name>dbUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <comment type="line">// Ignore exception</comment>
                </block_content>}</block></catch></try>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onRequestPermissionsResult</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>,
                                            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>,
                                            <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>PERMISSION_REQUEST_ID</name> <operator>&amp;&amp;</operator>
                <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name> <operator>&amp;&amp;</operator>
                <name><name>grantResults</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><block>{<block_content>

            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>createFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_external_permissions</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <class><specifier>private</specifier> class <name>LaunchGroupActivity</name> <super_list><extends>extends <super><name>FileOnFinish</name></super></extends></super_list> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mUri</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>LaunchGroupActivity</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mUri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mSuccess</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Add to recent files</comment>
                <expr_stmt><expr><call><name><name>fileHistory</name><operator>.</operator><name>createFile</name></name><argument_list>(<argument><expr><name>mUri</name></expr></argument>, <argument><expr><call><name>getFilename</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>CollectPassword</name> <super_list><extends>extends <super><name>FileOnFinish</name></super></extends></super_list> <block>{

        <constructor><specifier>public</specifier> <name>CollectPassword</name><parameter_list>(<parameter><decl><type><name>FileOnFinish</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>finish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>SetPasswordDialog</name></type> <name>password</name> <init>= <expr><operator>new</operator> <call><name>SetPasswordDialog</name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>mOnFinish</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

    }</block></class>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fillData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Set the initial value of the filename</comment>
        <decl_stmt><decl><type><name>EditText</name></type> <name>filename</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>filename</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>default_file_path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>file_row</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>, <argument><expr><call><name><name>fileHistory</name><operator>.</operator><name>getDbList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><name>ListView</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>keyFile</name></decl>;</decl_stmt>
            <function><type><specifier>protected</specifier> <name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name><name>fileHistory</name><operator>.</operator><name>getDatabaseAt</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>keyFile</name> <operator>=</operator> <call><name><name>fileHistory</name><operator>.</operator><name>getKeyfileAt</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></function>
            
            <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>PasswordActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <catch>catch <parameter_list>(<parameter><decl><type><name>ContentFileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>file_not_found_content</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch>
                <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileSelectActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>FileNotFound</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></function>
        }</block></class><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>fillData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>FILE_BROWSE</name> <operator>&amp;&amp;</operator> <name>resultCode</name> <operator>==</operator> <name>RESULT_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getDataString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>filename</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file://"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>filename</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                
                <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>URLDecoder</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><name>requestCode</name> <operator>==</operator> <name>GET_CONTENT</name> <operator>||</operator> <name>requestCode</name> <operator>==</operator> <name>OPEN_DOC</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>resultCode</name> <operator>==</operator> <name>RESULT_OK</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>StorageAF</name><operator>.</operator><name>useStorageFramework</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <try>try <block>{<block_content>
                            <comment type="line">// try to persist read and write permissions</comment>
                            <decl_stmt><decl><type><name>ContentResolver</name></type> <name>resolver</name> <init>= <expr><call><name>getContentResolver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>ContentResolverCompat</name><operator>.</operator><name>takePersistableUriPermission</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ContentResolverCompat</name><operator>.</operator><name>takePersistableUriPermission</name></name><argument_list>(<argument><expr><name>resolver</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_WRITE_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <comment type="line">// nop</comment>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>GET_CONTENT</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>EditText</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>fn</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check to see if we need to change modes</comment>
        <if_stmt><if>if <condition>( <expr><call><name><name>fileHistory</name><operator>.</operator><name>hasRecentFiles</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>recentMode</name></expr> )</condition> <block>{<block_content>
            <comment type="line">// Restart the activity</comment>
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <decl_stmt><decl><type><name>FileNameView</name></type> <name>fnv</name> <init>= <expr><operator>(</operator><name>FileNameView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>file_select</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fnv</name><operator>.</operator><name>updateExternalStorageWarning</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>fileselect</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>launchUrl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>gotoUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_failed_to_launch_link</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_patreon</name></name></expr>:</case>
            <return>return <expr><call><name>launchUrl</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>patreon_url</name></name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_donate</name></name></expr>:</case>
            <return>return <expr><call><name>launchUrl</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>donate_url</name></name></expr></argument>)</argument_list></call></expr>;</return>

        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_about</name></name></expr>:</case>
            <decl_stmt><decl><type><name>AboutDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>AboutDialog</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_app_settings</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>AppSettingsActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreateContextMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>,
            <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateContextMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>menuInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CMENU_CLEAR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>remove_from_filelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onContextItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>CMENU_CLEAR</name></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>AdapterContextMenuInfo</name></type> <name>acmi</name> <init>= <expr><operator>(</operator><name>AdapterContextMenuInfo</name><operator>)</operator> <call><name><name>item</name><operator>.</operator><name>getMenuInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <name><name>acmi</name><operator>.</operator><name>targetView</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>tv</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>protected</specifier> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Void</name></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>fileHistory</name><operator>.</operator><name>deleteFile</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></function>

                <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name>refreshList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class><operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>refreshList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>BaseAdapter</name><operator>)</operator> <name>mAdapter</name><operator>)</operator><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/fileselect/RecentFileHistory.java" hash="9d6da68fe2546afdee510609eddf91ba2a82b981"><comment type="block">/*
 * Copyright 2013-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name><operator>.</operator><name>OnSharedPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<class><specifier>public</specifier> class <name>RecentFileHistory</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>DB_KEY</name> <init>= <expr><literal type="string">"recent_databases"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEYFILE_KEY</name> <init>= <expr><literal type="string">"recent_keyfiles"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>databases</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keyfiles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OnSharedPreferenceChangeListener</name></type> <name>listner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>init</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RecentFileHistory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name><name>c</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>enabled</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>recentfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>recentfile_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>listner</name> <operator>=</operator> <operator>new</operator> <class><super><name>OnSharedPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onSharedPreferenceChanged</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>sharedPreferences</name></decl></parameter>,
                    <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>recentfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>enabled</name> <operator>=</operator> <call><name><name>sharedPreferences</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>recentfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>recentfile_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>registerOnSharedPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>listner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>upgradeFromSQL</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>loadPrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>init</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>upgradeFromSQL</name><parameter_list>()</parameter_list> <block>{<block_content>

        <try>try <block>{<block_content>
            <comment type="line">// Check for a database to upgrade from</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sqlDatabaseExists</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>FileDbHelper</name></type> <name>helper</name> <init>= <expr><operator>new</operator> <call><name>FileDbHelper</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>fetchAllFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>dbIndex</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>FileDbHelper</name><operator>.</operator><name>KEY_FILE_FILENAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>keyIndex</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>FileDbHelper</name><operator>.</operator><name>KEY_FILE_KEYFILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if<condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>dbIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>keyfile</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>keyIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>savePrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// If upgrading fails, we'll just give up on it.</comment>
        </block_content>}</block></catch></try>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>FileDbHelper</name><operator>.</operator><name>deleteDatabase</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// If we fail to delete it, just move on</comment>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>sqlDatabaseExists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>File</name></type> <name>db</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getDatabasePath</name></name><argument_list>(<argument><expr><name><name>FileDbHelper</name><operator>.</operator><name>DATABASE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>createFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyUri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name> <operator>||</operator> <name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove any existing instance of the same filename</comment>
        <expr_stmt><expr><call><name>deleteFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>keyUri</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>keyUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>trimLists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>savePrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasRecentFiles</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDatabaseAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>databases</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getKeyfileAt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>keyfiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>keyfiles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadPrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>loadList</name><argument_list>(<argument><expr><name>databases</name></expr></argument>, <argument><expr><name>DB_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadList</name><argument_list>(<argument><expr><name>keyfiles</name></expr></argument>, <argument><expr><name>KEYFILE_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>savePrefs</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>saveList</name><argument_list>(<argument><expr><name>DB_KEY</name></expr></argument>, <argument><expr><name>databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>saveList</name><argument_list>(<argument><expr><name>KEYFILE_KEY</name></expr></argument>, <argument><expr><name>keyfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>keyprefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>keyprefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>keyprefix</name> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>keyprefix</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>edit</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>keyprefix</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>keyprefix</name> <operator>+</operator> <literal type="string">"_"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>deleteFile</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>save</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>uriName</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>entry</name> <init>= <expr><call><name><name>databases</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>uriName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>fileName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>save</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>savePrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getDbList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>databases</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Uri</name></type> <name>getFileByName</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enabled</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>UriUtil</name><operator>.</operator><name>equalsDefaultfile</name></name><argument_list>(<argument><expr><name>database</name></expr></argument>,<argument><expr><call><name><name>databases</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><call><name><name>keyfiles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteAll</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>savePrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteAllKeys</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>savePrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>trimLists</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>FileDbHelper</name><operator>.</operator><name>MAX_FILES</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>databases</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>databases</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>keyfiles</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>keyfiles</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/fragments/PasswordFragment.java" hash="95adcefd3503d8f4e9f1e06440f370e7c8335292"><comment type="block">/*
 * Copyright 2020 Brian Pellin
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fragments</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>biometric</name><operator>.</operator><name>BiometricManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>biometric</name><operator>.</operator><name>BiometricPrompt</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>AboutDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>PasswordActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>ProgressTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>ClipDataCompat</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>StorageAF</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>LoadDB</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>dialog</name><operator>.</operator><name>PasswordEncodingDialogHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>fileselect</name><operator>.</operator><name>BrowserDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>biometric</name><operator>.</operator><name>BiometricHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name><operator>.</operator><name>Intents</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name><operator>.</operator><name>AppSettingsActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>EmptyUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Interaction</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>PermissionUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordFragment</name> <super_list><extends>extends <super><name>Fragment</name></super></extends> <implements>implements <super><name><name>BiometricHelper</name><operator>.</operator><name>BiometricCallback</name></name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FILE_BROWSE</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GET_CONTENT</name> <init>= <expr><literal type="number">257</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>OPEN_DOC</name> <init>= <expr><literal type="number">258</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_PASSWORD</name> <init>= <expr><literal type="string">"password"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>KEY_LAUNCH_IMMEDIATELY</name> <init>= <expr><literal type="string">"launchImmediately"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VIEW_INTENT</name> <init>= <expr><literal type="string">"android.intent.action.VIEW"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>PERMISSION_REQUEST_ID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mDbUri</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>mKeyUri</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mRememberKeyfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefsNoBackup</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Uri</name></type> <name>storedKeyUri</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>storedPassword</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREF_KEY_VALUE_PREFIX</name> <init>= <expr><literal type="string">"valueFor_"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// key is a combination of db file name and this prefix</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREF_KEY_IV_PREFIX</name> <init>= <expr><literal type="string">"ivFor_"</literal></expr></init></decl>;</decl_stmt> <comment type="line">// key is a combination of db file name and this prefix</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>View</name></type> <name>mView</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBox</name></type> <name>biometricCheck</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>EditText</name></type> <name>passwordView</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Button</name></type> <name>biometricOpen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Button</name></type> <name>biometricClear</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>View</name></type> <name>divider3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Button</name></type> <name>confirmButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>biometricsAvailable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BiometricPrompt</name></type> <name>biometricSavePrompt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BiometricPrompt</name></type> <name>biometricOpenPrompt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name></name></type> <name>savePrompt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name></name></type> <name>loadPrompt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BiometricHelper</name></type> <name>biometricHelper</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>afterOnCreateBeforeEndOfOnResume</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>afterOnCreateBeforeEndOfOnResume</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateView</name></name><argument_list>(<argument><expr><name>inflater</name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mView</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>prefs</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>prefsNoBackup</name> <operator>=</operator> <call><name><name>mActivity</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><literal type="string">"nobackup"</literal></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mRememberKeyfile</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>keyfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>keyfile_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>confirmButton</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>passwordView</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>biometricOpen</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>open_biometric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>biometricClear</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>clear_biometric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>divider3</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>divider3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>biometricCheck</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>save_password</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>biometricOpen</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>biometricLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>biometricClear</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>clearStoredCredentials</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>biometricLogin</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>initDecryptData</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>biometricCheck</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>biometricHelper</name><operator>.</operator><name>getCipher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>biometricOpenPrompt</name><operator>.</operator><name>authenticate</name></name><argument_list>(<argument><expr><name>loadPrompt</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>BiometricPrompt</name><operator>.</operator><name>CryptoObject</name></name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflate</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inflate</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_about</name></name></expr>:</case>
                <decl_stmt><decl><type><name>AboutDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>AboutDialog</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>

            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_app_settings</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>AppSettingsActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onContextItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>context</name> <operator>instanceof</operator> <name>Activity</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onDetach</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setFingerPrintVisibilty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>biometricsAvailable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCheck</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>biometricCheck</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>biometricOpenUpdateVisibility</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>biometricOpenUpdateVisibility</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>visibility</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>autoOpen</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BiometricManager</name></type> <name>biometricManager</name> <init>= <expr><call><name><name>BiometricManager</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>auth</name> <init>= <expr><call><name><name>biometricManager</name><operator>.</operator><name>canAuthenticate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>biometricsAvailable</name> <operator>&amp;&amp;</operator> <name>auth</name> <operator>!=</operator> <name><name>BiometricManager</name><operator>.</operator><name>BIOMETRIC_ERROR_NONE_ENROLLED</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>encryptedValue</name> <init>= <expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name>getPreferenceKeyValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>ivSpecValue</name> <init>= <expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name>getPreferenceKeyIvSpec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>hasStoredKey</name> <init>= <expr><name>encryptedValue</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>ivSpecValue</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasStoredKey</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Check key value</comment>
                <expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>autoOpen</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_autoscan_key</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>biometric_autoscan</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>&amp;&amp;</operator> <name>afterOnCreateBeforeEndOfOnResume</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>GONE</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>GONE</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>biometricOpen</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>biometricClear</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>divider3</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>autoOpen</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>biometricLogin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>initBiometrics</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>biometricsAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>biometricHelper</name> <operator>=</operator> <operator>new</operator> <call><name>BiometricHelper</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Executor</name></type> <name>executor</name> <init>= <expr><call><name><name>ContextCompat</name><operator>.</operator><name>getMainExecutor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationCallback</name></name></type> <name>saveCallback</name> <init>=
                <expr><operator>new</operator> <class><super><name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationFailed</name><parameter_list>()</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationFailed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_failed_store</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationSucceeded</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationResult</name></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationSucceeded</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// newly store the entered password in encrypted way</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>password</name> <init>= <expr><call><name><name>passwordView</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>biometricHelper</name><operator>.</operator><name>encryptData</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CharSequence</name></type> <name>errString</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationError</name></name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>errString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canceledBiometricAuth</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_error</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationCallback</name></name></type> <name>openCallback</name> <init>=
                <expr><operator>new</operator> <class><super><name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationCallback</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationFailed</name><parameter_list>()</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationFailed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_failed</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationSucceeded</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BiometricPrompt</name><operator>.</operator><name>AuthenticationResult</name></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationSucceeded</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// retrieve the encrypted value from preferences</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encryptedValue</name> <init>= <expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name>getPreferenceKeyValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>encryptedValue</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>biometricHelper</name><operator>.</operator><name>decryptData</name></name><argument_list>(<argument><expr><name>encryptedValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onAuthenticationError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CharSequence</name></type> <name>errString</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAuthenticationError</name></name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>, <argument><expr><name>errString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>canceledBiometricAuth</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_error</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>biometricSavePrompt</name> <operator>=</operator> <operator>new</operator> <call><name>BiometricPrompt</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><name>saveCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name><operator>.</operator><name>Builder</name></name></type> <name>saveBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>savePrompt</name> <operator>=</operator> <call><name><name>saveBuilder</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_to_store</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfirmationRequired</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_save_password</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setNegativeButtonText</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>biometricOpenPrompt</name> <operator>=</operator> <operator>new</operator> <call><name>BiometricPrompt</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>executor</name></expr></argument>, <argument><expr><name>openCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name><operator>.</operator><name>Builder</name></name></type> <name>openBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>BiometricPrompt</name><operator>.</operator><name>PromptInfo</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>loadPrompt</name> <operator>=</operator> <call><name><name>openBuilder</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_auth_to_open</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setConfirmationRequired</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_open_db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setNegativeButtonText</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


        <expr_stmt><expr><call><name>setFingerPrintVisibilty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>canceledBiometricAuth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>errorCode</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>BiometricPrompt</name><operator>.</operator><name>ERROR_CANCELED</name></name></expr>:</case>
            <case>case <expr><name><name>BiometricPrompt</name><operator>.</operator><name>ERROR_USER_CANCELED</name></name></expr>:</case>
            <case>case <expr><name><name>BiometricPrompt</name><operator>.</operator><name>ERROR_NEGATIVE_BUTTON</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></switch>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>initDecryptData</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>ivSpecValue</name> <init>= <expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name>getPreferenceKeyIvSpec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>biometricHelper</name><operator>.</operator><name>initDecryptData</name></name><argument_list>(<argument><expr><name>ivSpecValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InitTask</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>InitTask</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>doInBackground</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Activity</name></type> <name>activity</name> <init>= <expr><name>mActivity</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{<block_content>

            <case>case <expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>FILE_BROWSE</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>filename</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getDataString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>filename</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>EditText</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_keyfile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>fn</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name>GET_CONTENT</name></expr>:</case>
            <case>case <expr><name>OPEN_DOC</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>GET_CONTENT</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>EditText</name></type> <name>fn</name> <init>= <expr><operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_keyfile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>fn</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>
                            <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If the application was shutdown make sure to clear the password field, if it</comment>
        <comment type="line">// was saved in the instance state</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>App</name><operator>.</operator><name>isShutdown</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>TextView</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Clear the shutdown flag</comment>
        <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>clearShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BiometricManager</name></type> <name>biometricManager</name> <init>= <expr><call><name><name>BiometricManager</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>auth</name> <init>= <expr><call><name><name>biometricManager</name><operator>.</operator><name>canAuthenticate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>auth</name> <operator>==</operator> <name><name>BiometricManager</name><operator>.</operator><name>BIOMETRIC_SUCCESS</name></name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>initBiometrics</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>biometricsAvailable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setFingerPrintVisibilty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>afterOnCreateBeforeEndOfOnResume</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRequestPermissionsResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>PERMISSION_REQUEST_ID</name> <operator>&amp;&amp;</operator>
                <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name> <operator>&amp;&amp;</operator>
                <name><name>grantResults</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><block>{<block_content>

            <expr_stmt><expr><call><name>loadDatabaseWithPermission</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>errorMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_external_permissions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getPreferenceKeyValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// makes it possible to store passwords uniqly per database</comment>
        <return>return <expr><name>PREF_KEY_VALUE_PREFIX</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>mDbUri</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>mDbUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getPreferenceKeyIvSpec</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>PREF_KEY_IV_PREFIX</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>mDbUri</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>mDbUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// Moved this to the foreground TOOD: Move this to a more typical pattern</comment>
    <class><specifier>private</specifier> class <name>InitTask</name> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>password</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>launch_immediately</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>Integer</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Intent</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>action</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <empty_stmt>;</empty_stmt>
            <if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>VIEW_INTENT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Uri</name></type> <name>incoming</name> <init>= <expr><call><name><name>i</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>mDbUri</name> <operator>=</operator> <name>incoming</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name><name>ClipDataCompat</name><operator>.</operator><name>getUriFromIntent</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_KEYFILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>incoming</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_can_not_handle_uri</name></name></expr>;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>incoming</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>fileName</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <comment type="line">// No file name</comment>
                        <return>return <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>FileNotFound</name></name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <decl_stmt><decl><type><name>File</name></type> <name>dbFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dbFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">// File does not exist</comment>
                        <return>return <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>FileNotFound</name></name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>mKeyUri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name>getKeyFile</name><argument_list>(<argument><expr><name>mDbUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>incoming</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mKeyUri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name>getKeyFile</name><argument_list>(<argument><expr><name>mDbUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_can_not_handle_uri</name></name></expr>;</return>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>password</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>KEY_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>launch_immediately</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>KEY_LAUNCH_IMMEDIATELY</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>mDbUri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_FILENAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_KEYFILE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>password</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>KEY_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>launch_immediately</name> <operator>=</operator> <call><name><name>i</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>KEY_LAUNCH_IMMEDIATELY</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>mKeyUri</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mKeyUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mKeyUri</name> <operator>=</operator> <call><name>getKeyFile</name><argument_list>(<argument><expr><name>mDbUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>biometricOpenUpdateVisibility</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>populateView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>confirmButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OkClickHandler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>CheckBox</name></type> <name>checkBox</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>show_password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Show or hide password</comment>
            <expr_stmt><expr><call><name><name>checkBox</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{

                <function><type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(
                        <parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>TextView</name></type> <name>password</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>isChecked</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>password</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_TEXT</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></function>

            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>password</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>TextView</name></type> <name>tv_password</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>tv_password</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>CheckBox</name></type> <name>defaultCheck</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>default_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>defaultCheck</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultCheckChange</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ImageButton</name></type> <name>browse</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>browse_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>browse</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

                <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>StorageAF</name><operator>.</operator><name>useStorageFramework</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>StorageAF</name><operator>.</operator><name>ACTION_OPEN_DOCUMENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>OPEN_DOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_GET_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>addCategory</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>CATEGORY_OPENABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"*/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <try>try <block>{<block_content>
                            <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>GET_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name>lookForOpenIntentsFilePicker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></function>

                <function><type><specifier>private</specifier> <name>void</name></type> <name>lookForOpenIntentsFilePicker</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>Interaction</name><operator>.</operator><name>isIntentAvailable</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name><name>Intents</name><operator>.</operator><name>OPEN_INTENTS_FILE_BROWSE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>OPEN_INTENTS_FILE_BROWSE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Get file path parent if possible</comment>
                        <try>try <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>mDbUri</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mDbUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>mDbUri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <decl_stmt><decl><type><name>File</name></type> <name>keyfile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>mDbUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>File</name></type> <name>parent</name> <init>= <expr><call><name><name>keyfile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"file://"</literal> <operator>+</operator> <call><name><name>parent</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <comment type="line">// Ignore</comment>
                        </block_content>}</block></catch></try>

                        <try>try <block>{<block_content>
                            <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>FILE_BROWSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name>showBrowserDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>showBrowserDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></function>

                <function><type><specifier>private</specifier> <name>void</name></type> <name>showBrowserDialog</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>BrowserDialog</name></type> <name>diag</name> <init>= <expr><operator>new</operator> <call><name>BrowserDialog</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>diag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>retrieveSettings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>launch_immediately</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>loadDatabase</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>mKeyUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>DefaultCheckChange</name> <super_list><implements>implements <super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super></implements></super_list> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(
                <parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>,
                <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <decl_stmt><decl><type><name>String</name></type> <name>newDefaultFileName</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>isChecked</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>newDefaultFileName</name> <operator>=</operator> <call><name><name>mDbUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>newDefaultFileName</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_DEFAULT_FILENAME</name></name></expr></argument>, <argument><expr><name>newDefaultFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>BackupManager</name></type> <name>backupManager</name> <init>= <expr><operator>new</operator> <call><name>BackupManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>backupManager</name><operator>.</operator><name>dataChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></function>

    }</block></class>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>retrieveSettings</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultFilename</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>PasswordActivity</name><operator>.</operator><name>KEY_DEFAULT_FILENAME</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><call><name><name>mDbUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>UriUtil</name><operator>.</operator><name>equalsDefaultfile</name></name><argument_list>(<argument><expr><name>mDbUri</name></expr></argument>, <argument><expr><name>defaultFilename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CheckBox</name></type> <name>checkbox</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>default_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>checkbox</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Uri</name></type> <name>getKeyFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>dbUri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mRememberKeyfile</name></expr>)</condition> <block>{<block_content>

            <return>return <expr><call><name><name>App</name><operator>.</operator><name>getFileHistory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFileByName</name><argument_list>(<argument><expr><name>dbUri</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>populateView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>db</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mDbUri</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>mDbUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>mKeyUri</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name><name>mKeyUri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_keyfile</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>errorMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>resId</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setEditText</name><parameter_list>(
            <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>TextView</name></type> <name>te</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>mView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert <expr><operator>(</operator><name>te</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>;</assert>

        <if_stmt><if>if <condition>(<expr><name>te</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadDatabase</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>,
            <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>pass</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>keyfile</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>keyfile</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>errorMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_nopass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>storedPassword</name> <operator>=</operator> <name>pass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>storedKeyUri</name> <operator>=</operator> <name>keyfile</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>checkFilePermissions</name><argument_list>(<argument><expr><name>mDbUri</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>loadDatabaseWithPermission</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadDatabaseWithPermission</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><name>storedPassword</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>storedPassword</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Uri</name></type> <name>keyfile</name> <init>= <expr><name>storedKeyUri</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>storedKeyUri</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activity</name> <init>= <expr><name>mActivity</name></expr></init></decl>;</decl_stmt>


        <comment type="line">// Clear before we load</comment>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear the shutdown flag</comment>
        <expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>clearShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LoadDB</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>LoadDB</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><name>mDbUri</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>PasswordFragment</name><operator>.</operator><name>AfterLoad</name></name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>loading_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>getEditText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Util</name><operator>.</operator><name>getEditText</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <class><specifier>private</specifier> <specifier>final</specifier> class <name>AfterLoad</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>db</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>AfterLoad</name><parameter_list>(
                <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>,
                <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>.</operator><name>passwordEncodingError</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PasswordEncodingDialogHelper</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>PasswordEncodingDialogHelper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(
                            <parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>

                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mSuccess</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>biometricCheck</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>biometricHelper</name><operator>.</operator><name>initEncryptData</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return;</return>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>biometricHelper</name><operator>.</operator><name>getCipher</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>biometricSavePrompt</name><operator>.</operator><name>authenticate</name></name><argument_list>(<argument><expr><name>savePrompt</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>BiometricPrompt</name><operator>.</operator><name>CryptoObject</name></name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <comment type="line">// Check to see if the fragement detached before this finished</comment>
                    <if_stmt><if>if <condition>(<expr><name>mActivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><name>mActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>OkClickHandler</name> <super_list><implements>implements <super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super></implements></super_list> <block>{

        <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name>getEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name>getEditText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pass_keyfile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>loadDatabase</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>loadDatabase</name><parameter_list>(
            <parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>keyfile</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <expr_stmt><expr><call><name>loadDatabase</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><call><name><name>UriUtil</name><operator>.</operator><name>parseDefaultFile</name></name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasFileUri</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>clearStoredCredentials</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><call><name>getPreferenceKeyValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><call><name>getPreferenceKeyIvSpec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFingerPrintVisibilty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleEncryptedResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ivSpec</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>prefsNoBackup</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><call><name>getPreferenceKeyValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><call><name>getPreferenceKeyIvSpec</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ivSpec</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// and remove visual input to reset UI</comment>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>encrypted_value_stored</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>handleDecryptedResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// on decrypt enter it for the purchase/login action</comment>
        <expr_stmt><expr><call><name><name>passwordView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>confirmButton</name><operator>.</operator><name>performClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onInvalidKeyException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>fingerprint_invalid_key</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onException</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>onException</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showWarningMessage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>showWarningMessage</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>onException</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>resId</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onKeyInvalidated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>clearStoredCredentials</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>biometric_invalidated</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkFilePermissions</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>keyfile</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasFileUri</name> <init>= <expr><call><name>hasFileUri</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>hasFileUri</name><argument_list>(<argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasFileUri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><call><name><name>PermissionUtil</name><operator>.</operator><name>checkAndRequest</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mActivity</name></name></expr></argument>, <argument><expr><name>PERMISSION_REQUEST_ID</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/icons/DrawableFactory.java" hash="524d078b221d88323291ad911e0e5c6f0f8f9b7c"><comment type="block">/*
 * Copyright 2010-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>AbstractReferenceMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name><operator>.</operator><name>ReferenceMap</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwIcon</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwIconCustom</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwIconStandard</name></name>;</import>

<class><specifier>public</specifier> class <name>DrawableFactory</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Drawable</name></type> <name>blank</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>blankWidth</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>blankHeight</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** customIconMap
	 *  Cache for icon drawable. 
	 *  Keys: UUID, Values: Drawables
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ReferenceMap</name></type> <name>customIconMap</name> <init>= <expr><operator>new</operator> <call><name>ReferenceMap</name><argument_list>(<argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>HARD</name></name></expr></argument>, <argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>WEAK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<comment type="block" format="javadoc">/** standardIconMap
	 *  Cache for icon drawable. 
	 *  Keys: Integer, Values: Drawables
	 */</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <name>ReferenceMap</name></type> <name>standardIconMap</name> <init>= <expr><operator>new</operator> <call><name>ReferenceMap</name><argument_list>(<argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>HARD</name></name></expr></argument>, <argument><expr><name><name>AbstractReferenceMap</name><operator>.</operator><name>WEAK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>assignDrawableTo</name><parameter_list>(<parameter><decl><type><name>ImageView</name></type> <name>iv</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>PwIcon</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Drawable</name></type> <name>draw</name> <init>= <expr><call><name>getIconDrawable</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>iv</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>Drawable</name></type> <name>getIconDrawable</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>PwIcon</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>instanceof</operator> <name>PwIconStandard</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>getIconDrawable</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>PwIconStandard</name><operator>)</operator> <name>icon</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><call><name>getIconDrawable</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>(</operator><name>PwIconCustom</name><operator>)</operator> <name>icon</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>initBlank</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>blank</name><operator>==</operator><literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>blank</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic99_blank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>blankWidth</name> <operator>=</operator> <call><name><name>blank</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>blankHeight</name> <operator>=</operator> <call><name><name>blank</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>Drawable</name></type> <name>getIconDrawable</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>PwIconStandard</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>resId</name> <init>= <expr><call><name><name>Icons</name><operator>.</operator><name>iconToResId</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>iconId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>Drawable</name></type> <name>draw</name> <init>= <expr><operator>(</operator><name>Drawable</name><operator>)</operator> <call><name><name>standardIconMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>draw</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>draw</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>standardIconMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>, <argument><expr><name>draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>draw</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>Drawable</name></type> <name>getIconDrawable</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>PwIconCustom</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>initBlank</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>icon</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>blank</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>Drawable</name></type> <name>draw</name> <init>= <expr><operator>(</operator><name>Drawable</name><operator>)</operator> <call><name><name>customIconMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>uuid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>draw</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>icon</name><operator>.</operator><name>imageData</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>blank</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeByteArray</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>imageData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>icon</name><operator>.</operator><name>imageData</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line">// Could not understand custom icon</comment>
			<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>blank</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>resize</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>draw</name> <operator>=</operator> <operator>new</operator> <call><name>BitmapDrawable</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>customIconMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>icon</name><operator>.</operator><name>uuid</name></name></expr></argument>, <argument><expr><name>draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>draw</name></expr>;</return>
	</block_content>}</block></function>
	
	<comment type="block" format="javadoc">/** Resize the custom icon to match the built in icons
	 * @param bitmap
	 * @return
	 */</comment>
	<function><type><specifier>private</specifier> <name>Bitmap</name></type> <name>resize</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>width</name> <operator>==</operator> <name>blankWidth</name> <operator>&amp;&amp;</operator> <name>height</name> <operator>==</operator> <name>blankHeight</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>bitmap</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>Bitmap</name><operator>.</operator><name>createScaledBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>blankWidth</name></expr></argument>, <argument><expr><name>blankHeight</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>standardIconMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>customIconMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/icons/Icons.java" hash="8215bd6ac097c01278f3c0b5cd61b1bc56a62fe3"><comment type="block">/*
 * Copyright 2010-2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>icons</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Field</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseIntArray</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> class <name>Icons</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SparseIntArray</name></type> <name>icons</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>buildList</name><parameter_list>()</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>icons</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>icons</name> <operator>=</operator> <operator>new</operator> <call><name>SparseIntArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name><operator>.</operator><name>drawable</name></name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>class</name></name></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>Field</name><index>[]</index></name></type> <name>fields</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getFields</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fields</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>fieldName</name> <init>= <expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name><name>fieldName</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"ic\\d{2}.*"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>String</name></type> <name>sNum</name> <init>= <expr><call><name><name>fieldName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>sNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">69</literal></expr>)</condition> <block>{<block_content>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>
					
					<decl_stmt><decl><type><name>int</name></type> <name>resId</name></decl>;</decl_stmt>
					<try>try <block>{<block_content>
						<expr_stmt><expr><name>resId</name> <operator>=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
						<continue>continue;</continue>
					</block_content>}</block></catch></try>
					
					<expr_stmt><expr><call><name><name>icons</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>	
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>iconToResId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iconId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>buildList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><call><name><name>icons</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>iconId</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic99_blank</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>count</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>buildList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><call><name><name>icons</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/intents/Intents.java" hash="bad3aaf8d298387c9b1bea83fe70166095557e61"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment><package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name></name>;</package>

<class><specifier>public</specifier> class <name>Intents</name> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TIMEOUT</name> <init>= <expr><literal type="string">"com.keepassdroid.timeout"</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COPY_USERNAME</name> <init>= <expr><literal type="string">"com.keepassdroid.copy_username"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COPY_PASSWORD</name> <init>= <expr><literal type="string">"com.keepassdroid.copy_password"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OPEN_INTENTS_FILE_BROWSE</name> <init>= <expr><literal type="string">"org.openintents.action.PICK_FILE"</literal></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/password/PasswordGenerator.java" hash="5d64ecd48313394b738e1ab3e66b971bbb7dde8e"><comment type="block">/*
 * Copyright 2010 Tolga Onbay, Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>password</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordGenerator</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UPPERCASE_CHARS</name>	<init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LOWERCASE_CHARS</name> 	<init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DIGIT_CHARS</name> 	<init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MINUS_CHAR</name>	 	<init>= <expr><literal type="string">"-"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNDERLINE_CHAR</name> 	<init>= <expr><literal type="string">"_"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SPACE_CHAR</name> 		<init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SPECIAL_CHARS</name> 	<init>= <expr><literal type="string">"!\"#$%&amp;'*+,./:;=?@\\^`"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BRACKET_CHARS</name> 	<init>= <expr><literal type="string">"[]{}()&lt;&gt;"</literal></expr></init></decl>;</decl_stmt>

	
	<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>cxt</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>PasswordGenerator</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>cxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>cxt</name></name> <operator>=</operator> <name>cxt</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>generatePassword</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>upperCase</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lowerCase</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>digits</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>minus</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>underline</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>specials</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>brackets</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws><block>{<block_content>
		<comment type="line">// Desired password length is 0 or less</comment>
		<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>cxt</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_wrong_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// No option has been checked</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upperCase</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lowerCase</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>digits</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>minus</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>underline</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>space</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>specials</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>brackets</name></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>cxt</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_pass_gen_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>characterSet</name> <init>= <expr><call><name>getCharacterSet</name><argument_list>(<argument><expr><name>upperCase</name></expr></argument>, <argument><expr><name>lowerCase</name></expr></argument>, <argument><expr><name>digits</name></expr></argument>, <argument><expr><name>minus</name></expr></argument>, <argument><expr><name>underline</name></expr></argument>, <argument><expr><name>space</name></expr></argument>, <argument><expr><name>specials</name></expr></argument>, <argument><expr><name>brackets</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>characterSet</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>SecureRandom</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// use more secure variant of Random!</comment>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>characterSet</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name><name>buffer</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>getCharacterSet</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>upperCase</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>lowerCase</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>digits</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>minus</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>underline</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>space</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>specials</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>brackets</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>StringBuffer</name></type> <name>charSet</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>upperCase</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>UPPERCASE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>lowerCase</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>LOWERCASE_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>digits</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>DIGIT_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>minus</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>MINUS_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>underline</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>UNDERLINE_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>space</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>SPACE_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>specials</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>SPECIAL_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>brackets</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>charSet</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>BRACKET_CHARS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>charSet</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/search/SearchDbHelper.java" hash="ad6605aa93f324eef2966b41f892882b3f9357aa"><comment type="block">/*
 * Copyright 2009-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV4</name></name>;</import>

<class><specifier>public</specifier> class <name>SearchDbHelper</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>SearchDbHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>omitBackup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>omitbackup_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>mCtx</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>bool</name><operator>.</operator><name>omitbackup_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>PwGroup</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>qStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>PwDatabase</name></type> <name>pm</name> <init>= <expr><name><name>db</name><operator>.</operator><name>pm</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>PwGroup</name></type> <name>group</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>pm</name> <operator>instanceof</operator> <name>PwDatabaseV3</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>group</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>pm</name> <operator>instanceof</operator> <name>PwDatabaseV4</name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>group</name> <operator>=</operator> <operator>new</operator> <call><name>PwGroupV4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"SearchDbHelper"</literal></expr></argument>, <argument><expr><literal type="string">"Tried to search with unknown db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>group</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>mCtx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>search_results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>group</name><operator>.</operator><name>childEntries</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Search all entries</comment>
		<decl_stmt><decl><type><name>Locale</name></type> <name>loc</name> <init>= <expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>qStr</name> <operator>=</operator> <call><name><name>qStr</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>isOmitBackup</name> <init>= <expr><call><name>omitBackup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name></type> <name>worklist</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>PwGroup</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pm</name><operator>.</operator><name>rootGroup</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>worklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>pm</name><operator>.</operator><name>rootGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<while>while <condition>(<expr><call><name><name>worklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>PwGroup</name></type> <name>top</name> <init>= <expr><call><name><name>worklist</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><call><name><name>pm</name><operator>.</operator><name>isGroupSearchable</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>isOmitBackup</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<for>for <control>(<init><decl><type><name>PwEntry</name></type> <name>entry</name> <range>: <expr><name><name>top</name><operator>.</operator><name>childEntries</name></name></expr></range></decl></init>)</control> <block>{<block_content>
					<expr_stmt><expr><call><name>processEntries</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>group</name><operator>.</operator><name>childEntries</name></name></expr></argument>, <argument><expr><name>qStr</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				
				<for>for <control>(<init><decl><type><name>PwGroup</name></type> <name>childGroup</name> <range>: <expr><name><name>top</name><operator>.</operator><name>childGroups</name></name></expr></range></decl></init>)</control> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>childGroup</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name><name>worklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>childGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><name>group</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>processEntries</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>results</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>qStr</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>loc</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Search all strings in the entry</comment>
		<decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iter</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>stringIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>lower</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name><name>lower</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>qStr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/search/SearchResults.java" hash="48ada1e4377b1873dd083d0e20a6027d6293a066"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>SearchManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupBaseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>PwGroupListAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupEmptyView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name><operator>.</operator><name>GroupViewOnlyView</name></name>;</import>

<class><specifier>public</specifier> class <name>SearchResults</name> <super_list><extends>extends <super><name>GroupBaseActivity</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>Database</name></type> <name>mDb</name></decl>;</decl_stmt>
	<comment type="line">//private String mQuery;</comment>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><call><name>isFinishing</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>mDb</name> <operator>=</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">// Likely the app has been killed exit the activity </comment>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>mDb</name><operator>.</operator><name>Loaded</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>performSearch</name><argument_list>(<argument><expr><call><name>getSearchStr</name><argument_list>(<argument><expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>performSearch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><call><name><name>query</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mGroup</name> <operator>=</operator> <call><name><name>mDb</name><operator>.</operator><name>Search</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><name>mGroup</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mGroup</name><operator>.</operator><name>childEntries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupEmptyView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GroupViewOnlyView</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setGroupTitle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PwGroupListAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>mGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<comment type="block">/*
	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		
		mQuery = getSearchStr(intent);
		performSearch();
		//mGroup = processSearchIntent(intent);
		//assert(mGroup != null);
	}
	*/</comment>

	<function><type><specifier>private</specifier> <name>String</name></type> <name>getSearchStr</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>queryIntent</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// get and process search query here</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>queryAction</name> <init>= <expr><call><name><name>queryIntent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>( <expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_SEARCH</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>queryAction</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
        	<return>return <expr><call><name><name>queryIntent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>SearchManager</name><operator>.</operator><name>QUERY</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <return>return <expr><literal type="string">""</literal></expr>;</return>
		
	</block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/AppSettingsActivity.java" hash="192f1decba4811d13b1251ab63ccb3d1178ee335"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>LockCloseActivity</name></name>;</import>

<class><specifier>public</specifier> class <name>AppSettingsActivity</name> <super_list><extends>extends <super><name>LockCloseActivity</name></super></extends></super_list> <block>{

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>AppSettingsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
					<operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>settings</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MainSettingsFragement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
					<operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/AppSettingsFragement.java" hash="3325f9ffb191ecc474276a6c553c0f180949bf93"><comment type="block">/*
 * Copyright 2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragmentCompat</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>

<class><specifier>public</specifier> class <name>AppSettingsFragement</name> <super_list><extends>extends <super><name>PreferenceFragmentCompat</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>KEYFILE_DEFAULT</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>BackupManager</name></type> <name>backupManager</name></decl>;</decl_stmt>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>AppSettingsFragement</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreatePreferences</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rootKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preferences_app</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Preference</name></type> <name>keyFile</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>keyfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>keyFile</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name></super><argument_list>()</argument_list> <block>{

			<function><type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>value</name><operator>.</operator><name>booleanValue</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getFileHistory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deleteAllKeys</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Preference</name></type> <name>recentHistory</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>recentfile_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>recentHistory</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name></super><argument_list>()</argument_list> <block>{

			<function><type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getFileHistory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>deleteAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></function>
		}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>backupManager</name> <operator>=</operator> <operator>new</operator> <call><name>BackupManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>backupManager</name><operator>.</operator><name>dataChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/DBSettingsFragement.java" hash="6f2f3d1e382b25ad9a9a15e9531091540e1da8f2"><comment type="block">/*
 * Copyright 2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragmentCompat</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEncryptionAlgorithm</name></name>;</import>

<class><specifier>public</specifier> class <name>DBSettingsFragement</name> <super_list><extends>extends <super><name>PreferenceFragmentCompat</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>KEYFILE_DEFAULT</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>BackupManager</name></type> <name>backupManager</name></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>DBSettingsFragement</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ROUNDS_PREFERENCE_TAG</name> <init>= <expr><literal type="string">"ROUNDS"</literal></expr></init></decl>;</decl_stmt>
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onDisplayPreferenceDialog</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>ROUNDS_PREFERENCE_TAG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>preference</name> <operator>instanceof</operator> <name>EditTextPreference</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>key</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>rounds_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><specifier>final</specifier> <name>DialogFragment</name></type> <name>f</name> <init>= <expr><call><name><name>RoundsPreferenceFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setTargetFragment</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ROUNDS_PREFERENCE_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDisplayPreferenceDialog</name></name><argument_list>(<argument><expr><name>preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreatePreferences</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rootKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preferences_db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>db</name><operator>.</operator><name>Loaded</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>appSettingsEnabled</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Preference</name></type> <name>rounds</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>rounds_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>rounds</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name></super><argument_list>()</argument_list> <block>{

				<function><type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
					<expr_stmt><expr><call><name>setRounds</name><argument_list>(<argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></function>
			}</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>setRounds</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>Preference</name></type> <name>algorithm</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>algorithm_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>setAlgorithm</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>backupManager</name> <operator>=</operator> <operator>new</operator> <call><name>BackupManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>backupManager</name><operator>.</operator><name>dataChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setRounds</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Preference</name></type> <name>rounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>rounds</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>getNumRounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setAlgorithm</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>Preference</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>resId</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>getEncAlgorithm</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>PwEncryptionAlgorithm</name><operator>.</operator><name>Rjindal</name></name></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>resId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>rijndael</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else  <block>{<block_content>
			<expr_stmt><expr><name>resId</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>twofish</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>algorithm</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/LongEditTextPreference.java" hash="9cf41773c0758a6578ddc99195f785ef07d640de"><comment type="block">/*
 * Copyright 2017-2020 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>LongEditTextPreference</name> <super_list><extends>extends <super><name>EditTextPreference</name></super></extends></super_list> <block>{
    <constructor><specifier>public</specifier> <name>LongEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><name>defStyleRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>LongEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>LongEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>LongEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>String</name></type> <name>getPersistedString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>defaultReturnValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getPersistedLong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>boolean</name></type> <name>persistString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><call><name>persistLong</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_rounds_not_number</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/LongEditTextPreferenceFragment.java" hash="68582511868edd6c5eb297a3918b53506d336e7d"><comment type="block">/*
 * Copyright 2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreferenceDialogFragmentCompat</name></name>;</import>

<class><specifier>public</specifier> class <name>LongEditTextPreferenceFragment</name> <super_list><extends>extends <super><name>EditTextPreferenceDialogFragmentCompat</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>LongEditTextPreference</name></type> <name>preference</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LongEditTextPreferenceFragment</name><parameter_list>(<parameter><decl><type><name>LongEditTextPreference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preference</name></name> <operator>=</operator> <name>preference</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>ARG_KEY</name></expr></argument>, <argument><expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setArguments</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onCreateDialog</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/MainSettingsFragement.java" hash="f375deb2f3b54c1543c00e9dc36d856cbacc493a"><comment type="block">/*
 * Copyright 2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragmentCompat</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>

<class><specifier>public</specifier> class <name>MainSettingsFragement</name> <super_list><extends>extends <super><name>PreferenceFragmentCompat</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>KEYFILE_DEFAULT</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>Launch</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>MainSettingsFragement</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>setRetainInstance</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreatePreferences</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rootKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preferences</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><call><name><name>db</name><operator>.</operator><name>Loaded</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>appSettingsEnabled</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Preference</name></type> <name>dbSettings</name> <init>= <expr><call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>db_key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>dbSettings</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/PrefsUtil.java" hash="605be226daf88a2214746a819496a21e2e8a01d3"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>PrefsUtil</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>float</name></type> <name>getListTextSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>list_size_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>list_size_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/settings/RoundsPreferenceFragment.java" hash="d0e776a56987d8ea6e08b33e32041019084b01b8"><comment type="block">/*
 * Copyright 2009-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreferenceDialogFragmentCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>ProgressTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>OnFinish</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>SaveDB</name></name>;</import>

<class><specifier>public</specifier> class <name>RoundsPreferenceFragment</name> <super_list><extends>extends <super><name>EditTextPreferenceDialogFragmentCompat</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>EditText</name></type> <name>mEditText</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>PwDatabase</name></type> <name>mPM</name></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>void</name></type> <name>onBindDialogView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBindDialogView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mEditText</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>edit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mEditText</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_CLASS_NUMBER</name></name><operator>|</operator><name><name>InputType</name><operator>.</operator><name>TYPE_NUMBER_VARIATION_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mPM</name> <operator>=</operator> <name><name>db</name><operator>.</operator><name>pm</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mEditText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>pm</name><operator>.</operator><name>getNumRounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></function>


	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>RoundsPreferenceFragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><specifier>final</specifier> <name>RoundsPreferenceFragment</name></type>
				<name>fragment</name> <init>= <expr><operator>new</operator> <call><name>RoundsPreferenceFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>ARG_KEY</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>fragment</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onDialogClosed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>positiveResult</name></decl></parameter>)</parameter_list> <block>{<block_content>
	    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>pref</name> <init>= <expr><operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>( <expr><name>positiveResult</name></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>

			<try>try <block>{<block_content>
				<decl_stmt><decl><type><name>String</name></type> <name>strRounds</name> <init>= <expr><call><name><name>mEditText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>rounds</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>strRounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_rounds_not_number</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></catch></try>

			<if_stmt><if>if <condition>( <expr><name>rounds</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>


			<decl_stmt><decl><type><name>long</name></type> <name>oldRounds</name> <init>= <expr><call><name><name>mPM</name><operator>.</operator><name>getNumRounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><call><name><name>mPM</name><operator>.</operator><name>setNumRounds</name></name><argument_list>(<argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_rounds_too_large</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mPM</name><operator>.</operator><name>setNumRounds</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></catch></try>

			<decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SaveDB</name></type> <name>save</name> <init>= <expr><operator>new</operator> <call><name>SaveDB</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AfterSave</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>oldRounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>save</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></function>

	<class><specifier>private</specifier> class <name>AfterSave</name> <super_list><extends>extends <super><name>OnFinish</name></super></extends></super_list> <block>{
		<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>mOldRounds</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mCtx</name></decl>;</decl_stmt>

		<constructor><specifier>public</specifier> <name>AfterSave</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>oldRounds</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>mCtx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mOldRounds</name> <operator>=</operator> <name>oldRounds</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>

		<function><annotation>@<name>Override</name></annotation>
		<type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>mSuccess</name></expr> )</condition> <block>{<block_content>
				<decl_stmt><decl><type><name>Preference</name></type> <name>preference</name> <init>= <expr><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name></type> <name>listner</name> <init>= <expr><call><name><name>preference</name><operator>.</operator><name>getOnPreferenceChangeListener</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>( <expr><name>listner</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>listner</name><operator>.</operator><name>onPreferenceChange</name></name><argument_list>(<argument><expr><name>preference</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>displayMessage</name><argument_list>(<argument><expr><name>mCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>mPM</name><operator>.</operator><name>setNumRounds</name></name><argument_list>(<argument><expr><name>mOldRounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></function>
		
	}</block></class>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/BetterCipherInputStream.java" hash="47c572c6b8e04756b381392bc5ee654085464d69"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilterInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>GeneralSecurityException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NullCipher</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class wraps an {@code InputStream} and a cipher so that {@code read()}
 * methods return data that are read from the underlying {@code InputStream} and
 * processed by the cipher.
 * &lt;p&gt;
 * The cipher must be initialized for the requested operation before being used
 * by a {@code BetterCipherInputStream}. For example, if a cipher initialized for
 * decryption is used with a {@code BetterCipherInputStream}, the {@code
 * BetterCipherInputStream} tries to read the data an decrypt them before returning.
 */</comment>
<class><specifier>public</specifier> class <name>BetterCipherInputStream</name> <super_list><extends>extends <super><name>FilterInputStream</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Cipher</name></type> <name>cipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>I_DEFAULT_BUFFER_SIZE</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>i_buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>index</name></decl>;</decl_stmt> <comment type="line">// index of the bytes to return from o_buffer</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>o_buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>finished</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new {@code BetterCipherInputStream} instance for an {@code
     * InputStream} and a cipher.
     *
     * @param is
     *            the input stream to read data from.
     * @param c
     *            the cipher to process the data with.
     */</comment>
    <constructor><specifier>public</specifier> <name>BetterCipherInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>Cipher</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    	<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>I_DEFAULT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new {@code BetterCipherInputStream} instance for an {@code
     * InputStream} and a cipher.
     *
     * @param is
     *            the input stream to read data from.
     * @param c
     *            the cipher to process the data with.
     * @param bufferSize
     *            size to buffer output from the cipher
     */</comment>
    <constructor><specifier>public</specifier> <name>BetterCipherInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>Cipher</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i_buffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>bufferSize</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new {@code BetterCipherInputStream} instance for an {@code
     * InputStream} without a cipher.
     * &lt;p&gt;
     * A {@code NullCipher} is created and used to process the data.
     *
     * @param is
     *            the input stream to read data from.
     */</comment>
    <constructor><specifier>protected</specifier> <name>BetterCipherInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>NullCipher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Reads the next byte from this cipher input stream.
     *
     * @return the next byte, or {@code -1} if the end of the stream is reached.
     * @throws IOException
     *             if an error occurs.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>finished</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>o_buffer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>index</name> <operator>==</operator> <name><name>o_buffer</name><operator>.</operator><name>length</name></name><operator>)</operator><operator>)</operator></expr>
                            ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr>
                            </then><else>: <expr><name><name>o_buffer</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>o_buffer</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>index</name> <operator>&lt;</operator> <name><name>o_buffer</name><operator>.</operator><name>length</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>o_buffer</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>o_buffer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num_read</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>o_buffer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>num_read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>o_buffer</name> <operator>=</operator> <call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></catch></try>
                <expr_stmt><expr><name>finished</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>o_buffer</name> <operator>=</operator> <call><name><name>cipher</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads the next {@code b.length} bytes from this input stream into buffer
     * {@code b}.
     *
     * @param b
     *            the buffer to be filled with data.
     * @return the number of bytes filled into buffer {@code b}, or {@code -1}
     *         if the end of the stream is reached.
     * @throws IOException
     *             if an error occurs.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads the next {@code len} bytes from this input stream into buffer
     * {@code b} starting at offset {@code off}.
     * &lt;p&gt;
     * if {@code b} is {@code null}, the next {@code len} bytes are read and
     * discarded.
     *
     * @param b
     *            the buffer to be filled with data.
     * @param off
     *            the offset to start in the buffer.
     * @param len
     *            the maximum number of bytes to read.
     * @return the number of bytes filled into buffer {@code b}, or {@code -1}
     *         of the of the stream is reached.
     * @throws IOException
     *             if an error occurs.
     * @throws NullPointerException
     *             if the underlying input stream is {@code null}.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Underlying input stream is null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>read_b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>read_b</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>off</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>read_b</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Skips up to n bytes from this input stream.
     * &lt;p&gt;
     * The number of bytes skipped depends on the result of a call to
     * {@link BetterCipherInputStream#available() available}. The smaller of n and the
     * result are the number of bytes being skipped.
     *
     * @param n
     *            the number of bytes that should be skipped.
     * @return the number of bytes actually skipped.
     * @throws IOException
     *             if an error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>available</name> <init>= <expr><call><name>available</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>available</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>available</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>n</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>read</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of bytes available without blocking.
     *
     * @return the number of bytes available, currently zero.
     * @throws IOException
     *             if an error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Closes this {@code BetterCipherInputStream}, also closes the underlying input
     * stream and call {@code doFinal} on the cipher object.
     *
     * @throws IOException
     *             if an error occurs.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>GeneralSecurityException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">//do like RI does</comment>
        </block_content>}</block></catch></try>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether this input stream supports {@code mark} and
     * {@code reset}, which it does not.
     *
     * @return false, since this input stream does not support {@code mark} and
     *         {@code reset}.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/CopyInputStream.java" hash="2ee3c855aea2fd46f6b3c70db56d76581e04a389"><comment type="block">/*
 * Copyright 2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class copies everything pulled through its input stream into the 
 * output stream. 
 */</comment>
<class><specifier>public</specifier> class <name>CopyInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>os</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>CopyInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>is</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>os</name></name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>readlimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>mark</name></name><argument_list>(<argument><expr><name>readlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>markSupported</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>data</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>data</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>byteCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/CountInputStream.java" hash="f52fdcb628ff529526407b72ddd8a3e49df964c5"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>CountInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>CountInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>is</name></name> <operator>=</operator> <name>is</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>readlimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>mark</name></name><argument_list>(<argument><expr><name>readlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>markSupported</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>byteCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>byteCount</name></expr>;</expr_stmt>
		<return>return <expr><call><name><name>is</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>byteCount</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/CountOutputStream.java" hash="62563da19e00aa810f3d10f41868af005f24efb9"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>CountOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><name>OutputStream</name></type> <name>os</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>CountOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>os</name></name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>


	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><name>bytes</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oneByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/HashedBlockInputStream.java" hash="95e0672a1938a3eb49cb51a766a74edead28aca9"><comment type="block">/*
 * Copyright 2010-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>


<class><specifier>public</specifier> class <name>HashedBlockInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>HASH_SIZE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>private</specifier> <name>LEDataInputStream</name></type> <name>baseStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>bufferIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>atEnd</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<constructor><specifier>public</specifier> <name>HashedBlockInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>baseStream</name> <operator>=</operator> <operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>atEnd</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
		
		<while>while <condition>( <expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr> )</condition> <block>{<block_content>
				<comment type="line">// Get more from the source into the buffer</comment>
				<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>ReadHashedBlock</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
					<return>return <expr><name>length</name> <operator>-</operator> <name>remaining</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Copy from buffer out</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>copyLen</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>copyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>copyLen</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><name>length</name></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	 * @return false, when the end of the source stream is reached 
	 * @throws IOException 
	 */</comment>
	<function><type><specifier>private</specifier> <name>boolean</name></type> <name>ReadHashedBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>atEnd</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>index</name> <init>= <expr><call><name><name>baseStream</name><operator>.</operator><name>readUInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>index</name> <operator>!=</operator> <name>bufferIndex</name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid data format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>bufferIndex</name><operator>++</operator></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>storedHash</name> <init>= <expr><call><name><name>baseStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>storedHash</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>storedHash</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>HASH_SIZE</name></expr>)</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid data format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>bufferSize</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>bufferSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid data format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>bufferSize</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>HASH_SIZE</name></expr>;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>( <expr><name><name>storedHash</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
					<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid data format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
				
			<expr_stmt><expr><name>atEnd</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><name>baseStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><name>buffer</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>bufferSize</name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid data format"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>computedHash</name> <init>= <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>( <expr><name>computedHash</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>computedHash</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name>HASH_SIZE</name></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Hash wrong size"</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>storedHash</name></expr></argument>, <argument><expr><name>computedHash</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Hashes didn't match."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>atEnd</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>ReadHashedBlock</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>output</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>bufferPos</name><operator>++</operator></expr>;</expr_stmt>
		
		<return>return <expr><name>output</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/HashedBlockOutputStream.java" hash="3d5be10682b071d7f2258567c97297314421c0f8"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<class><specifier>public</specifier> class <name>HashedBlockOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DEFAULT_BUFFER_SIZE</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt> 
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>LEDataOutputStream</name></type> <name>baseStream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>bufferIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>HashedBlockOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>DEFAULT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>HashedBlockOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>bufferSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><name>bufferSize</name> <operator>=</operator> <name>DEFAULT_BUFFER_SIZE</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>baseStream</name> <operator>=</operator> <operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>bufferSize</name></expr>]</index></name></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>oneByte</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// Write remaining buffered amount</comment>
			<expr_stmt><expr><call><name>WriteHashedBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<comment type="line">// Write terminating block</comment>
		<expr_stmt><expr><call><name>WriteHashedBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<while>while <condition>( <expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr> )</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>WriteHashedBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>copyLen</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>, <argument><expr><name>copyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>copyLen</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>WriteHashedBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeUInt</name></name><argument_list>(<argument><expr><name>bufferIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bufferIndex</name><operator>++</operator></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
			<try>try <block>{<block_content>
				<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
				<throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"SHA-256 not implemented here."</literal></expr></argument>)</argument_list></call></expr>;</throw>
			</block_content>}</block></catch></try>
			
			<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hash</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>md</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			if ( bufferPos == buffer.length) {
				hash = md.digest(buffer);
			} else {
				byte[] b = new byte[bufferPos];
				System.arraycopy(buffer, 0, b, 0, bufferPos);
				hash = md.digest(b);
			}
			*/</comment>
			
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="line">// Write 32-bits of zeros</comment>
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>( <expr><name>bufferPos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/HmacBlockInputStream.java" hash="a37a1d384ebb836cc6f6ea0de108c98ca637092b"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>HmacBlockInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>LEDataInputStream</name></type> <name>baseStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verify</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>blockIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>endOfStream</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>HmacBlockInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>baseStream</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verify</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>LEDataInputStream</name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verify</name></name> <operator>=</operator> <name>verify</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>endOfStream</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readSafeBlock</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>output</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>readUByte</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bufferPos</name><operator>++</operator></expr>;</expr_stmt>

        <return>return <expr><name>output</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>byteOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>byteCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>byteCount</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>readSafeBlock</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><name>byteCount</name> <operator>-</operator> <name>remaining</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <return>return <expr><name>byteCount</name> <operator>-</operator> <name>remaining</name></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name>remaining</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert<expr><operator>(</operator><name>copy</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><name>byteOffset</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>byteOffset</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
        </block_content>}</block></while>

        <return>return <expr><name>byteCount</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outBuffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>readSafeBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>endOfStream</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>storedHmac</name> <init>= <expr><call><name><name>baseStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>storedHmac</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>storedHmac</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"File corrupted"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbBlockIndex</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLongBuf</name></name><argument_list>(<argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>pbBlockSize</name> <init>= <expr><call><name><name>baseStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pbBlockSize</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>pbBlockSize</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"File corrupted"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockSize</name> <init>= <expr><call><name><name>LEDataInputStream</name><operator>.</operator><name>readInt</name></name><argument_list>(<argument><expr><name>pbBlockSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name><name>baseStream</name><operator>.</operator><name>readBytes</name></name><argument_list>(<argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>verify</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>cmpHmac</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blockKey</name> <init>= <expr><call><name><name>HmacBlockStream</name><operator>.</operator><name>GetHmacKey64</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>signingKey</name> <init>= <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>blockKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>signingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid Hmac"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid Hmac"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>

            <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>pbBlockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>pbBlockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>cmpHmac</name> <operator>=</operator> <call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>blockKey</name></expr></argument>, <argument><expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>cmpHmac</name></expr></argument>, <argument><expr><name>storedHmac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid Hmac"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>blockIndex</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>blockSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>endOfStream</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>byteCount</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <return>return <expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>bufferPos</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/HmacBlockOutputStream.java" hash="cdd93297a31444e4eeb200faedac1d41060b9f87"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>HmacBlockOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BUFFER_SIZE</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LEDataOutputStream</name></type> <name>baseStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>key</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>DEFAULT_BUFFER_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>blockIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>HmacBlockOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>WriteSafeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>WriteSafeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>WriteSafeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>outBuffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <while>while <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>==</operator> <name><name>buffer</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>WriteSafeBlock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>copy</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <assert>assert<expr><operator>(</operator><name>copy</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>, <argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>copy</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>copy</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>WriteSafeBlock</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bufBlockIndex</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLongBuf</name></name><argument_list>(<argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blockSizeBuf</name> <init>= <expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blockHmac</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blockKey</name> <init>= <expr><call><name><name>HmacBlockStream</name><operator>.</operator><name>GetHmacKey64</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Mac</name></type> <name>hmac</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>hmac</name> <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SecretKeySpec</name></type> <name>signingKey</name> <init>= <expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>blockKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>signingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid Hmac"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid HMAC"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>bufBlockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>blockSizeBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>hmac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>blockHmac</name> <operator>=</operator> <call><name><name>hmac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>blockHmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>blockSizeBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>bufferPos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>blockIndex</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/HmacBlockStream.java" hash="4bb1d63475cd1a81c25aeb0138a730546992a797"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>DigestOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<class><specifier>public</specifier> class <name>HmacBlockStream</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>GetHmacKey64</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blockIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>hash</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA-512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>NullOutputStream</name></type> <name>nos</name> <init>= <expr><operator>new</operator> <call><name>NullOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DigestOutputStream</name></type> <name>dos</name> <init>= <expr><operator>new</operator> <call><name>DigestOutputStream</name><argument_list>(<argument><expr><name>nos</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LEDataOutputStream</name></type> <name>leos</name> <init>= <expr><operator>new</operator> <call><name>LEDataOutputStream</name><argument_list>(<argument><expr><name>dos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>leos</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>leos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>leos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>hashKey</name> <init>= <expr><call><name><name>hash</name><operator>.</operator><name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <assert>assert<expr><operator>(</operator><name><name>hashKey</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr>;</assert>

        <return>return <expr><name>hashKey</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/LEDataInputStream.java" hash="d56af04de3c0ca44079dbd7d9fa2179e679a44b2"><comment type="block">/*
 * Copyright 2010-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name><operator>.</operator><name>Types</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>


<comment type="block" format="javadoc">/** Little endian version of the DataInputStream
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>LEDataInputStream</name> <super_list><extends>extends <super><name>InputStream</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>INT_TO_LONG_MASK</name> <init>= <expr><literal type="number">0xffffffffL</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>private</specifier> <name>InputStream</name></type> <name>baseStream</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>LEDataInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>baseStream</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<comment type="block" format="javadoc">/** Read a 32-bit value and return it as a long, so that it can
	 *  be interpreted as an unsigned integer.
	 * @return
	 * @throws IOException
	 */</comment>
	<function><type><specifier>public</specifier> <name>long</name></type> <name>readUInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>readUInt</name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>readInt</name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>readBytes</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name>readLong</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>baseStream</name><operator>.</operator><name>available</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>readlimit</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>mark</name></name><argument_list>(<argument><expr><name>readlimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>baseStream</name><operator>.</operator><name>markSupported</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>baseStream</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>baseStream</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<comment type="line">// TODO Auto-generated method stub</comment>
		<return>return <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name><name>baseStream</name><operator>.</operator><name>skip</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>readBytes</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>( <expr><name>count</name> <operator>&lt;</operator> <name>length</name></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<comment type="line">// Reached end</comment>
			<if_stmt><if>if <condition>( <expr><name>read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
				<comment type="line">// Stop early</comment>
				<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>early</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>early</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>early</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><name>buf</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>readBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>readBytes</name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readUShort</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>readBytes</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  
		  <return>return <expr><call><name>readUShort</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	  </block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>int</name></type> <name>readUShort</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<return>return <expr><call><name>readUShort</name><argument_list>(<argument><expr><name>baseStream</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	   * Read an unsigned 16-bit value.
	   * 
	   * @param buf
	   * @param offset
	   * @return
	   */</comment>
	  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readUShort</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
	    <return>return <expr><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
	  </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>readLong</name><parameter_list>( <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> 
		<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> 
		<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> 
		<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>readUInt</name><parameter_list>( <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
		  <return>return <expr><operator>(</operator><call><name>readInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INT_TO_LONG_MASK</name><operator>)</operator></expr>;</return>
	  </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readInt</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>readBytes</name><argument_list>(<argument><expr><name>is</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
		  <return>return <expr><call><name>readInt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	  </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>readUInt</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		  <return>return <expr><operator>(</operator><call><name>readInt</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>INT_TO_LONG_MASK</name><operator>)</operator></expr>;</return>
	  </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	   * Read a 32-bit value.
	   * 
	   * @param buf
	   * @param offset
	   * @return
	   */</comment>
	  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readInt</name><parameter_list>( <parameter><decl><type><name>byte</name></type> <name><name>buf</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
	    <return>return <expr><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
	           <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
	  </block_content>}</block></function>

	  <function><type><specifier>public</specifier> <name>UUID</name></type> <name>readUUID</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name>readBytes</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		  <return>return <expr><call><name><name>Types</name><operator>.</operator><name>bytestoUUID</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
	  </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/LEDataOutputStream.java" hash="5c6401f7333e17440b02a0a4bb33ce9490b7a09c"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>


<comment type="block" format="javadoc">/** Little Endian version of the DataOutputStream
 * @author bpellin
 *
 */</comment>
<class><specifier>public</specifier> class <name>LEDataOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>baseStream</name></decl>;</decl_stmt> 
	
	<constructor><specifier>public</specifier> <name>LEDataOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>baseStream</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>writeUInt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>uint</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>uint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oneByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>writeLong</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>writeInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>writeUShort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>writeUShort</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>baseStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>writeIntBuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>writeInt</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		  <return>return <expr><name>buf</name></expr>;</return>
	  </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>writeUShortBuf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		  
		  <expr_stmt><expr><call><name>writeUShort</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <return>return <expr><name>buf</name></expr>;</return>
	  </block_content>}</block></function>

	<comment type="block" format="javadoc">/** Write an unsigned 16-bit value
	   * 
	   * @param val
	   * @param buf
	   * @param offset
	   */</comment>
	  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeUShort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
		  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	  </block_content>}</block></function>

	<comment type="block" format="javadoc">/**
	   * Write a 32-bit value.
	   * 
	   * @param val
	   * @param buf
	   * @param offset
	   */</comment>
	  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeInt</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
	    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
	  </block_content>}</block></function>
	  
	  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>writeLongBuf</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
		  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><call><name>writeLong</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><name>buf</name></expr>;</return>
	  </block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeLong</name><parameter_list>( <parameter><decl><type><name>long</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/MacOutputStream.java" hash="1d58b4a3179dfd8e29c877fa56a7865673fb2efd"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>

<class><specifier>public</specifier> class <name>MacOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>Mac</name></type> <name>mac</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>OutputStream</name></type> <name>os</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MacOutputStream</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>Mac</name></type> <name>mac</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mac</name></name> <operator>=</operator> <name>mac</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>os</name></name> <operator>=</operator> <name>os</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>oneByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oneByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>byte</name><index>[]</index></name></type> <name>getMac</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/NullOutputStream.java" hash="31cca64c558841ac84f84616c10d0681389c21a4"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>NullOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/stream/RandomFileOutputStream.java" hash="64eef700242de568d85a5213135d13336f177027"><comment type="block">/*
 * Copyright 2009 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>RandomAccessFile</name></name>;</import>

<class><specifier>public</specifier> class <name>RandomFileOutputStream</name> <super_list><extends>extends <super><name>OutputStream</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><name>RandomAccessFile</name></type> <name>mFile</name></decl>;</decl_stmt>
	
	<constructor><name>RandomFileOutputStream</name><parameter_list>(<parameter><decl><type><name>RandomAccessFile</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mFile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mFile</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>		
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mFile</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mFile</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oneByte</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mFile</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>oneByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>seek</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>pos</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mFile</name><operator>.</operator><name>seek</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/timeout/TimeoutHelper.java" hash="7508537edaff9d4e9e230ae8344318dee1e96914"><comment type="block">/*
 * Copyright 2012-2018 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timeout</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>KeePass</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timers</name><operator>.</operator><name>Timeout</name></name>;</import>

<class><specifier>public</specifier> class <name>TimeoutHelper</name> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_TIMEOUT</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 5 minutes</comment>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>pause</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">// Record timeout time in case timeout service is killed</comment>
		<decl_stmt><decl><type><name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>edit</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><call><name><name>act</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>timeout_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>edit</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>( <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Loaded</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
	        <expr_stmt><expr><call><name><name>Timeout</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getTimeoutLength</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sTimeout</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_timeout_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_timeout_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>sTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>DEFAULT_TIMEOUT</name></expr>;</expr_stmt>
		</block_content>}</block></catch></try>

		<return>return <expr><name>timeout</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>resume</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Loaded</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
	        <expr_stmt><expr><call><name><name>Timeout</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		
		<comment type="line">// Check whether the timeout has expired</comment>
		<decl_stmt><decl><type><name>long</name></type> <name>cur_time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type> <name>timeout_start</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>act</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>timeout_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// The timeout never started</comment>
		<if_stmt><if>if <condition>(<expr><name>timeout_start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		
		<decl_stmt><decl><type><name>long</name></type> <name>timeout</name> <init>= <expr><call><name>getTimeoutLength</name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// We are set to never timeout</comment>
		<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>diff</name> <init>= <expr><name>cur_time</name> <operator>-</operator> <name>timeout_start</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
			<comment type="line">// We have timed out</comment>
			<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>setShutdown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>checkShutdown</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><call><name><name>App</name><operator>.</operator><name>isShutdown</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>Loaded</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name><name>KeePass</name><operator>.</operator><name>EXIT_LOCK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>act</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/timers/Timeout.java" hash="195a0bd56f85c8d890a81fbbeff12ccb39ae64bf"><comment type="block">/*
 * Copyright 2012-2019 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>timers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlarmManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>intents</name><operator>.</operator><name>Intents</name></name>;</import>

<class><specifier>public</specifier> class <name>Timeout</name> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>REQUEST_ID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_TIMEOUT</name> <init>= <expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 5 minutes</comment>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"KeePass Timeout"</literal></expr></init></decl>;</decl_stmt>

	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>PendingIntent</name></type> <name>buildIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intents</name><operator>.</operator><name>TIMEOUT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PendingIntent</name></type> <name>sender</name> <init>= <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REQUEST_ID</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_CANCEL_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>sender</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>


		<decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>sTimeout</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_timeout_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ctx</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>clipboard_timeout_default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
		<try>try <block>{<block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>sTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>DEFAULT_TIMEOUT</name></expr>;</expr_stmt>
		</block_content>}</block></catch></try>
		
		<if_stmt><if>if <condition>( <expr><name>timeout</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition> <block>{<block_content>
			<comment type="line">// No timeout don't start timeout service</comment>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>long</name></type> <name>triggerTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>timeout</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>AlarmManager</name></type> <name>am</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>ctx</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Timeout start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>am</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC</name></name></expr></argument>, <argument><expr><name>triggerTime</name></expr></argument>, <argument><expr><call><name>buildIntent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>cancel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>AlarmManager</name></type> <name>am</name> <init>= <expr><operator>(</operator><name>AlarmManager</name><operator>)</operator> <call><name><name>ctx</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Timeout cancel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>am</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><call><name>buildIntent</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/DateUtil.java" hash="7f2eb730e18b0a054bfb92d6bddaa23a91099179"><comment type="block">/*
 * Copyright 2017 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTimeZone</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>Seconds</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<class><specifier>public</specifier> class <name>DateUtil</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateTime</name></type> <name>dotNetEpoch</name> <init>= <expr><operator>new</operator> <call><name>DateTime</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>DateTimeZone</name><operator>.</operator><name>UTC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DateTime</name></type> <name>javaEpoch</name> <init>= <expr><operator>new</operator> <call><name>DateTime</name><argument_list>(<argument><expr><literal type="number">1970</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>DateTimeZone</name><operator>.</operator><name>UTC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>epochOffset</name></decl>;</decl_stmt>

    <static>static <block>{<block_content>
        <decl_stmt><decl><type><name>Date</name></type> <name>dotNet</name> <init>= <expr><call><name><name>dotNetEpoch</name><operator>.</operator><name>toDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>java</name> <init>= <expr><call><name><name>javaEpoch</name><operator>.</operator><name>toDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>epochOffset</name> <operator>=</operator> <operator>(</operator><call><name><name>javaEpoch</name><operator>.</operator><name>getMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>dotNetEpoch</name><operator>.</operator><name>getMillis</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000L</literal></expr>;</expr_stmt>
    </block_content>}</block></static>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Date</name></type> <name>convertKDBX4Time</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>seconds</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>DateTime</name></type> <name>dt</name> <init>= <expr><call><name><name>dotNetEpoch</name><operator>.</operator><name>plus</name></name><argument_list>(<argument><expr><name>seconds</name> <operator>*</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Switch corrupted dates to a more recent date that won't cause issues on the client</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>dt</name><operator>.</operator><name>isBefore</name></name><argument_list>(<argument><expr><name>javaEpoch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>javaEpoch</name><operator>.</operator><name>toDate</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>dt</name><operator>.</operator><name>toDate</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>convertDateToKDBX4Time</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>dt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Seconds</name></type> <name>secs</name> <init>= <expr><call><name><name>Seconds</name><operator>.</operator><name>secondsBetween</name></name><argument_list>(<argument><expr><name>javaEpoch</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>secs</name><operator>.</operator><name>getSeconds</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>epochOffset</name></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ArithmeticException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// secondsBetween overflowed an int</comment>
            <decl_stmt><decl><type><name>Date</name></type> <name>javaDt</name> <init>= <expr><call><name><name>dt</name><operator>.</operator><name>toDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>seconds</name> <init>= <expr><call><name><name>javaDt</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000L</literal></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>seconds</name> <operator>+</operator> <name>epochOffset</name></expr>;</return>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/EmptyUtils.java" hash="b80ece5a80908d9c7dbca1cef87598ac541afc89"><comment type="block">/*
 * Copyright 2012-2016 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV3</name></name>;</import>

<class><specifier>public</specifier> class <name>EmptyUtils</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullOrEmpty</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>str</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullOrEmpty</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>buf</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>buf</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullOrEmpty</name><parameter_list>(<parameter><decl><type><name>PwDate</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>date</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name><name>date</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>PwEntryV3</name><operator>.</operator><name>DEFAULT_PWDATE</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isNullOrEmpty</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>(</operator><name>uri</name><operator>==</operator><literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/Interaction.java" hash="76fd42b8b1b7d8825c77ec44b87aefe061bbfbf6"><comment type="block">/*
 * Copyright 2010 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ResolveInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>Interaction</name> <block>{
	<comment type="block" format="javadoc">/**
	 * Indicates whether the specified action can be used as an intent. This
	 * method queries the package manager for installed packages that can
	 * respond to an intent with the specified action. If no suitable package is
	 * found, this method returns false.
	 *
	 * @param context The application's environment.
	 * @param action The Intent action to check for availability.
	 *
	 * @return True if an Intent with the specified action can be sent and
	 *         responded to, false otherwise.
	 */</comment>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isIntentAvailable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
	    <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>packageManager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ResolveInfo</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>=
	            <expr><call><name><name>packageManager</name><operator>.</operator><name>queryIntentActivities</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>,
	                    <argument><expr><name><name>PackageManager</name><operator>.</operator><name>MATCH_DEFAULT_ONLY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <return>return <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/MemUtil.java" hash="8803f5d33025ec5ce824bf3e84a835fe86ea3479"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>MemUtil</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decompress</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bais</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GZIPInputStream</name></type> <name>gzis</name> <init>= <expr><operator>new</operator> <call><name>GZIPInputStream</name><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyStream</name></name><argument_list>(<argument><expr><name>gzis</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>compress</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>		
		<decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bais</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>GZIPOutputStream</name></type> <name>gzos</name> <init>= <expr><operator>new</operator> <call><name>GZIPOutputStream</name><argument_list>(<argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copyStream</name></name><argument_list>(<argument><expr><name>bais</name></expr></argument>, <argument><expr><name>gzos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>gzos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/NotificationUtil.java" hash="2be7b02e3ca8584ac022b7264043239ed8141775"><comment type="block">/*
 * Copyright 2018 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationChannel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>

<class><specifier>public</specifier> class <name>NotificationUtil</name> <block>{
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COPY_CHANNEL_ID</name> <init>= <expr><literal type="string">"copy"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COPY_CHANNEL_NAME</name> <init>= <expr><literal type="string">"Copy username and password"</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>createChannels</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition> <block>{<block_content>

            <decl_stmt><decl><type><name>NotificationChannel</name></type> <name>channel</name> <init>= <expr><operator>new</operator> <call><name>NotificationChannel</name><argument_list>(<argument><expr><name>COPY_CHANNEL_ID</name></expr></argument>,
                    <argument><expr><name>COPY_CHANNEL_NAME</name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_LOW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>enableLights</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>enableVibration</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>channel</name><operator>.</operator><name>setLockscreenVisibility</name></name><argument_list>(<argument><expr><name><name>Notification</name><operator>.</operator><name>VISIBILITY_PRIVATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>NotificationManager</name></type> <name>manager</name> <init>=
                    <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name><name>ctx</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>manager</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>createNotificationChannel</name></name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/PermissionUtil.java" hash="79c35764068048980bfcb5db8ebf95470ba4083e"><comment type="block">/*
 * Copyright 2018 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>

<class><specifier>public</specifier> class <name>PermissionUtil</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>READ_WRITE_PERMISSIONS</name> <init>=
            <expr><block>{<expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr>, <expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkAndRequest</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reqId</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hasRead</name> <init>= <expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>,
                <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasWrite</name> <init>= <expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>,
                <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasRead</name> <operator>||</operator> <operator>!</operator><name>hasWrite</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>READ_WRITE_PERMISSIONS</name></expr></argument>,
                    <argument><expr><name>reqId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/SprContextV4.java" hash="f084483758a8d84861c1cbab2d515fad29a5b358"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>

<class><specifier>public</specifier> class <name>SprContextV4</name> <super_list><implements>implements <super><name>Cloneable</name></super></implements></super_list> <block>{
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwDatabaseV4</name></type> <name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name>PwEntryV4</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>public</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>refsCache</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>SprContextV4</name><parameter_list>(<parameter><decl><type><name>PwDatabaseV4</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
		<try>try <block>{<block_content>
			<return>return <expr><call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/SprEngine.java" hash="6b88fd5ef8a202e36451846c89f3d72e891b17e4"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>

<class><specifier>public</specifier> class <name>SprEngine</name> <block>{
	
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SprEngineV4</name></type> <name>sprV4</name> <init>= <expr><operator>new</operator> <call><name>SprEngineV4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>SprEngine</name></type> <name>spr</name> <init>= <expr><operator>new</operator> <call><name>SprEngine</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>SprEngine</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>PwDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>instanceof</operator> <name>PwDatabaseV4</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>sprV4</name></expr>;</return>
		</block_content>}</block></if> 
		<else>else <block>{<block_content>
            <return>return <expr><name>spr</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>String</name></type> <name>compile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><name>text</name></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/SprEngineV4.java" hash="edae46036bb83bfe4727b2c869d10eb3664f345a"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabase</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwDatabaseV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntryV4</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchParametersV4</name></name>;</import>

<class><specifier>public</specifier> class <name>SprEngineV4</name> <super_list><extends>extends <super><name>SprEngine</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_RECURSION_DEPTH</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_REF_START</name> <init>= <expr><literal type="string">"{REF:"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>STR_REF_END</name> <init>= <expr><literal type="string">"}"</literal></expr></init></decl>;</decl_stmt>

	<class><specifier>public</specifier> class <name>TargetResult</name> <block>{
		<decl_stmt><decl><type><specifier>public</specifier> <name>PwEntryV4</name></type> <name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>public</specifier> <name>char</name></type> <name>wanted</name></decl>;</decl_stmt>
		
		<constructor><specifier>public</specifier> <name>TargetResult</name><parameter_list>(<parameter><decl><type><name>PwEntryV4</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>wanted</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>wanted</name></name> <operator>=</operator> <name>wanted</name></expr>;</expr_stmt>
		</block_content>}</block></constructor>
	}</block></class>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>String</name></type> <name>compile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>PwDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>SprContextV4</name></type> <name>ctx</name> <init>= <expr><operator>new</operator> <call><name>SprContextV4</name><argument_list>(<argument><expr><operator>(</operator><name>PwDatabaseV4</name><operator>)</operator><name>database</name></expr></argument>, <argument><expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<return>return <expr><call><name>compileInternal</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>compileInternal</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>SprContextV4</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursionLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>recursionLevel</name> <operator>&gt;=</operator> <name>MAX_RECURSION_DEPTH</name></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name>fillRefPlaceholders</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>recursionLevel</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>fillRefPlaceholders</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>SprContextV4</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursionLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
		
		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>db</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>text</name></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>fillRefsUsingCache</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>StrUtil</name><operator>.</operator><name>indexOfIgnoreCase</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>STR_REF_START</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>StrUtil</name><operator>.</operator><name>indexOfIgnoreCase</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>STR_REF_END</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>fullRef</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>TargetResult</name></type> <name>result</name> <init>= <expr><call><name>findRefTarget</name><argument_list>(<argument><expr><name>fullRef</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PwEntryV4</name></type> <name>found</name> <init>= <expr><name><name>result</name><operator>.</operator><name>entry</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>wanted</name> <init>= <expr><name><name>result</name><operator>.</operator><name>wanted</name></name></expr></init></decl>;</decl_stmt>
                
                <if_stmt><if>if <condition>(<expr><name>found</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                	<decl_stmt><decl><type><name>String</name></type> <name>data</name></decl>;</decl_stmt>
                	<switch>switch <condition>(<expr><name>wanted</name></expr>)</condition> <block>{<block_content>
                	<case>case <expr><literal type="char">'T'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<case>case <expr><literal type="char">'U'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<case>case <expr><literal type="char">'A'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<case>case <expr><literal type="char">'P'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<case>case <expr><literal type="char">'N'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getNotes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<case>case <expr><literal type="char">'I'</literal></expr>:</case>
                		<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name><name>found</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                		<break>break;</break>
                	<default>default:</default>
                		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                		<continue>continue;</continue>
                	</block_content>}</block></switch>
                	
                	<decl_stmt><decl><type><name>SprContextV4</name></type> <name>subCtx</name> <init>= <expr><operator>(</operator><name>SprContextV4</name><operator>)</operator> <call><name><name>ctx</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                	<expr_stmt><expr><name><name>subCtx</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>found</name></expr>;</expr_stmt>
                	
                	<decl_stmt><decl><type><name>String</name></type> <name>innerContent</name> <init>= <expr><call><name>compileInternal</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>subCtx</name></expr></argument>, <argument><expr><name>recursionLevel</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                	<expr_stmt><expr><call><name>addRefsToCache</name><argument_list>(<argument><expr><name>fullRef</name></expr></argument>, <argument><expr><name>innerContent</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>fillRefsUsingCache</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                	<continue>continue;</continue>
                </block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			
		</block_content>}</block></for>
			
		<return>return <expr><name>text</name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>TargetResult</name></type> <name>findRefTarget</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fullRef</name></decl></parameter>, <parameter><decl><type><name>SprContextV4</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fullRef</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<expr_stmt><expr><name>fullRef</name> <operator>=</operator> <call><name><name>fullRef</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>fullRef</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>STR_REF_START</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>fullRef</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><name>STR_REF_END</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 
			<return>return <expr><literal type="null">null</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>String</name></type> <name>ref</name> <init>= <expr><call><name><name>fullRef</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>STR_REF_START</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fullRef</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>STR_REF_END</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>ref</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>ref</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>ref</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>char</name></type> <name>scan</name> <init>= <expr><name><name>Character</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>wanted</name> <init>= <expr><name><name>Character</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name><name>Character</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>wanted</name> <operator>=</operator> <call><name><name>Character</name><operator>.</operator><name>toUpperCase</name></name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
		<decl_stmt><decl><type><name>SearchParametersV4</name></type> <name>sp</name> <init>= <expr><operator>new</operator> <call><name>SearchParametersV4</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>setupNone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchString</name></name> <operator>=</operator> <call><name><name>ref</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInTitles</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'U'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInUserNames</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'A'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInUrls</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInPasswords</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInNotes</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInUUIDs</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>scan</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>sp</name><operator>.</operator><name>searchInOther</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> </block_content>}</block></if>
		<else>else <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></else></if_stmt>
		
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PwEntry</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>db</name><operator>.</operator><name>rootGroup</name><operator>.</operator><name>searchEntries</name></name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
			<return>return <expr><operator>new</operator> <call><name>TargetResult</name><argument_list>(<argument><expr><operator>(</operator><name>PwEntryV4</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>wanted</name></expr></argument>)</argument_list></call></expr>;</return> 
        </block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>addRefsToCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>SprContextV4</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>ctx</name><operator>.</operator><name>refsCache</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>refsCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>String</name></type> <name>fillRefsUsingCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>SprContextV4</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>ctx</name><operator>.</operator><name>refsCache</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
			<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>StrUtil</name><operator>.</operator><name>replaceAllIgnoresCase</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><name>text</name></expr>;</return>
		
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/StrUtil.java" hash="389ca837f63c63a3cc9e40917e7a0beb822338b4"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> class <name>StrUtil</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>splitSearchTerms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>search</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>search</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>list</name></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>boolean</name></type> <name>quoted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>search</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name><name>search</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if_stmt><if>if <condition>( <expr><operator>(</operator><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
				
				<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content> 
					<expr_stmt><expr><name>quoted</name> <operator>=</operator> <operator>!</operator><name>quoted</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>sb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>list</name></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexOfIgnoreCase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>search</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>search</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<return>return <expr><call><name><name>text</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><call><name><name>search</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>indexOfIgnoreCase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>search</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>indexOfIgnoreCase</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>replaceAllIgnoresCase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newText</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>find</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>newText</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><name>text</name></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>indexOfIgnoreCase</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>find</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
			
			<decl_stmt><decl><type><name>String</name></type> <name>before</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>after</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <call><name><name>find</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>before</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>newText</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>concat</name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name><name>newText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		
		<return>return <expr><name>text</name></expr>;</return>
	</block_content>}</block></function>
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/Types.java" hash="335564772e79fb04e0ecf7c24505e4bf3f0003ff"><comment type="block">/*
 * Copyright 2009-2017 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 *
KeePass for J2ME

Copyright 2007 Naomaru Itoi &lt;nao@phoneid.org&gt;

This file was derived from 

Java clone of KeePass - A KeePass file viewer for Java
Copyright 2006 Bill Zwicky &lt;billzwicky@users.sourceforge.net&gt;

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>stream</name><operator>.</operator><name>LEDataOutputStream</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Tools for slicing and dicing Java and KeePass data types.
 * 
 * @author Bill Zwicky &lt;wrzwicky@pobox.com&gt;
 */</comment>
<class><specifier>public</specifier> class <name>Types</name> <block>{

  <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>ULONG_MAX_VALUE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/** Read an unsigned byte */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>readUByte</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/** Write an unsigned byte
   * 
   * @param val
   * @param buf
   * @param offset
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeUByte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name></type> <name>writeUByte</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><call><name>writeUByte</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <return>return <expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Return len of null-terminated string (i.e. distance to null)
   * within a byte buffer.
   * 
   * @param buf
   * @param offset
   * @return
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>strlen</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>len</name></expr>;</return>
  </block_content>}</block></function>



  <comment type="block" format="javadoc">/**
   * Copy a sequence of bytes into a new array.
   * 
   * @param b - source array
   * @param offset - first byte
   * @param len - number of bytes
   * @return new byte[len]
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>extract</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b2</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>b2</name></expr>;</return>
  </block_content>}</block></function>
  
  
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>CRLFbuf</name> <init>= <expr><block>{ <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CRLF</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>CRLFbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SEP</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>REPLACE</name> <init>= <expr><operator>!</operator> <call><name><name>SEP</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>readCString</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument></throws> <block>{<block_content>
	  <decl_stmt><decl><type><name>String</name></type> <name>jstring</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>( <expr><name>REPLACE</name></expr> )</condition> <block>{<block_content>
		  <expr_stmt><expr><name>jstring</name> <operator>=</operator> <call><name><name>jstring</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>SEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	  
	  <return>return <expr><name>jstring</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>writeCString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>os</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
	  <if_stmt><if>if <condition>( <expr><name>str</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
		  <comment type="line">// Write out a null character</comment>
		  <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
	  </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>( <expr><name>REPLACE</name></expr> )</condition> <block>{<block_content>
		  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>SEP</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if></if_stmt>
	  
	  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>initial</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>initial</name><operator>.</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	  <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeIntBuf</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>initial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <return>return <expr><name>length</name></expr>;</return>
  </block_content>}</block></function>
    
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>bytestoUUID</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <return>return <expr><call><name>bytestoUUID</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>UUID</name></type> <name>bytestoUUID</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <decl_stmt><decl><type><name>long</name></type> <name>lsb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		  <expr_stmt><expr><name>lsb</name> <operator>=</operator> <operator>(</operator><name>lsb</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	  </block_content>}</block></for>
	  
	  <decl_stmt><decl><type><name>long</name></type> <name>msb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		  <expr_stmt><expr><name>msb</name> <operator>=</operator> <operator>(</operator><name>msb</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <name>offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	  </block_content>}</block></for>

	  <return>return <expr><operator>new</operator> <call><name>UUID</name><argument_list>(<argument><expr><name>msb</name></expr></argument>, <argument><expr><name>lsb</name></expr></argument>)</argument_list></call></expr>;</return>

  </block_content>}</block></function>
  
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>UUIDtoBytes</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
	  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getMostSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name><name>LEDataOutputStream</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>uuid</name><operator>.</operator><name>getLeastSignificantBits</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <return>return <expr><name>buf</name></expr>;</return>
  </block_content>}</block></function>
  
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/UriUtil.java" hash="cb155599b59aceceb761f7ce16c655b0f6800fbd"><comment type="block">/*
 * Copyright 2016-2018 Brian Pellin.
 *
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>compat</name><operator>.</operator><name>StorageAF</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by bpellin on 3/5/16.
 */</comment>
<class><specifier>public</specifier> class <name>UriUtil</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Uri</name></type> <name>parseDefaultFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>scheme</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>authority</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Uri</name></type> <name>parseDefaultFile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>scheme</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>authority</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equalsDefaultfile</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>parseDefaultFile</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Uri</name></type> <name>uriRight</name> <init>= <expr><call><name>parseDefaultFile</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>left</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>uriRight</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>InputStream</name></type> <name>getUriInputStream</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>scheme</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name><name>scheme</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>ctx</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Many android apps respond with non-writeable content URIs that correspond to files.
     * This will attempt to translate the content URIs to file URIs when possible/appropriate
     * @param uri
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Uri</name></type> <name>translate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// StorageAF provides nice URIs</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>StorageAF</name><operator>.</operator><name>useStorageFramework</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hasWritableContentUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>uri</name></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><name>uri</name></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>filepath</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <comment type="line">// Use content resolver to try and find the file</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>scheme</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>ctx</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>ImageColumns</name><operator>.</operator><name>DATA</name></name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>filepath</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidFilePath</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>filepath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Try using the URI path as a straight file</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>filepath</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>getEncodedPath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidFilePath</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>filepath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <comment type="line">// Fall back to URI if this fails.</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>filepath</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <comment type="line">// Update the file to a file URI</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Uri</name><operator>.</operator><name>Builder</name></name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name><name>Uri</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>b</name><operator>.</operator><name>scheme</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>authority</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>path</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>uri</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidFilePath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filepath</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>canRead</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Whitelist for known content providers that support writing
     * @param uri
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>hasWritableContentUri</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>scheme</name> <init>= <expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>EmptyUtils</name><operator>.</operator><name>isNullOrEmpty</name></name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>scheme</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return> </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="string">"com.google.android.apps.docs.storage"</literal></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></switch>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/Util.java" hash="ac4d92e825ba5193ebb0a597bf937e08fec69659"><comment type="block">/*
 * Copyright 2009-2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>exception</name><operator>.</operator><name>SamsungClipboardException</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<class><specifier>public</specifier> class <name>Util</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getClipboard</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>ClipboardManager</name></type> <name>clipboard</name> <init>= <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CharSequence</name></type> <name>csText</name> <init>= <expr><call><name><name>clipboard</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>csText</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><call><name><name>csText</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyToClipboard</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SamsungClipboardException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name>ClipboardManager</name></type> <name>clipboard</name> <init>= <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<try>try <block>{<block_content>
			<expr_stmt><expr><call><name><name>clipboard</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<throw>throw <expr><operator>new</operator> <call><name>SamsungClipboardException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
		</block_content>}</block></catch></try>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>gotoUrl</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ActivityNotFoundException</name></expr></argument></throws> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>url</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>url</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>gotoUrl</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ActivityNotFoundException</name></expr></argument></throws> <block>{<block_content>
		<expr_stmt><expr><call><name>gotoUrl</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getEditText</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>te</name> <init>=  <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>act</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>te</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name><name>te</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><literal type="string">""</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setEditText</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>TextView</name></type> <name>te</name> <init>=  <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>act</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>te</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>te</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAX_BUF_SIZE</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>copyStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>MAX_BUF_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>copyStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxBytes</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><name>maxBytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>bufSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>maxBytes</name></expr></argument>, <argument><expr><name>MAX_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>bufSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>origMax</name> <init>= <expr><name>maxBytes</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
		<do>do <block>{<block_content>
			<assert>assert<expr><operator>(</operator><name>maxBytes</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</assert>
			<if_stmt><if>if <condition>(<expr><name>maxBytes</name> <operator>&gt;=</operator> <name><name>buf</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxBytes</name> <operator>-=</operator> <name>read</name></expr>;</expr_stmt>

		</block_content>}</block> while <condition>(<expr><name>maxBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

		<comment type="line">// return total amonut read</comment>
		<return>return <expr><name>origMax</name> <operator>-</operator> <name>maxBytes</name></expr>;</return>
	</block_content>}</block></function>

	
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/utils/UuidUtil.java" hash="bc632151b6d985274c882a49094cc904d8c4e6e8"><comment type="block">/*
 * Copyright 2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>UuidUtil</name> <block>{
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toHexString</name><parameter_list>(<parameter><decl><type><name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name> <init>= <expr><call><name><name>Types</name><operator>.</operator><name>UUIDtoBytes</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="null">null</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>buf</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <return>return <expr><literal type="string">""</literal></expr>;</return> </block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>short</name></type> <name>bt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>high</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><name>bt</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>bt</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
			
		
			<expr_stmt><expr><name>low</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>bt</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>char</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>byteToChar</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>byteToChar</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>byteToChar</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>byteToChar</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		
		<return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<comment type="line">// Use short to represent unsigned byte</comment>
	<function><type><specifier>private</specifier> <specifier>static</specifier> <name>char</name></type> <name>byteToChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>bt</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bt</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'A'</literal> <operator>+</operator> <name>bt</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>bt</name><operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/ClickView.java" hash="333482e5b833bbca57e3e8a82cfc7ba1277a86a5"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ClickView</name> <super_list><extends>extends <super><name>LinearLayout</name></super></extends></super_list> <block>{
	<decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>readOnly</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>ClickView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>readOnly</name> <operator>=</operator> <call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>readOnly</name></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>()</parameter_list>;</function_decl>
	
	<function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>void</name></type> <name>onCreateMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list>;</function_decl>
	
	<function_decl><type><specifier>abstract</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/EntryContentsView.java" hash="5793136279312fb8d6c2197dbc35d784c850c25d"><comment type="block">/*
 * Copyright 2010-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>EntryContentsView</name> <super_list><extends>extends <super><name>LinearLayout</name></super></extends></super_list> <block>{
	
	<constructor><specifier>public</specifier> <name>EntryContentsView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>EntryContentsView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_view_contents</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>LayoutParams</name></type> <name>generateDefaultLayoutParams</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/EntryEditSection.java" hash="a167868bc6136ed0299691aea94cc2af775f0981"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>security</name><operator>.</operator><name>ProtectedString</name></name>;</import>

<class><specifier>public</specifier> class <name>EntryEditSection</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{
	
	<constructor><specifier>public</specifier> <name>EntryEditSection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>EntryEditSection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>EntryEditSection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<comment type="block">/*
	public EntryEditSection(Context context, AttributeSet attrs, String title, ProtectedString value) {
		super(context, attrs);
		
		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		inflate(inflater, context, title, value);
		
		fillData(title, value);
	}
	*/</comment>

	<comment type="block">/*
	private int getLayout() {
		return R.layout.entry_edit_section;
	}

	protected void inflate(LayoutInflater inflater, Context context,
			String title, ProtectedString value) {
		
		inflater.inflate(getLayout(), this);
	*/</comment>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>setData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>ProtectedString</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>CheckBox</name></type> <name>cb</name> <init>= <expr><operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>protection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cb</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>isProtected</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>private</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>TextView</name></type> <name>tvTitle</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>tvTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/EntrySection.java" hash="f74181d45f22b3c16fe85b82b860b459fb06c587"><comment type="block">/*
 * Copyright 2011-2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>EntrySection</name> <super_list><extends>extends <super><name>LinearLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>EntrySection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>EntrySection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>EntrySection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>inflater</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>protected</specifier> <name>int</name></type> <name>getLayout</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_section</name></name></expr>;</return>
	</block_content>}</block></function>

	<function><type><specifier>protected</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getLayout</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>TextView</name></type> <name>tvTitle</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>tvTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/FileNameView.java" hash="d53ecea1a1b4dedc1b69ddd4e47a0628b424f385"><comment type="block">/*
 * Copyright 2010-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>FileNameView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>FileNameView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>FileNameView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	

	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>file_selection_filename</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>updateExternalStorageWarning</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>warning</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>state</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED_READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>warning</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>warning_read_only</name></name></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>warning</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>warning_unmounted</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
		<decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>label_warning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TextView</name></type> <name>label</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>label_open_by_filename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lp</name> <init>= <expr><operator>new</operator> <call><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>warning</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>lp</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>BELOW</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>label_warning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/GroupAddEntryView.java" hash="3624a8ebc692a57a61282fd41cd737a86bd9cc32"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupAddEntryView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>GroupAddEntryView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>GroupAddEntryView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_add_entry</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/GroupEmptyView.java" hash="fbef1c1cb21ee2876c08c505ff16863b53a20ae4"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupEmptyView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>GroupEmptyView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>GroupEmptyView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_empty</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/GroupHeaderView.java" hash="ca330db2399b4ac84a75e0f75120a784e05d3ab4"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupHeaderView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>GroupHeaderView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>GroupHeaderView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_header</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>View</name></type> <name>readOnlyIndicator</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>read_only</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>readOnlyIndicator</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/GroupRootView.java" hash="1948a85e4e283ae44645ad9516f4737b7faf734e"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupRootView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>GroupRootView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>GroupRootView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_add_entry</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>Button</name></type> <name>addEntry</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addEntry</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/GroupViewOnlyView.java" hash="47943317f646dae8260cb10b655f8d777ce0a7fc"><comment type="block">/*
 * Copyright 2009-2011 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupViewOnlyView</name> <super_list><extends>extends <super><name>RelativeLayout</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>GroupViewOnlyView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>GroupViewOnlyView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_add_entry</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Hide the buttons</comment>
		<decl_stmt><decl><type><name>View</name></type> <name>addGroup</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addGroup</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>addEntry</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>add_entry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>addEntry</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>divider2</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>divider2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>divider2</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>list</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LayoutParams</name></type> <name>lp</name> <init>= <expr><operator>(</operator><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>lp</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name>ALIGN_PARENT_BOTTOM</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
	</block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/NoFocusScrollView.java" hash="aa12c1772813c397a8a715820bc3a49597ac958e"><comment type="block">/*
 * Copyright 2013 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ScrollView</name></name>;</import>

<class><specifier>public</specifier> class <name>NoFocusScrollView</name> <super_list><extends>extends <super><name>ScrollView</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>NoFocusScrollView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>NoFocusScrollView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>NoFocusScrollView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></type> <name>getFocusables</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/PasswordEditText.java" hash="7b84fc855ac4e6fb3de4c864098c4665d03114b8"><comment type="block">/*
 * Copyright 2015-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppCompatEditText</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>assets</name><operator>.</operator><name>TypefaceFactory</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordEditText</name> <super_list><extends>extends <super><name>AppCompatEditText</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>PasswordEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PasswordEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PasswordEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>private</specifier> <name>Typeface</name></type> <name>getTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Typeface</name></type> <name>tfOverride</name> <init>= <expr><call><name><name>TypefaceFactory</name><operator>.</operator><name>getTypeface</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fonts/DejaVuSansMono.ttf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tfOverride</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>tfOverride</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>tf</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name>getTypeface</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name>getTypeface</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/PasswordTextViewSelect.java" hash="84c25860b53fb97ab718ed94f1e497ab9131c660"><comment type="block">/*
 * Copyright 2015 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>assets</name><operator>.</operator><name>TypefaceFactory</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<class><specifier>public</specifier> class <name>PasswordTextViewSelect</name> <super_list><extends>extends <super><name>TextViewSelect</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>PasswordTextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PasswordTextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>PasswordTextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><type><specifier>private</specifier> <name>Typeface</name></type> <name>getTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Typeface</name></type> <name>tfOverride</name> <init>= <expr><call><name><name>TypefaceFactory</name><operator>.</operator><name>getTypeface</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fonts/DejaVuSansMono.ttf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>tfOverride</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><name>tfOverride</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><name>tf</name></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name>getTypeface</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>tf</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name>getTypeface</name><argument_list>(<argument><expr><name>tf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/PwEntryView.java" hash="17a0c3537266947c581734845da5c26e00fe6ed8"><comment type="block">/*
 * Copyright 2009-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>EntryActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupBaseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>ProgressTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>DeleteEntry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name><operator>.</operator><name>PrefsUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>PwEntryView</name> <super_list><extends>extends <super><name>ClickView</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>protected</specifier> <name>GroupBaseActivity</name></type> <name>mAct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>PwEntry</name></type> <name>mPw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>TextView</name></type> <name>mTv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mPos</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MENU_OPEN</name> <init>= <expr><name><name>Menu</name><operator>.</operator><name>FIRST</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MENU_DELETE</name> <init>= <expr><name>MENU_OPEN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwEntryView</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><operator>new</operator> <call><name>PwEntryView</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	
	<constructor><specifier>protected</specifier> <name>PwEntryView</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mAct</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>ev</name> <init>= <expr><call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_list_entry</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>mTv</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>ev</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>mTv</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><call><name><name>PrefsUtil</name><operator>.</operator><name>getListTextSize</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>LayoutParams</name></type> <name>lp</name> <init>= <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>addView</name><argument_list>(<argument><expr><name>ev</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>populateView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>ev</name></decl></parameter>, <parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mPw</name> <operator>=</operator> <name>pw</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mPos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ImageView</name></type> <name>iv</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>ev</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entry_icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>drawFactory</name><operator>.</operator><name>assignDrawableTo</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pw</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mTv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>mPw</name><operator>.</operator><name>getDisplayTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>convertView</name><parameter_list>(<parameter><decl><type><name>PwEntry</name></type> <name>pw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>refreshTitle</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>mTv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>mPw</name><operator>.</operator><name>getDisplayTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>launchEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
		
	<function><type><specifier>private</specifier> <name>void</name></type> <name>launchEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>EntryActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>mPw</name></expr></argument>, <argument><expr><name>mPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>deleteEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DeleteEntry</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>DeleteEntry</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mPw</name></expr></argument>, <argument><expr><name><name>mAct</name><operator>.</operator></name>new <call><name>RefreshTask</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	</block_content>}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreateMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU_OPEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU_DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_delete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
		
		<case>case <expr><name>MENU_OPEN</name></expr>:</case>
			<expr_stmt><expr><call><name>launchEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		<case>case <expr><name>MENU_DELETE</name></expr>:</case>
			<expr_stmt><expr><call><name>deleteEntry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			
		<default>default:</default>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></function>
	
	
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/PwGroupView.java" hash="a4db35d6d4a0cfec7c767d4bf2ac06708b90adb8"><comment type="block">/*
 * Copyright 2009-2012 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupBaseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroupV3</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>settings</name><operator>.</operator><name>PrefsUtil</name></name>;</import>


<class><specifier>public</specifier> class <name>PwGroupView</name> <super_list><extends>extends <super><name>ClickView</name></super></extends></super_list> <block>{
	
	<decl_stmt><decl><type><specifier>protected</specifier> <name>PwGroup</name></type> <name>mPw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>GroupBaseActivity</name></type> <name>mAct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>protected</specifier> <name>TextView</name></type> <name>mTv</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MENU_OPEN</name> <init>= <expr><name><name>Menu</name><operator>.</operator><name>FIRST</name></name></expr></init></decl>;</decl_stmt>
	
	<function><type><specifier>public</specifier> <specifier>static</specifier> <name>PwGroupView</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name>pw</name> <operator>instanceof</operator> <name>PwGroupV3</name></expr> )</condition> <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwGroupViewV3</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<return>return <expr><operator>new</operator> <call><name>PwGroupView</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>
	
	<constructor><specifier>protected</specifier> <name>PwGroupView</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mAct</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>View</name></type> <name>gv</name> <init>= <expr><call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>group_list_entry</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name>mTv</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>gv</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>size</name> <init>= <expr><call><name><name>PrefsUtil</name><operator>.</operator><name>getListTextSize</name></name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
		<expr_stmt><expr><call><name><name>mTv</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>TextView</name></type> <name>label</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>gv</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>size</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>gv</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>LayoutParams</name></type> <name>lp</name> <init>= <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name>addView</name><argument_list>(<argument><expr><name>gv</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>populateView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>gv</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><name>mPw</name> <operator>=</operator> <name>pw</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ImageView</name></type> <name>iv</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>gv</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_icon</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>drawFactory</name><operator>.</operator><name>assignDrawableTo</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pw</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>mTv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>pw</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>public</specifier> <name>void</name></type> <name>convertView</name><parameter_list>(<parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>populateView</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>launchGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>launchGroup</name><parameter_list>()</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>GroupActivity</name><operator>.</operator><name>Launch</name></name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>mPw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreateMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU_OPEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_open</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			
		<case>case <expr><name>MENU_OPEN</name></expr>:</case>
			<expr_stmt><expr><call><name>launchGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="boolean">true</literal></expr>;</return>
		
		<default>default:</default>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></switch>
	</block_content>}</block></function>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/PwGroupViewV3.java" hash="09d6a3d74ea644de56703ed8e1efa1668a22cbfc"><comment type="block">/*
 * Copyright 2010-2014 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>android</name><operator>.</operator><name>keepass</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>GroupBaseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>ProgressTask</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>app</name><operator>.</operator><name>App</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>PwGroup</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>database</name><operator>.</operator><name>edit</name><operator>.</operator><name>DeleteGroup</name></name>;</import>

<class><specifier>public</specifier> class <name>PwGroupViewV3</name> <super_list><extends>extends <super><name>PwGroupView</name></super></extends></super_list> <block>{

	<decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MENU_DELETE</name> <init>= <expr><name>MENU_OPEN</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>protected</specifier> <name>PwGroupViewV3</name><parameter_list>(<parameter><decl><type><name>GroupBaseActivity</name></type> <name>act</name></decl></parameter>, <parameter><decl><type><name>PwGroup</name></type> <name>pw</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>act</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>onCreateMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>menuInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>readOnly</name></expr>)</condition> <block>{<block_content>
		    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MENU_DELETE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_delete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>boolean</name></type> <name>onContextItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name><name>super</name><operator>.</operator><name>onContextItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>
			<switch>switch <condition>( <expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
			<case>case <expr><name>MENU_DELETE</name></expr>:</case>
				<decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>DeleteGroup</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>DeleteGroup</name><argument_list>(<argument><expr><call><name><name>App</name><operator>.</operator><name>getDB</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mPw</name></expr></argument>, <argument><expr><name>mAct</name></expr></argument>, <argument><expr><name><name>mAct</name><operator>.</operator></name>new <call><name>AfterDeleteGroup</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ProgressTask</name></type> <name>pt</name> <init>= <expr><operator>new</operator> <call><name>ProgressTask</name><argument_list>(<argument><expr><name>mAct</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>saving_database</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>pt</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			</block_content>}</block></switch>

		</block_content>}</block></if></if_stmt>
		
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/com/keepassdroid/view/TextViewSelect.java" hash="e193ba2ea7d4f4a537399f48d607a9c80010cb8e"><comment type="block">/*
 * Copyright 2011-2020 Brian Pellin.
 *     
 * This file is part of KeePassDroid.
 *
 *  KeePassDroid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  KeePassDroid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with KeePassDroid.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 *
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>keepassdroid</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>ArrowKeyMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>MovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>appcompat</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppCompatEditText</name></name>;</import>

<class><specifier>public</specifier> class <name>TextViewSelect</name> <super_list><extends>extends <super><name>AppCompatEditText</name></super></extends></super_list> <block>{

	<constructor><specifier>public</specifier> <name>TextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>

	<constructor><specifier>public</specifier> <name>TextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>textViewStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>TextViewSelect</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>setFocusable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setFocusableInTouchMode</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></constructor>


	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>MovementMethod</name></type> <name>getDefaultMovementMethod</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><call><name><name>ArrowKeyMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>protected</specifier> <name>boolean</name></type> <name>getDefaultEditable</name><parameter_list>()</parameter_list> <block>{<block_content>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	</block_content>}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>BufferType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>EDITABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/IterableMap.java" hash="ed55a12b1edaa1677ecdf5f43f976924d2d1769e"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Defines a map that can be iterated directly without needing to create an entry set.
 * &lt;p&gt;
 * A map iterator is an efficient way of iterating over maps.
 * There is no need to access the entry set or cast to Map Entry objects.
 * &lt;pre&gt;
 * IterableMap map = new HashedMap();
 * MapIterator it = map.mapIterator();
 * while (it.hasNext()) {
 *   Object key = it.next();
 *   Object value = it.getValue();
 *   it.setValue("newValue");
 * }
 * &lt;/pre&gt;
 * 
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 *
 * @author Stephen Colebourne
 */</comment>
<interface><specifier>public</specifier> interface <name>IterableMap</name> <super_list><extends>extends <super><name>Map</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Obtains a &lt;code&gt;MapIterator&lt;/code&gt; over the map.
     * &lt;p&gt;
     * A map iterator is an efficient way of iterating over maps.
     * There is no need to access the entry set or cast to Map Entry objects.
     * &lt;pre&gt;
     * IterableMap map = new HashedMap();
     * MapIterator it = map.mapIterator();
     * while (it.hasNext()) {
     *   Object key = it.next();
     *   Object value = it.getValue();
     *   it.setValue("newValue");
     * }
     * &lt;/pre&gt;
     * 
     * @return a map iterator
     */</comment>
    <function_decl><type><name>MapIterator</name></type> <name>mapIterator</name><parameter_list>()</parameter_list>;</function_decl>
    
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/KeyValue.java" hash="46d3e38a22f5f301e664f8e07936111438a228fa"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Defines a simple key value pair.
 * &lt;p&gt;
 * A Map Entry has considerable additional semantics over and above a simple
 * key-value pair. This interface defines the minimum key value, with just the
 * two get methods.
 *
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Stephen Colebourne
 */</comment>
<interface><specifier>public</specifier> interface <name>KeyValue</name> <block>{

    <comment type="block" format="javadoc">/**
     * Gets the key from the pair.
     *
     * @return the key 
     */</comment>
    <function_decl><type><name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the value from the pair.
     *
     * @return the value
     */</comment>
    <function_decl><type><name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/MapIterator.java" hash="e6ccb2e4ef2c037131cdcd1e6489d910a0b3cf86"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Defines an iterator that operates over a &lt;code&gt;Map&lt;/code&gt;.
 * &lt;p&gt;
 * This iterator is a special version designed for maps. It can be more
 * efficient to use this rather than an entry set iterator where the option
 * is available, and it is certainly more convenient.
 * &lt;p&gt;
 * A map that provides this interface may not hold the data internally using
 * Map Entry objects, thus this interface can avoid lots of object creation.
 * &lt;p&gt;
 * In use, this iterator iterates through the keys in the map. After each call
 * to &lt;code&gt;next()&lt;/code&gt;, the &lt;code&gt;getValue()&lt;/code&gt; method provides direct
 * access to the value. The value can also be set using &lt;code&gt;setValue()&lt;/code&gt;.
 * &lt;pre&gt;
 * MapIterator it = map.mapIterator();
 * while (it.hasNext()) {
 *   Object key = it.next();
 *   Object value = it.getValue();
 *   it.setValue(newValue);
 * }
 * &lt;/pre&gt;
 *  
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 *
 * @author Stephen Colebourne
 */</comment>
<interface><specifier>public</specifier> interface <name>MapIterator</name> <super_list><extends>extends <super><name>Iterator</name></super></extends></super_list> <block>{
    
    <comment type="block" format="javadoc">/**
     * Checks to see if there are more entries still to be iterated.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the iterator has more elements
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the next &lt;em&gt;key&lt;/em&gt; from the &lt;code&gt;Map&lt;/code&gt;.
     *
     * @return the next key in the iteration
     * @throws java.util.NoSuchElementException if the iteration is finished
     */</comment>
    <function_decl><type><name>Object</name></type> <name>next</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the current key, which is the key returned by the last call
     * to &lt;code&gt;next()&lt;/code&gt;.
     *
     * @return the current key
     * @throws IllegalStateException if &lt;code&gt;next()&lt;/code&gt; has not yet been called
     */</comment>
    <function_decl><type><name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Gets the current value, which is the value associated with the last key
     * returned by &lt;code&gt;next()&lt;/code&gt;.
     *
     * @return the current value
     * @throws IllegalStateException if &lt;code&gt;next()&lt;/code&gt; has not yet been called
     */</comment>
    <function_decl><type><name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Removes the last returned key from the underlying &lt;code&gt;Map&lt;/code&gt; (optional operation).
     * &lt;p&gt;
     * This method can be called once per call to &lt;code&gt;next()&lt;/code&gt;.
     *
     * @throws UnsupportedOperationException if remove is not supported by the map
     * @throws IllegalStateException if &lt;code&gt;next()&lt;/code&gt; has not yet been called
     * @throws IllegalStateException if &lt;code&gt;remove()&lt;/code&gt; has already been called
     *  since the last call to &lt;code&gt;next()&lt;/code&gt;
     */</comment>
    <function_decl><type><name>void</name></type> <name>remove</name><parameter_list>()</parameter_list>;</function_decl>
    
    <comment type="block" format="javadoc">/**
     * Sets the value associated with the current key (optional operation).
     *
     * @param value  the new value
     * @return the previous value
     * @throws UnsupportedOperationException if setValue is not supported by the map
     * @throws IllegalStateException if &lt;code&gt;next()&lt;/code&gt; has not yet been called
     * @throws IllegalStateException if &lt;code&gt;remove()&lt;/code&gt; has been called since the
     *  last call to &lt;code&gt;next()&lt;/code&gt;
     */</comment>
    <function_decl><type><name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/ResettableIterator.java" hash="eec6628c869b260c88e5e10357bb6ad6201db137"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<comment type="block" format="javadoc">/** 
 * Defines an iterator that can be reset back to an initial state.
 * &lt;p&gt;
 * This interface allows an iterator to be repeatedly reused.
 *
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Stephen Colebourne
 */</comment>
<interface><specifier>public</specifier> interface <name>ResettableIterator</name> <super_list><extends>extends <super><name>Iterator</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Resets the iterator back to the position at which the iterator
     * was created.
     */</comment>
    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java" hash="b46217f28afdfa526c68c2ed5148fb3e0ad8cd81"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>iterators</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>

<comment type="block" format="javadoc">/** 
 * Provides an implementation of an empty iterator.
 *
 * @since Commons Collections 3.1
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Stephen Colebourne
 */</comment>
<class><specifier>abstract</specifier> class <name>AbstractEmptyIterator</name> <block>{
 
    <comment type="block" format="javadoc">/**
     * Constructor.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractEmptyIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasPrevious</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>nextIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>previousIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"add() not supported for empty Iterator"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Iterator contains no elements"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// do nothing</comment>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java" hash="b0c6680a45d78cc3087402edccca8f43ff34350e"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>iterators</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>ResettableIterator</name></name>;</import>

<comment type="block" format="javadoc">/** 
 * Provides an implementation of an empty iterator.
 * &lt;p&gt;
 * This class provides an implementation of an empty iterator.
 * This class provides for binary compatability between Commons Collections
 * 2.1.1 and 3.1 due to issues with &lt;code&gt;IteratorUtils&lt;/code&gt;.
 *
 * @since Commons Collections 2.1.1 and 3.1
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> class <name>EmptyIterator</name> <super_list><extends>extends <super><name>AbstractEmptyIterator</name></super></extends> <implements>implements <super><name>ResettableIterator</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Singleton instance of the iterator.
     * @since Commons Collections 3.1
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ResettableIterator</name></type> <name>RESETTABLE_INSTANCE</name> <init>= <expr><operator>new</operator> <call><name>EmptyIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Singleton instance of the iterator.
     * @since Commons Collections 2.1.1 and 3.1
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Iterator</name></type> <name>INSTANCE</name> <init>= <expr><name>RESETTABLE_INSTANCE</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructor.
     */</comment>
    <constructor><specifier>protected</specifier> <name>EmptyIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java" hash="581f0f0728c52c8c955d8944d48a98793d6bfd4b"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>iterators</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>MapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>ResettableIterator</name></name>;</import>

<comment type="block" format="javadoc">/** 
 * Provides an implementation of an empty map iterator.
 *
 * @since Commons Collections 3.1
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> class <name>EmptyMapIterator</name> <super_list><extends>extends <super><name>AbstractEmptyIterator</name></super></extends> <implements>implements <super><name>MapIterator</name></super>, <super><name>ResettableIterator</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Singleton instance of the iterator.
     * @since Commons Collections 3.1
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>MapIterator</name></type> <name>INSTANCE</name> <init>= <expr><operator>new</operator> <call><name>EmptyMapIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructor.
     */</comment>
    <constructor><specifier>protected</specifier> <name>EmptyMapIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java" hash="664ed9e42e5aa188489348d43d1602adb8f5c519"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>keyvalue</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>KeyValue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Abstract pair class to assist with creating &lt;code&gt;KeyValue&lt;/code&gt;
 * and {@link java.util.Map.Entry Map.Entry} implementations.
 *
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author James Strachan
 * @author Michael A. Smith
 * @author Neil O'Toole
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractKeyValue</name> <super_list><implements>implements <super><name>KeyValue</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/** The key */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Object</name></type> <name>key</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The value */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Object</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new pair with the specified key and given value.
     *
     * @param key  the key for the entry, may be null
     * @param value  the value for the entry, may be null
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractKeyValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Gets the key from the pair.
     *
     * @return the key 
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>key</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value from the pair.
     *
     * @return the value
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>value</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a debugging String view of the pair.
     * 
     * @return a String view of the entry
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java" hash="3edf8ea083e0e5a55b4dc61ef0598bd2ef00caed"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>keyvalue</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Abstract Pair class to assist with creating correct
 * {@link java.util.Map.Entry Map.Entry} implementations.
 *
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author James Strachan
 * @author Michael A. Smith
 * @author Neil O'Toole
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractMapEntry</name> <super_list><extends>extends <super><name>AbstractKeyValue</name></super></extends> <implements>implements <super><name><name>Map</name><operator>.</operator><name>Entry</name></name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new entry with the given key and given value.
     *
     * @param key  the key for the entry, may be null
     * @param value  the value for the entry, may be null
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractMapEntry</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">// Map.Entry interface</comment>
    <comment type="line">//-------------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/** 
     * Sets the value stored in this &lt;code&gt;Map.Entry&lt;/code&gt;.
     * &lt;p&gt;
     * This &lt;code&gt;Map.Entry&lt;/code&gt; is not connected to a Map, so only the
     * local data is changed.
     *
     * @param value  the new value
     * @return the previous value
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Object</name></type> <name>answer</name> <init>= <expr><name><name>this</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><name>answer</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compares this &lt;code&gt;Map.Entry&lt;/code&gt; with another &lt;code&gt;Map.Entry&lt;/code&gt;.
     * &lt;p&gt;
     * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}
     * 
     * @param obj  the object to compare to
     * @return true if equal key and value
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>other</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return
            <expr><operator>(</operator><ternary><condition><expr><call><name>getKey</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>other</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><ternary><condition><expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>other</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets a hashCode compatible with the equals method.
     * &lt;p&gt;
     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}
     * 
     * @return a suitable hash code
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>getKey</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>^</operator>
               <operator>(</operator><ternary><condition><expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return> 
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java" hash="c69d2b2b6ffe1f60a3ed2f4a82cc4494f47e7793"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>keyvalue</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>KeyValue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A restricted implementation of {@link java.util.Map.Entry} that prevents
 * the &lt;code&gt;Map.Entry&lt;/code&gt; contract from being broken.
 *
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author James Strachan
 * @author Michael A. Smith
 * @author Neil O'Toole
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DefaultMapEntry</name> <super_list><extends>extends <super><name>AbstractMapEntry</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/**
     * Constructs a new entry with the specified key and given value.
     *
     * @param key  the key for the entry, may be null
     * @param value  the value for the entry, may be null
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultMapEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new entry from the specified &lt;code&gt;KeyValue&lt;/code&gt;.
     *
     * @param pair  the pair to copy, must not be null
     * @throws NullPointerException if the entry is null
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultMapEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>KeyValue</name></type> <name>pair</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>pair</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pair</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new entry from the specified &lt;code&gt;Map.Entry&lt;/code&gt;.
     *
     * @param entry  the entry to copy, must not be null
     * @throws NullPointerException if the entry is null
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultMapEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java" hash="e77679e0e5ddb0d8d10db235bd37782dd2e3e70b"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractCollection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>AbstractSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ConcurrentModificationException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>IterableMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>KeyValue</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>MapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>iterators</name><operator>.</operator><name>EmptyIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>iterators</name><operator>.</operator><name>EmptyMapIterator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An abstract implementation of a hash-based map which provides numerous points for
 * subclasses to override.
 * &lt;p&gt;
 * This class implements all the features necessary for a subclass hash-based map.
 * Key-value entries are stored in instances of the &lt;code&gt;HashEntry&lt;/code&gt; class,
 * which can be overridden and replaced. The iterators can similarly be replaced,
 * without the need to replace the KeySet, EntrySet and Values view classes.
 * &lt;p&gt;
 * Overridable methods are provided to change the default hashing behaviour, and
 * to change how entries are added to and removed from the map. Hopefully, all you
 * need for unusual subclasses is here.
 * &lt;p&gt;
 * NOTE: From Commons Collections 3.1 this class extends AbstractMap.
 * This is to provide backwards compatibility for ReferenceMap between v3.0 and v3.1.
 * This extends clause will be removed in v4.0.
 * 
 * @since Commons Collections 3.0
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 *
 * @author java util HashMap
 * @author Stephen Colebourne
 * @author Christian Siefkes
 */</comment>
<class><specifier>public</specifier> class <name>AbstractHashedMap</name> <super_list><extends>extends <super><name>AbstractMap</name></super></extends> <implements>implements <super><name>IterableMap</name></super></implements></super_list> <block>{
    
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NO_NEXT_ENTRY</name> <init>= <expr><literal type="string">"No next() entry in the iteration"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NO_PREVIOUS_ENTRY</name> <init>= <expr><literal type="string">"No previous() entry in the iteration"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>REMOVE_INVALID</name> <init>= <expr><literal type="string">"remove() can only be called once after next()"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GETKEY_INVALID</name> <init>= <expr><literal type="string">"getKey() can only be called after next() and before remove()"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>GETVALUE_INVALID</name> <init>= <expr><literal type="string">"getValue() can only be called after next() and before remove()"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SETVALUE_INVALID</name> <init>= <expr><literal type="string">"setValue() can only be called after next() and before remove()"</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/** The default capacity to use */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_CAPACITY</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The default threshold to use */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_THRESHOLD</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The default load factor to use */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_LOAD_FACTOR</name> <init>= <expr><literal type="number">0.75f</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The maximum capacity allowed */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MAXIMUM_CAPACITY</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** An object for masking null */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Object</name></type> <name>NULL</name> <init>= <expr><operator>new</operator> <call><name>Object</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/** Load factor, normally 0.75 */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>float</name></type> <name>loadFactor</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** The size of the map */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Map entries */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name><name>HashEntry</name><index>[]</index></name></type> <name>data</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Size at which to rehash */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>int</name></type> <name>threshold</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Modification count for iterators */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>int</name></type> <name>modCount</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Entry set */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>EntrySet</name></type> <name>entrySet</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Key set */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>KeySet</name></type> <name>keySet</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/** Values */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>transient</specifier> <name>Values</name></type> <name>values</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructor only used in deserialization, do not use otherwise.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractHashedMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructor which performs no validation on the passed in parameters.
     * 
     * @param initialCapacity  the initial capacity, must be a power of two
     * @param loadFactor  the load factor, must be &amp;gt; 0.0f and generally &amp;lt; 1.0f
     * @param threshold  the threshold, must be sensible
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractHashedMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>loadFactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadFactor</name></name> <operator>=</operator> <name>loadFactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>initialCapacity</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <name>threshold</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new, empty map with the specified initial capacity and
     * default load factor. 
     *
     * @param initialCapacity  the initial capacity
     * @throws IllegalArgumentException if the initial capacity is less than one
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractHashedMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>, <argument><expr><name>DEFAULT_LOAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new, empty map with the specified initial capacity and
     * load factor. 
     *
     * @param initialCapacity  the initial capacity
     * @param loadFactor  the load factor
     * @throws IllegalArgumentException if the initial capacity is less than one
     * @throws IllegalArgumentException if the load factor is less than or equal to zero
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractHashedMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>initialCapacity</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>loadFactor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>initialCapacity</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Initial capacity must be greater than 0"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>loadFactor</name> <operator>&lt;=</operator> <literal type="number">0.0f</literal> <operator>||</operator> <call><name><name>Float</name><operator>.</operator><name>isNaN</name></name><argument_list>(<argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Load factor must be greater than 0"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadFactor</name></name> <operator>=</operator> <name>loadFactor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>initialCapacity</name> <operator>=</operator> <call><name>calculateNewCapacity</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <call><name>calculateThreshold</name><argument_list>(<argument><expr><name>initialCapacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>initialCapacity</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructor copying elements from another map.
     *
     * @param map  the map to copy
     * @throws NullPointerException if the map is null
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractHashedMap</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_LOAD_FACTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putAll</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Initialise subclasses during construction, cloning or deserialization.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the value mapped to the key specified.
     * 
     * @param key  the key
     * @return the mapped value, null if no match
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// no local for hash index</comment>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>==</operator> <name>hashCode</name> <operator>&amp;&amp;</operator> <call><name>isEqualKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the size of the map.
     * 
     * @return the size
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>size</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the map is currently empty.
     * 
     * @return true if the map is currently size zero
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Checks whether the map contains the specified key.
     * 
     * @param key  the key to search for
     * @return true if the map contains the key
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// no local for hash index</comment>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>==</operator> <name>hashCode</name> <operator>&amp;&amp;</operator> <call><name>isEqualKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the map contains the specified value.
     * 
     * @param value  the value to search for
     * @return true if the map contains the value
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>isize</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>isize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>isEqualValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Puts a key-value mapping into this map.
     * 
     * @param key  the key to add
     * @param value  the value to add
     * @return the value previously mapped to this key, null if none
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>==</operator> <name>hashCode</name> <operator>&amp;&amp;</operator> <call><name>isEqualKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>oldValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>updateEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>oldValue</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        
        <expr_stmt><expr><call><name>addMapping</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Puts all the values from the specified map into this map.
     * &lt;p&gt;
     * This implementation iterates around the specified map and
     * uses {@link #put(Object, Object)}.
     * 
     * @param map  the map to add
     * @throws NullPointerException if the map is null
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>putAll</name><parameter_list>(<parameter><decl><type><name>Map</name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>mapSize</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mapSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>mapSize</name><operator>)</operator> <operator>/</operator> <name>loadFactor</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ensureCapacity</name><argument_list>(<argument><expr><call><name>calculateNewCapacity</name><argument_list>(<argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes the specified mapping from this map.
     * 
     * @param key  the mapping to remove
     * @return the value mapped to the removed key, null if key not in map
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>previous</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>==</operator> <name>hashCode</name> <operator>&amp;&amp;</operator> <call><name>isEqualKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>oldValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>removeMapping</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>oldValue</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>previous</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clears the map, resetting the size to zero and nullifying references
     * to avoid garbage collection issues.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modCount</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>HashEntry</name><index>[]</index></name></type> <name>data</name> <init>= <expr><name><name>this</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Converts input keys to another object for storage in the map.
     * This implementation masks nulls.
     * Subclasses can override this to perform alternate key conversions.
     * &lt;p&gt;
     * The reverse conversion can be changed, if required, by overriding the
     * getKey() method in the hash entry.
     * 
     * @param key  the key convert
     * @return the converted key
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>convertKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>key</name></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Gets the hash code for the key specified.
     * This implementation uses the additional hashing routine from JDK1.4.
     * Subclasses can override this to return alternate hash codes.
     * 
     * @param key  the key to get a hash code for
     * @return the hash code
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// same as JDK 1.4</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>h</name> <operator>+=</operator> <operator>~</operator><operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>^=</operator>  <operator>(</operator><name>h</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>+=</operator>  <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>^=</operator>  <operator>(</operator><name>h</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>h</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Compares two keys, in internal converted form, to see if they are equal.
     * This implementation uses the equals method and assumes neither key is null.
     * Subclasses can override this to match differently.
     * 
     * @param key1  the first key to compare passed in from outside
     * @param key2  the second key extracted from the entry via &lt;code&gt;entry.key&lt;/code&gt;
     * @return true if equal
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isEqualKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>key1</name> <operator>==</operator> <name>key2</name> <operator>||</operator> <call><name><name>key1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Compares two values, in external form, to see if they are equal.
     * This implementation uses the equals method and assumes neither value is null.
     * Subclasses can override this to match differently.
     * 
     * @param value1  the first value to compare passed in from outside
     * @param value2  the second value extracted from the entry via &lt;code&gt;getValue()&lt;/code&gt;
     * @return true if equal
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isEqualValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>value1</name> <operator>==</operator> <name>value2</name> <operator>||</operator> <call><name><name>value1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Gets the index into the data storage for the hashCode specified.
     * This implementation uses the least significant bits of the hashCode.
     * Subclasses can override this to return alternate bucketing.
     * 
     * @param hashCode  the hash code to use
     * @param dataSize  the size of the data to pick a bucket from
     * @return the bucket index
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>hashIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dataSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>hashCode</name> <operator>&amp;</operator> <operator>(</operator><name>dataSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the entry mapped to the key specified.
     * &lt;p&gt;
     * This method exists for subclasses that may need to perform a multi-step
     * process accessing the entry. The public methods in this class don't use this
     * method to gain a small performance boost.
     * 
     * @param key  the key
     * @return the entry, null if no match
     */</comment>
    <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>getEntry</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>convertKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hashCode</name> <init>= <expr><call><name>hash</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// no local for hash index</comment>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>==</operator> <name>hashCode</name> <operator>&amp;&amp;</operator> <call><name>isEqualKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>entry</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Updates an existing key-value mapping to change the value.
     * &lt;p&gt;
     * This implementation calls &lt;code&gt;setValue()&lt;/code&gt; on the entry.
     * Subclasses could override to handle changes to the map.
     * 
     * @param entry  the entry to update
     * @param newValue  the new value to store
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Reuses an existing key-value mapping, storing completely new data.
     * &lt;p&gt;
     * This implementation sets all the data fields on the entry.
     * Subclasses could populate additional entry fields.
     * 
     * @param entry  the entry to update, not null
     * @param hashIndex  the index in the data array
     * @param hashCode  the hash code of the key to add
     * @param key  the key to add
     * @param value  the value to add
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>reuseEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>hashIndex</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name> <operator>=</operator> <name>hashCode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Adds a new key-value mapping into this map.
     * &lt;p&gt;
     * This implementation calls &lt;code&gt;createEntry()&lt;/code&gt;, &lt;code&gt;addEntry()&lt;/code&gt;
     * and &lt;code&gt;checkCapacity()&lt;/code&gt;.
     * It also handles changes to &lt;code&gt;modCount&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;.
     * Subclasses could override to fully control adds to the map.
     * 
     * @param hashIndex  the index into the data array to store at
     * @param hashCode  the hash code of the key to add
     * @param key  the key to add
     * @param value  the value to add
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addMapping</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hashIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modCount</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><call><name>createEntry</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>hashIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>hashIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkCapacity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Creates an entry to store the key-value data.
     * &lt;p&gt;
     * This implementation creates a new HashEntry instance.
     * Subclasses can override this to return a different storage class,
     * or implement caching.
     * 
     * @param next  the next entry in sequence
     * @param hashCode  the hash code to use
     * @param key  the key to store
     * @param value  the value to store
     * @return the newly created entry
     */</comment>
    <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>createEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>HashEntry</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Adds an entry into this map.
     * &lt;p&gt;
     * This implementation adds the entry to the data storage table.
     * Subclasses could override to handle changes to the map.
     *
     * @param entry  the entry to add
     * @param hashIndex  the index into the data array to store at
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>addEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><index>[<expr><name>hashIndex</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Removes a mapping from the map.
     * &lt;p&gt;
     * This implementation calls &lt;code&gt;removeEntry()&lt;/code&gt; and &lt;code&gt;destroyEntry()&lt;/code&gt;.
     * It also handles changes to &lt;code&gt;modCount&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt;.
     * Subclasses could override to fully control removals from the map.
     * 
     * @param entry  the entry to remove
     * @param hashIndex  the index into the data structure
     * @param previous  the previous entry in the chain
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeMapping</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashIndex</name></decl></parameter>, <parameter><decl><type><name>HashEntry</name></type> <name>previous</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>modCount</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>hashIndex</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>destroyEntry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Removes an entry from the chain stored in a particular index.
     * &lt;p&gt;
     * This implementation removes the entry from the data storage table.
     * The size is not updated.
     * Subclasses could override to handle changes to the map.
     * 
     * @param entry  the entry to remove
     * @param hashIndex  the index into the data structure
     * @param previous  the previous entry in the chain
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>removeEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashIndex</name></decl></parameter>, <parameter><decl><type><name>HashEntry</name></type> <name>previous</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>hashIndex</name></expr>]</index></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name><name>previous</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Kills an entry ready for the garbage collector.
     * &lt;p&gt;
     * This implementation prepares the HashEntry for garbage collection.
     * Subclasses can override this to implement caching (override clear as well).
     * 
     * @param entry  the entry to destroy
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>destroyEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Checks the capacity of the map and enlarges it if necessary.
     * &lt;p&gt;
     * This implementation uses the threshold to check if the map needs enlarging
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>checkCapacity</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>newCapacity</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>newCapacity</name> <operator>&lt;=</operator> <name>MAXIMUM_CAPACITY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ensureCapacity</name><argument_list>(<argument><expr><name>newCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Changes the size of the data structure to the capacity proposed.
     * 
     * @param newCapacity  the new capacity of the array (a power of two, less or equal to max)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>ensureCapacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>oldCapacity</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newCapacity</name> <operator>&lt;=</operator> <name>oldCapacity</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>threshold</name> <operator>=</operator> <call><name>calculateThreshold</name><argument_list>(<argument><expr><name>newCapacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>newCapacity</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name><name>oldEntries</name><index>[]</index></name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name><name>newEntries</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>newCapacity</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>modCount</name><operator>++</operator></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>oldCapacity</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>oldEntries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>oldEntries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>  <comment type="line">// gc</comment>
                    <do>do <block>{<block_content>
                        <decl_stmt><decl><type><name>HashEntry</name></type> <name>next</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hashIndex</name><argument_list>(<argument><expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name></expr></argument>, <argument><expr><name>newCapacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
                        <expr_stmt><expr><name><name>entry</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>newEntries</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>newEntries</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
                    </block_content>}</block> while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition>;</do>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>threshold</name> <operator>=</operator> <call><name>calculateThreshold</name><argument_list>(<argument><expr><name>newCapacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>data</name> <operator>=</operator> <name>newEntries</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Calculates the new capacity of the map.
     * This implementation normalizes the capacity to a power of two.
     * 
     * @param proposedCapacity  the proposed capacity
     * @return the normalized new capacity
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>calculateNewCapacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>proposedCapacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>newCapacity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>proposedCapacity</name> <operator>&gt;</operator> <name>MAXIMUM_CAPACITY</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newCapacity</name> <operator>=</operator> <name>MAXIMUM_CAPACITY</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <while>while <condition>(<expr><name>newCapacity</name> <operator>&lt;</operator> <name>proposedCapacity</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>newCapacity</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// multiply by two</comment>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>newCapacity</name> <operator>&gt;</operator> <name>MAXIMUM_CAPACITY</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>newCapacity</name> <operator>=</operator> <name>MAXIMUM_CAPACITY</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>newCapacity</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Calculates the new threshold of the map, where it will be resized.
     * This implementation uses the load factor.
     * 
     * @param newCapacity  the new capacity
     * @param factor  the load factor
     * @return the new resize threshold
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>calculateThreshold</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newCapacity</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>factor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>newCapacity</name> <operator>*</operator> <name>factor</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the &lt;code&gt;next&lt;/code&gt; field from a &lt;code&gt;HashEntry&lt;/code&gt;.
     * Used in subclasses that have no visibility of the field.
     * 
     * @param entry  the entry to query, must not be null
     * @return the &lt;code&gt;next&lt;/code&gt; field of the entry
     * @throws NullPointerException if the entry is null
     * @since Commons Collections 3.1
     */</comment>
    <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>entryNext</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Gets the &lt;code&gt;hashCode&lt;/code&gt; field from a &lt;code&gt;HashEntry&lt;/code&gt;.
     * Used in subclasses that have no visibility of the field.
     * 
     * @param entry  the entry to query, must not be null
     * @return the &lt;code&gt;hashCode&lt;/code&gt; field of the entry
     * @throws NullPointerException if the entry is null
     * @since Commons Collections 3.1
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>entryHashCode</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>.</operator><name>hashCode</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Gets the &lt;code&gt;key&lt;/code&gt; field from a &lt;code&gt;HashEntry&lt;/code&gt;.
     * Used in subclasses that have no visibility of the field.
     * 
     * @param entry  the entry to query, must not be null
     * @return the &lt;code&gt;key&lt;/code&gt; field of the entry
     * @throws NullPointerException if the entry is null
     * @since Commons Collections 3.1
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>entryKey</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>.</operator><name>key</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Gets the &lt;code&gt;value&lt;/code&gt; field from a &lt;code&gt;HashEntry&lt;/code&gt;.
     * Used in subclasses that have no visibility of the field.
     * 
     * @param entry  the entry to query, must not be null
     * @return the &lt;code&gt;value&lt;/code&gt; field of the entry
     * @throws NullPointerException if the entry is null
     * @since Commons Collections 3.1
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>entryValue</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>entry</name><operator>.</operator><name>value</name></name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets an iterator over the map.
     * Changes made to the iterator affect this map.
     * &lt;p&gt;
     * A MapIterator returns the keys in the map. It also provides convenient
     * methods to get the key and value, and set the value.
     * It avoids the need to create an entrySet/keySet/values object.
     * It also avoids creating the Map.Entry object.
     * 
     * @return the map iterator
     */</comment>
    <function><type><specifier>public</specifier> <name>MapIterator</name></type> <name>mapIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>EmptyMapIterator</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>HashMapIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * MapIterator implementation.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>HashMapIterator</name> <super_list><extends>extends <super><name>HashIterator</name></super></extends> <implements>implements <super><name>MapIterator</name></super></implements></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>HashMapIterator</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>nextEntry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>GETKEY_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>GETVALUE_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>SETVALUE_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="line">//-----------------------------------------------------------------------    </comment>
    <comment type="block" format="javadoc">/**
     * Gets the entrySet view of the map.
     * Changes made to the view affect this map.
     * To simply iterate through the entries, use {@link #mapIterator()}.
     * 
     * @return the entrySet view
     */</comment>
    <function><type><specifier>public</specifier> <name>Set</name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>entrySet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>entrySet</name> <operator>=</operator> <operator>new</operator> <call><name>EntrySet</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>entrySet</name></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Creates an entry set iterator.
     * Subclasses can override this to return iterators with different properties.
     * 
     * @return the entrySet iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createEntrySetIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>EmptyIterator</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>EntrySetIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * EntrySet implementation.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>EntrySet</name> <super_list><extends>extends <super><name>AbstractSet</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractHashedMap</name></type> <name>parent</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>EntrySet</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>e</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Entry</name></type> <name>match</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getEntry</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>(</operator><name>match</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>match</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>createEntrySetIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * EntrySet iterator.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>EntrySetIterator</name> <super_list><extends>extends <super><name>HashIterator</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>EntrySetIterator</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>nextEntry</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------    </comment>
    <comment type="block" format="javadoc">/**
     * Gets the keySet view of the map.
     * Changes made to the view affect this map.
     * To simply iterate through the keys, use {@link #mapIterator()}.
     * 
     * @return the keySet view
     */</comment>
    <function><type><specifier>public</specifier> <name>Set</name></type> <name>keySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keySet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>keySet</name> <operator>=</operator> <operator>new</operator> <call><name>KeySet</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>keySet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a key set iterator.
     * Subclasses can override this to return iterators with different properties.
     * 
     * @return the keySet iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createKeySetIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>EmptyIterator</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>KeySetIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * KeySet implementation.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>KeySet</name> <super_list><extends>extends <super><name>AbstractSet</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractHashedMap</name></type> <name>parent</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>KeySet</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>createKeySetIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * KeySet iterator.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>KeySetIterator</name> <super_list><extends>extends <super><name>EntrySetIterator</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>KeySetIterator</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>nextEntry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="line">//-----------------------------------------------------------------------    </comment>
    <comment type="block" format="javadoc">/**
     * Gets the values view of the map.
     * Changes made to the view affect this map.
     * To simply iterate through the values, use {@link #mapIterator()}.
     * 
     * @return the values view
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>values</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <operator>new</operator> <call><name>Values</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>values</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a values iterator.
     * Subclasses can override this to return iterators with different properties.
     * 
     * @return the values iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createValuesIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>EmptyIterator</name><operator>.</operator><name>INSTANCE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>ValuesIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Values implementation.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>Values</name> <super_list><extends>extends <super><name>AbstractCollection</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractHashedMap</name></type> <name>parent</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>Values</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>containsValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>createValuesIterator</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Values iterator.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>ValuesIterator</name> <super_list><extends>extends <super><name>HashIterator</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>ValuesIterator</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>nextEntry</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * HashEntry used to store the data.
     * &lt;p&gt;
     * If you subclass &lt;code&gt;AbstractHashedMap&lt;/code&gt; but not &lt;code&gt;HashEntry&lt;/code&gt;
     * then you will not be able to access the protected fields.
     * The &lt;code&gt;entryXxx()&lt;/code&gt; methods on &lt;code&gt;AbstractHashedMap&lt;/code&gt; exist
     * to provide the necessary access.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>HashEntry</name> <super_list><implements>implements <super><name><name>Map</name><operator>.</operator><name>Entry</name></name></super>, <super><name>KeyValue</name></super></implements></super_list> <block>{
        <comment type="block" format="javadoc">/** The next entry in the hash chain */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>next</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The hash code of the key */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>hashCode</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The key */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Object</name></type> <name>key</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The value */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>Object</name></type> <name>value</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>HashEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hashCode</name></name> <operator>=</operator> <name>hashCode</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>key</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>key</name></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>value</name></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>old</name> <init>= <expr><name><name>this</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <return>return <expr><name>old</name></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>other</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return
                <expr><operator>(</operator><ternary><condition><expr><call><name>getKey</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>other</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator>
                <operator>(</operator><ternary><condition><expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>other</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> </then><else>: <expr><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>getKey</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>getKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>^</operator>
                   <operator>(</operator><ternary><condition><expr><call><name>getValue</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return> 
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="block" format="javadoc">/**
     * Base Iterator
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>HashIterator</name> <super_list><implements>implements <super><name>Iterator</name></super></implements></super_list> <block>{
        
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractHashedMap</name></type> <name>parent</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The current index into the array of buckets */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>hashIndex</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The last returned entry */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>last</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The next entry */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>next</name></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/** The modification count expected */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>expectedModCount</name></decl>;</decl_stmt>
        
        <constructor><specifier>protected</specifier> <name>HashIterator</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>HashEntry</name><index>[]</index></name></type> <name>data</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>next</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hashIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expectedModCount</name></name> <operator>=</operator> <name><name>parent</name><operator>.</operator><name>modCount</name></name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>next</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>nextEntry</name><parameter_list>()</parameter_list> <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>modCount</name></name> <operator>!=</operator> <name>expectedModCount</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConcurrentModificationException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>newCurrent</name> <init>= <expr><name>next</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>newCurrent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>  <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>NO_NEXT_ENTRY</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>HashEntry</name><index>[]</index></name></type> <name>data</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>hashIndex</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>n</name> <init>= <expr><name><name>newCurrent</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>n</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>data</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>hashIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>newCurrent</name></expr>;</expr_stmt>
            <return>return <expr><name>newCurrent</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>currentEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>last</name></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>REMOVE_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>modCount</name></name> <operator>!=</operator> <name>expectedModCount</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConcurrentModificationException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>last</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>expectedModCount</name> <operator>=</operator> <name><name>parent</name><operator>.</operator><name>modCount</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>last</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"Iterator["</literal> <operator>+</operator> <call><name><name>last</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"="</literal> <operator>+</operator> <call><name><name>last</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="string">"Iterator[]"</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Writes the map data to the stream. This method must be overridden if a
     * subclass must be setup before &lt;code&gt;put()&lt;/code&gt; is used.
     * &lt;p&gt;
     * Serialization is not one of the JDK's nicest topics. Normal serialization will
     * initialise the superclass before the subclass. Sometimes however, this isn't
     * what you want, as in this case the &lt;code&gt;put()&lt;/code&gt; method on read can be
     * affected by subclass state.
     * &lt;p&gt;
     * The solution adopted here is to serialize the state data of this class in
     * this protected method. This method must be called by the
     * &lt;code&gt;writeObject()&lt;/code&gt; of the first serializable subclass.
     * &lt;p&gt;
     * Subclasses may override if they have a specific field that must be present
     * on read before this implementation will work. Generally, the read determines
     * what must be serialized here, if anything.
     * 
     * @param out  the output stream
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doWriteObject</name><parameter_list>(<parameter><decl><type><name>ObjectOutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeFloat</name></name><argument_list>(<argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>MapIterator</name></type> <name>it</name> <init>= <expr><call><name>mapIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Reads the map data from the stream. This method must be overridden if a
     * subclass must be setup before &lt;code&gt;put()&lt;/code&gt; is used.
     * &lt;p&gt;
     * Serialization is not one of the JDK's nicest topics. Normal serialization will
     * initialise the superclass before the subclass. Sometimes however, this isn't
     * what you want, as in this case the &lt;code&gt;put()&lt;/code&gt; method on read can be
     * affected by subclass state.
     * &lt;p&gt;
     * The solution adopted here is to deserialize the state data of this class in
     * this protected method. This method must be called by the
     * &lt;code&gt;readObject()&lt;/code&gt; of the first serializable subclass.
     * &lt;p&gt;
     * Subclasses may override if the subclass has a specific field that must be present
     * before &lt;code&gt;put()&lt;/code&gt; or &lt;code&gt;calculateThreshold()&lt;/code&gt; will work correctly.
     * 
     * @param in  the input stream
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doReadObject</name><parameter_list>(<parameter><decl><type><name>ObjectInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>loadFactor</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readFloat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>capacity</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>threshold</name> <operator>=</operator> <call><name>calculateThreshold</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Clones the map without cloning the keys or values.
     * &lt;p&gt;
     * To implement &lt;code&gt;clone()&lt;/code&gt;, a subclass must implement the
     * &lt;code&gt;Cloneable&lt;/code&gt; interface and make this method public.
     *
     * @return a shallow clone
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>AbstractHashedMap</name></type> <name>cloned</name> <init>= <expr><operator>(</operator><name>AbstractHashedMap</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name><name>data</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>entrySet</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>keySet</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>values</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>modCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cloned</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cloned</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cloned</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>cloned</name></expr>;</return>
            
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>  <comment type="line">// should never happen</comment>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Compares this map with another.
     * 
     * @param obj  the object to compare to
     * @return true if equal
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>Map</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> <init>= <expr><operator>(</operator><name>Map</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name>size</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>MapIterator</name></type> <name>it</name> <init>= <expr><call><name>mapIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>ignored</name></decl></parameter>)</parameter_list>   <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></catch></try>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the standard Map hashCode.
     * 
     * @return the hash code defined in the Map interface
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name>createEntrySetIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>total</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the map as a String.
     * 
     * @return a string version of the map
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="string">"{}"</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>buf</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>*</operator> <call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MapIterator</name></type> <name>it</name> <init>= <expr><call><name>mapIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasNext</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>hasNext</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>key</name> <operator>==</operator> <name>this</name></expr> ?</condition><then> <expr><literal type="string">"(this Map)"</literal></expr> </then><else>: <expr><name>key</name></expr></else></ternary></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><ternary><condition><expr><name>value</name> <operator>==</operator> <name>this</name></expr> ?</condition><then> <expr><literal type="string">"(this Map)"</literal></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>hasNext</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name><name>buf</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>buf</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java" hash="42a2449440e40818ce1779f1b174e21e95092a99"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>Reference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>ReferenceQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>SoftReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ConcurrentModificationException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>MapIterator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>keyvalue</name><operator>.</operator><name>DefaultMapEntry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An abstract implementation of a hash-based map that allows the entries to
 * be removed by the garbage collector.
 * &lt;p&gt;
 * This class implements all the features necessary for a subclass reference
 * hash-based map. Key-value entries are stored in instances of the
 * &lt;code&gt;ReferenceEntry&lt;/code&gt; class which can be overridden and replaced.
 * The iterators can similarly be replaced, without the need to replace the KeySet,
 * EntrySet and Values view classes.
 * &lt;p&gt;
 * Overridable methods are provided to change the default hashing behaviour, and
 * to change how entries are added to and removed from the map. Hopefully, all you
 * need for unusual subclasses is here.
 * &lt;p&gt;
 * When you construct an &lt;code&gt;AbstractReferenceMap&lt;/code&gt;, you can specify what
 * kind of references are used to store the map's keys and values.
 * If non-hard references are used, then the garbage collector can remove
 * mappings if a key or value becomes unreachable, or if the JVM's memory is
 * running low. For information on how the different reference types behave,
 * see {@link Reference}.
 * &lt;p&gt;
 * Different types of references can be specified for keys and values.
 * The keys can be configured to be weak but the values hard,
 * in which case this class will behave like a
 * &lt;a href="http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html"&gt;
 * &lt;code&gt;WeakHashMap&lt;/code&gt;&lt;/a&gt;. However, you can also specify hard keys and
 * weak values, or any other combination. The default constructor uses
 * hard keys and soft values, providing a memory-sensitive cache.
 * &lt;p&gt;
 * This {@link Map} implementation does &lt;i&gt;not&lt;/i&gt; allow null elements.
 * Attempting to add a null key or value to the map will raise a
 * &lt;code&gt;NullPointerException&lt;/code&gt;.
 * &lt;p&gt;
 * All the available iterators can be reset back to the start by casting to
 * &lt;code&gt;ResettableIterator&lt;/code&gt; and calling &lt;code&gt;reset()&lt;/code&gt;.
 * &lt;p&gt;
 * This implementation is not synchronized.
 * You can use {@link java.util.Collections#synchronizedMap} to 
 * provide synchronized access to a &lt;code&gt;ReferenceMap&lt;/code&gt;.
 *
 * @see java.lang.ref.Reference
 * @since Commons Collections 3.1 (extracted from ReferenceMap in 3.0)
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Paul Jack
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>AbstractReferenceMap</name> <super_list><extends>extends <super><name>AbstractHashedMap</name></super></extends></super_list> <block>{

    <comment type="block" format="javadoc">/** Constant indicating that hard references should be used */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HARD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant indicating that soft references should be used */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SOFT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Constant indicating that weak references should be used */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WEAK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The reference type for keys.  Must be HARD, SOFT, WEAK.
     * @serial
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>keyType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The reference type for values.  Must be HARD, SOFT, WEAK.
     * @serial
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>valueType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Should the value be automatically purged when the associated key has been collected?
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>purgeValues</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ReferenceQueue used to eliminate stale mappings.
     * See purge.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>transient</specifier> <name>ReferenceQueue</name></type> <name>queue</name></decl>;</decl_stmt>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Constructor used during deserialization.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractReferenceMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new empty map with the specified reference types,
     * load factor and initial capacity.
     *
     * @param keyType  the type of reference to use for keys;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param valueType  the type of reference to use for values;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param capacity  the initial capacity for the map
     * @param loadFactor  the load factor for the map
     * @param purgeValues  should the value be automatically purged when the 
     *   key is garbage collected 
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractReferenceMap</name><parameter_list>(
            <parameter><decl><type><name>int</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>, 
            <parameter><decl><type><name>float</name></type> <name>loadFactor</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>purgeValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><literal type="string">"keyType"</literal></expr></argument>, <argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>verify</name><argument_list>(<argument><expr><literal type="string">"valueType"</literal></expr></argument>, <argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <name>keyType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <name>valueType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>purgeValues</name></name> <operator>=</operator> <name>purgeValues</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Initialise this subclass during construction, cloning or deserialization.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>queue</name> <operator>=</operator> <operator>new</operator> <call><name>ReferenceQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Checks the type int is a valid value.
     * 
     * @param name  the name for error messages
     * @param type  the type value to check
     * @throws IllegalArgumentException if the value if invalid
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>verify</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&lt;</operator> <name>HARD</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&gt;</operator> <name>WEAK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="string">" must be HARD, SOFT, WEAK."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the size of the map.
     * 
     * @return the size
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purgeBeforeRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the map is currently empty.
     * 
     * @return true if the map is currently size zero
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purgeBeforeRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the map contains the specified key.
     * 
     * @param key  the key to search for
     * @return true if the map contains the key
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purgeBeforeRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><call><name>getEntry</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether the map contains the specified value.
     * 
     * @param value  the value to search for
     * @return true if the map contains the value
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>containsValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purgeBeforeRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>containsValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the value mapped to the key specified.
     * 
     * @param key  the key
     * @return the mapped value, null if no match
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purgeBeforeRead</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Entry</name></type> <name>entry</name> <init>= <expr><call><name>getEntry</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Puts a key-value mapping into this map.
     * Neither the key nor the value may be null.
     * 
     * @param key  the key to add, must not be null
     * @param value  the value to add, must not be null
     * @return the value previously mapped to this key, null if none
     * @throws NullPointerException if either the key or value is null
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"null keys not allowed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"null values not allowed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>purgeBeforeWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Removes the specified mapping from this map.
     * 
     * @param key  the mapping to remove
     * @return the value mapped to the removed key, null if key not in map
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>purgeBeforeWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Clears this map.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content/>}</block></while> <comment type="line">// drain the queue</comment>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets a MapIterator over the reference map.
     * The iterator only returns valid key/value pairs.
     * 
     * @return a map iterator
     */</comment>
    <function><type><specifier>public</specifier> <name>MapIterator</name></type> <name>mapIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReferenceMapIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a set view of this map's entries.
     * An iterator returned entry is valid until &lt;code&gt;next()&lt;/code&gt; is called again.
     * The &lt;code&gt;setValue()&lt;/code&gt; method on the &lt;code&gt;toArray&lt;/code&gt; entries has no effect.
     *
     * @return a set view of this map's entries
     */</comment>
    <function><type><specifier>public</specifier> <name>Set</name></type> <name>entrySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>entrySet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>entrySet</name> <operator>=</operator> <operator>new</operator> <call><name>ReferenceEntrySet</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>entrySet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a set view of this map's keys.
     *
     * @return a set view of this map's keys
     */</comment>
    <function><type><specifier>public</specifier> <name>Set</name></type> <name>keySet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>keySet</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>keySet</name> <operator>=</operator> <operator>new</operator> <call><name>ReferenceKeySet</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>keySet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a collection view of this map's values.
     *
     * @return a set view of this map's values
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>values</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>values</name> <operator>=</operator> <operator>new</operator> <call><name>ReferenceValues</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>values</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Purges stale mappings from this map before read operations.
     * &lt;p&gt;
     * This implementation calls {@link #purge()} to maintain a consistent state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>purgeBeforeRead</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Purges stale mappings from this map before write operations.
     * &lt;p&gt;
     * This implementation calls {@link #purge()} to maintain a consistent state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>purgeBeforeWrite</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>purge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Purges stale mappings from this map.
     * &lt;p&gt;
     * Note that this method is not synchronized!  Special
     * care must be taken if, for instance, you want stale
     * mappings to be removed on a periodic basis by some
     * background thread.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>purge</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Reference</name></type> <name>ref</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>ref</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>purge</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Purges the specified reference.
     * 
     * @param ref  the reference to purge
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>purge</name><parameter_list>(<parameter><decl><type><name>Reference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// The hashCode of the reference is the hashCode of the</comment>
        <comment type="line">// mapping key, even if the reference refers to the </comment>
        <comment type="line">// mapping value...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name><name>ref</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hashIndex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>previous</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HashEntry</name></type> <name>entry</name> <init>= <expr><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ReferenceEntry</name><operator>)</operator> <name>entry</name><operator>)</operator><operator>.</operator><call><name>purge</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>data</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>previous</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>previous</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>

    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Gets the entry mapped to the key specified.
     * 
     * @param key  the key
     * @return the entry, null if no match
     */</comment>
    <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>getEntry</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>getEntry</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the hash code for a MapEntry.
     * Subclasses can override this, for example to use the identityHashCode.
     * 
     * @param key  the key to get a hash code for, may be null
     * @param value  the value to get a hash code for, may be null
     * @return the hash code, as per the MapEntry specification
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>hashEntry</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>key</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator> <operator>^</operator>
               <operator>(</operator><ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return> 
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Compares two keys, in internal converted form, to see if they are equal.
     * &lt;p&gt;
     * This implementation converts the key from the entry to a real reference
     * before comparison.
     * 
     * @param key1  the first key to compare passed in from outside
     * @param key2  the second key extracted from the entry via &lt;code&gt;entry.key&lt;/code&gt;
     * @return true if equal
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isEqualKey</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>key1</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>key2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>keyType</name> <operator>&gt;</operator> <name>HARD</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator> <name>key2</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>key2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>key1</name> <operator>==</operator> <name>key2</name> <operator>||</operator> <call><name><name>key1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>key2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="block" format="javadoc">/**
     * Creates a ReferenceEntry instead of a HashEntry.
     * 
     * @param next  the next entry in sequence
     * @param hashCode  the hash code to use
     * @param key  the key to store
     * @param value  the value to store
     * @return the newly created entry
     */</comment>
    <function><type><specifier>protected</specifier> <name>HashEntry</name></type> <name>createEntry</name><parameter_list>(<parameter><decl><type><name>HashEntry</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReferenceEntry</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates an entry set iterator.
     * 
     * @return the entrySet iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createEntrySetIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReferenceEntrySetIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates an key set iterator.
     * 
     * @return the keySet iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createKeySetIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReferenceKeySetIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates an values iterator.
     * 
     * @return the values iterator
     */</comment>
    <function><type><specifier>protected</specifier> <name>Iterator</name></type> <name>createValuesIterator</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><operator>new</operator> <call><name>ReferenceValuesIterator</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * EntrySet implementation.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceEntrySet</name> <super_list><extends>extends <super><name>EntrySet</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>ReferenceEntrySet</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>arr</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// special implementation to handle disappearing entries</comment>
            <decl_stmt><decl><type><name>ArrayList</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> <init>= <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Entry</name></type> <name>e</name> <init>= <expr><operator>(</operator><name>Entry</name><operator>)</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultMapEntry</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * KeySet implementation.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceKeySet</name> <super_list><extends>extends <super><name>KeySet</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>ReferenceKeySet</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>arr</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// special implementation to handle disappearing keys</comment>
            <decl_stmt><decl><type><name>List</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Values implementation.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceValues</name> <super_list><extends>extends <super><name>Values</name></super></extends></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>ReferenceValues</name><parameter_list>(<parameter><decl><type><name>AbstractHashedMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>Object</name><index>[]</index></name></type> <name>toArray</name><parameter_list>(<parameter><decl><type><name><name>Object</name><index>[]</index></name></type> <name>arr</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// special implementation to handle disappearing values</comment>
            <decl_stmt><decl><type><name>List</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>it</name> <init>= <expr><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * A MapEntry implementation for the map.
     * &lt;p&gt;
     * If getKey() or getValue() returns null, it means
     * the mapping is stale and should be removed.
     * 
     * @since Commons Collections 3.1
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>ReferenceEntry</name> <super_list><extends>extends <super><name>HashEntry</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>AbstractReferenceMap</name></type> <name>parent</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new entry object for the ReferenceMap.
         * 
         * @param parent  the parent map
         * @param next  the next entry in the hash bucket
         * @param hashCode  the hash code of the key
         * @param key  the key
         * @param value  the value
         */</comment>
        <constructor><specifier>public</specifier> <name>ReferenceEntry</name><parameter_list>(<parameter><decl><type><name>AbstractReferenceMap</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>HashEntry</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hashCode</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <call><name>toReference</name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>keyType</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>toReference</name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>valueType</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// the key hashCode is passed in deliberately</comment>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Gets the key from the entry.
         * This method dereferences weak and soft keys and thus may return null.
         * 
         * @return the key, which may be null if it was garbage collected
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>parent</name><operator>.</operator><name>keyType</name></name> <operator>&gt;</operator> <name>HARD</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator> <name>key</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>key</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets the value from the entry.
         * This method dereferences weak and soft value and thus may return null.
         * 
         * @return the value, which may be null if it was garbage collected
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>parent</name><operator>.</operator><name>valueType</name></name> <operator>&gt;</operator> <name>HARD</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator> <name>value</name><operator>)</operator><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Sets the value of the entry.
         * 
         * @param obj  the object to store
         * @return the previous value
         */</comment>
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>old</name> <init>= <expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>valueType</name></name> <operator>&gt;</operator> <name>HARD</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>toReference</name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>valueType</name></name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>hashCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>old</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Compares this map entry to another.
         * &lt;p&gt;
         * This implementation uses &lt;code&gt;isEqualKey&lt;/code&gt; and
         * &lt;code&gt;isEqualValue&lt;/code&gt; on the main map for comparison.
         * 
         * @param obj  the other map entry to compare to
         * @return true if equal, false if not
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>this</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name><name>Map</name><operator>.</operator><name>Entry</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            
            <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>entry</name> <init>= <expr><operator>(</operator><name><name>Map</name><operator>.</operator><name>Entry</name></name><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>entryKey</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// convert to hard reference</comment>
            <decl_stmt><decl><type><name>Object</name></type> <name>entryValue</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// convert to hard reference</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>entryKey</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>entryValue</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// compare using map methods, aiding identity subclass</comment>
            <comment type="line">// note that key is direct access and value is via method</comment>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>isEqualKey</name></name><argument_list>(<argument><expr><name>entryKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                   <call><name><name>parent</name><operator>.</operator><name>isEqualValue</name></name><argument_list>(<argument><expr><name>entryValue</name></expr></argument>, <argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets the hashcode of the entry using temporary hard references.
         * &lt;p&gt;
         * This implementation uses &lt;code&gt;hashEntry&lt;/code&gt; on the main map.
         * 
         * @return the hashcode of the entry
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>parent</name><operator>.</operator><name>hashEntry</name></name><argument_list>(<argument><expr><call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Constructs a reference of the given type to the given referent.
         * The reference is registered with the queue for later purging.
         *
         * @param type  HARD, SOFT or WEAK
         * @param referent  the object to refer to
         * @param hash  the hash code of the &lt;i&gt;key&lt;/i&gt; of the mapping;
         *    this number might be different from referent.hashCode() if
         *    the referent represents a value and not a key
         */</comment>
        <function><type><specifier>protected</specifier> <name>Object</name></type> <name>toReference</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>referent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>HARD</name></expr>:</case> <return>return <expr><name>referent</name></expr>;</return>
                <case>case <expr><name>SOFT</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>SoftRef</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name><name>parent</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>WEAK</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>WeakRef</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>referent</name></expr></argument>, <argument><expr><name><name>parent</name><operator>.</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</return>
                <default>default:</default> <throw>throw <expr><operator>new</operator> <call><name>Error</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></switch>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Purges the specified reference
         * @param ref  the reference to purge
         * @return true or false
         */</comment>
        <function><type><name>boolean</name></type> <name>purge</name><parameter_list>(<parameter><decl><type><name>Reference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>r</name> <init>= <expr><operator>(</operator><name><name>parent</name><operator>.</operator><name>keyType</name></name> <operator>&gt;</operator> <name>HARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>key</name> <operator>==</operator> <name>ref</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>parent</name><operator>.</operator><name>valueType</name></name> <operator>&gt;</operator> <name>HARD</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>value</name> <operator>==</operator> <name>ref</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>keyType</name></name> <operator>&gt;</operator> <name>HARD</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator><name>key</name><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>valueType</name></name> <operator>&gt;</operator> <name>HARD</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Reference</name><operator>)</operator><name>value</name><operator>)</operator><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>.</operator><name>purgeValues</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>r</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * Gets the next entry in the bucket.
         * 
         * @return the next entry in the bucket
         */</comment>
        <function><type><specifier>protected</specifier> <name>ReferenceEntry</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>ReferenceEntry</name><operator>)</operator> <name>next</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * The EntrySet iterator.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceEntrySetIterator</name> <super_list><implements>implements <super><name>Iterator</name></super></implements></super_list> <block>{
        <comment type="block" format="javadoc">/** The parent map */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AbstractReferenceMap</name></type> <name>parent</name></decl>;</decl_stmt>
        
        <comment type="line">// These fields keep track of where we are in the table.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ReferenceEntry</name></type> <name>entry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ReferenceEntry</name></type> <name>previous</name></decl>;</decl_stmt>

        <comment type="line">// These Object fields provide hard references to the</comment>
        <comment type="line">// current and next entry; this assures that if hasNext()</comment>
        <comment type="line">// returns true, next() will actually return a valid element.</comment>
        <decl_stmt><decl><type><name>Object</name></type> <name>nextKey</name></decl>, <decl><type ref="prev"/><name>nextValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>currentKey</name></decl>, <decl><type ref="prev"/><name>currentValue</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>expectedModCount</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ReferenceEntrySetIterator</name><parameter_list>(<parameter><decl><type><name>AbstractReferenceMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name><name>parent</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>parent</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <comment type="line">// have to do this here!  size() invocation above</comment>
            <comment type="line">// may have altered the modCount.</comment>
            <expr_stmt><expr><name>expectedModCount</name> <operator>=</operator> <name><name>parent</name><operator>.</operator><name>modCount</name></name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>checkMod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><call><name>nextNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ReferenceEntry</name></type> <name>e</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>ReferenceEntry</name><operator>)</operator> <name><name>parent</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>entry</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currentValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>nextKey</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nextValue</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>nextNull</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>checkMod</name><parameter_list>()</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>modCount</name></name> <operator>!=</operator> <name>expectedModCount</name></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ConcurrentModificationException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>nextNull</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>nextKey</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nextValue</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>ReferenceEntry</name></type> <name>nextEntry</name><parameter_list>()</parameter_list> <block>{<block_content>    
            <expr_stmt><expr><call><name>checkMod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>nextNull</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasNext</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>previous</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <name>nextKey</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentValue</name> <operator>=</operator> <name>nextValue</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>nextValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <return>return <expr><name>previous</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>protected</specifier> <name>ReferenceEntry</name></type> <name>currentEntry</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>checkMod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>previous</name></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>nextEntry</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>checkMod</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>currentKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>previous</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentKey</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentValue</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>expectedModCount</name> <operator>=</operator> <name><name>parent</name><operator>.</operator><name>modCount</name></name></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The keySet iterator.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceKeySetIterator</name> <super_list><extends>extends <super><name>ReferenceEntrySetIterator</name></super></extends></super_list> <block>{
        
        <constructor><name>ReferenceKeySetIterator</name><parameter_list>(<parameter><decl><type><name>AbstractReferenceMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>nextEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The values iterator.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceValuesIterator</name> <super_list><extends>extends <super><name>ReferenceEntrySetIterator</name></super></extends></super_list> <block>{
        
        <constructor><name>ReferenceValuesIterator</name><parameter_list>(<parameter><decl><type><name>AbstractReferenceMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>nextEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * The MapIterator implementation.
     */</comment>
    <class><specifier>static</specifier> class <name>ReferenceMapIterator</name> <super_list><extends>extends <super><name>ReferenceEntrySetIterator</name></super></extends> <implements>implements <super><name>MapIterator</name></super></implements></super_list> <block>{
        
        <constructor><specifier>protected</specifier> <name>ReferenceMapIterator</name><parameter_list>(<parameter><decl><type><name>AbstractReferenceMap</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>nextEntry</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>GETKEY_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>GETVALUE_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Object</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>HashEntry</name></type> <name>current</name> <init>= <expr><call><name>currentEntry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name><name>AbstractHashedMap</name><operator>.</operator><name>SETVALUE_INVALID</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>current</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    
    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="line">// These two classes store the hashCode of the key of</comment>
    <comment type="line">// of the mapping, so that after they're dequeued a quick</comment>
    <comment type="line">// lookup of the bucket in the table can occur.</comment>

    <comment type="block" format="javadoc">/**
     * A soft reference holder.
     */</comment>
    <class><specifier>static</specifier> class <name>SoftRef</name> <super_list><extends>extends <super><name>SoftReference</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** the hashCode of the key (even if the reference points to a value) */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SoftRef</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ReferenceQueue</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>hash</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * A weak reference holder.
     */</comment>
    <class><specifier>static</specifier> class <name>WeakRef</name> <super_list><extends>extends <super><name>WeakReference</name></super></extends></super_list> <block>{
        <comment type="block" format="javadoc">/** the hashCode of the key (even if the reference points to a value) */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>hash</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>WeakRef</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ReferenceQueue</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{<block_content>
            <return>return <expr><name>hash</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Replaces the superclass method to store the state of this class.
     * &lt;p&gt;
     * Serialization is not one of the JDK's nicest topics. Normal serialization will
     * initialise the superclass before the subclass. Sometimes however, this isn't
     * what you want, as in this case the &lt;code&gt;put()&lt;/code&gt; method on read can be
     * affected by subclass state.
     * &lt;p&gt;
     * The solution adopted here is to serialize the state data of this class in
     * this protected method. This method must be called by the
     * &lt;code&gt;writeObject()&lt;/code&gt; of the first serializable subclass.
     * &lt;p&gt;
     * Subclasses may override if they have a specific field that must be present
     * on read before this implementation will work. Generally, the read determines
     * what must be serialized here, if anything.
     * 
     * @param out  the output stream
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doWriteObject</name><parameter_list>(<parameter><decl><type><name>ObjectOutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>valueType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeBoolean</name></name><argument_list>(<argument><expr><name>purgeValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeFloat</name></name><argument_list>(<argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>MapIterator</name></type> <name>it</name> <init>= <expr><call><name>mapIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><call><name><name>it</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// null terminate map</comment>
        <comment type="line">// do not call super.doWriteObject() as code there doesn't work for reference map</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Replaces the superclassm method to read the state of this class.
     * &lt;p&gt;
     * Serialization is not one of the JDK's nicest topics. Normal serialization will
     * initialise the superclass before the subclass. Sometimes however, this isn't
     * what you want, as in this case the &lt;code&gt;put()&lt;/code&gt; method on read can be
     * affected by subclass state.
     * &lt;p&gt;
     * The solution adopted here is to deserialize the state data of this class in
     * this protected method. This method must be called by the
     * &lt;code&gt;readObject()&lt;/code&gt; of the first serializable subclass.
     * &lt;p&gt;
     * Subclasses may override if the subclass has a specific field that must be present
     * before &lt;code&gt;put()&lt;/code&gt; or &lt;code&gt;calculateThreshold()&lt;/code&gt; will work correctly.
     * 
     * @param in  the input stream
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>doReadObject</name><parameter_list>(<parameter><decl><type><name>ObjectInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>keyType</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>valueType</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>purgeValues</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadFactor</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readFloat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>capacity</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>new</operator> <name><name>HashEntry</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Object</name></type> <name>key</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>value</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>threshold</name> <operator>=</operator> <call><name>calculateThreshold</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// do not call super.doReadObject() as code there doesn't work for reference map</comment>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="keepassdroid-2.5.9/app/src/main/java/org/apache/commons/collections/map/ReferenceMap.java" hash="30d85926d10c6a7d76a6a575b153117a3d110943"><comment type="block">/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>collections</name><operator>.</operator><name>map</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A &lt;code&gt;Map&lt;/code&gt; implementation that allows mappings to be
 * removed by the garbage collector.
 * &lt;p&gt;
 * When you construct a &lt;code&gt;ReferenceMap&lt;/code&gt;, you can specify what kind
 * of references are used to store the map's keys and values.
 * If non-hard references are used, then the garbage collector can remove
 * mappings if a key or value becomes unreachable, or if the JVM's memory is
 * running low. For information on how the different reference types behave,
 * see {@link java.lang.ref.Reference Reference}.
 * &lt;p&gt;
 * Different types of references can be specified for keys and values.
 * The keys can be configured to be weak but the values hard,
 * in which case this class will behave like a
 * &lt;a href="http://java.sun.com/j2se/1.4/docs/api/java/util/WeakHashMap.html"&gt;
 * &lt;code&gt;WeakHashMap&lt;/code&gt;&lt;/a&gt;. However, you can also specify hard keys and
 * weak values, or any other combination. The default constructor uses
 * hard keys and soft values, providing a memory-sensitive cache.
 * &lt;p&gt;
 * This map is similar to
 * {@link org.apache.commons.collections.map.ReferenceIdentityMap ReferenceIdentityMap}.
 * It differs in that keys and values in this class are compared using &lt;code&gt;equals()&lt;/code&gt;.
 * &lt;p&gt;
 * This {@link java.util.Map Map} implementation does &lt;i&gt;not&lt;/i&gt; allow null elements.
 * Attempting to add a null key or value to the map will raise a &lt;code&gt;NullPointerException&lt;/code&gt;.
 * &lt;p&gt;
 * This implementation is not synchronized.
 * You can use {@link java.util.Collections#synchronizedMap} to 
 * provide synchronized access to a &lt;code&gt;ReferenceMap&lt;/code&gt;.
 * Remember that synchronization will not stop the garbage collecter removing entries.
 * &lt;p&gt;
 * All the available iterators can be reset back to the start by casting to
 * &lt;code&gt;ResettableIterator&lt;/code&gt; and calling &lt;code&gt;reset()&lt;/code&gt;.
 * &lt;p&gt;
 * &lt;strong&gt;Note that ReferenceMap is not synchronized and is not thread-safe.&lt;/strong&gt;
 * If you wish to use this map from multiple threads concurrently, you must use
 * appropriate synchronization. The simplest approach is to wrap this map
 * using {@link java.util.Collections#synchronizedMap}. This class may throw 
 * exceptions when accessed by concurrent threads without synchronization.
 * &lt;p&gt;
 * NOTE: As from Commons Collections 3.1 this map extends &lt;code&gt;AbstractReferenceMap&lt;/code&gt;
 * (previously it extended AbstractMap). As a result, the implementation is now
 * extensible and provides a &lt;code&gt;MapIterator&lt;/code&gt;.
 *
 * @see java.lang.ref.Reference
 * 
 * @since Commons Collections 3.0 (previously in main package v2.1)
 * @version $Revision: 646777 $ $Date: 2008-04-10 13:33:15 +0100 (Thu, 10 Apr 2008) $
 * 
 * @author Paul Jack
 * @author Stephen Colebourne
 */</comment>
<class><specifier>public</specifier> class <name>ReferenceMap</name> <super_list><extends>extends <super><name>AbstractReferenceMap</name></super></extends> <implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{

    <comment type="block" format="javadoc">/** Serialization version */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1555089888138299607L</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ReferenceMap&lt;/code&gt; that will
     * use hard references to keys and soft references to values.
     */</comment>
    <constructor><specifier>public</specifier> <name>ReferenceMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>HARD</name></expr></argument>, <argument><expr><name>SOFT</name></expr></argument>, <argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>, <argument><expr><name>DEFAULT_LOAD_FACTOR</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ReferenceMap&lt;/code&gt; that will
     * use the specified types of references.
     *
     * @param keyType  the type of reference to use for keys;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param valueType  the type of reference to use for values;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     */</comment>
    <constructor><specifier>public</specifier> <name>ReferenceMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>, <argument><expr><name>DEFAULT_LOAD_FACTOR</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ReferenceMap&lt;/code&gt; that will
     * use the specified types of references.
     *
     * @param keyType  the type of reference to use for keys;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param valueType  the type of reference to use for values;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param purgeValues should the value be automatically purged when the 
     *   key is garbage collected 
     */</comment>
    <constructor><specifier>public</specifier> <name>ReferenceMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>purgeValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><name>DEFAULT_CAPACITY</name></expr></argument>, <argument><expr><name>DEFAULT_LOAD_FACTOR</name></expr></argument>, <argument><expr><name>purgeValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ReferenceMap&lt;/code&gt; with the
     * specified reference types, load factor and initial
     * capacity.
     *
     * @param keyType  the type of reference to use for keys;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param valueType  the type of reference to use for values;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param capacity  the initial capacity for the map
     * @param loadFactor  the load factor for the map
     */</comment>
    <constructor><specifier>public</specifier> <name>ReferenceMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>loadFactor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new &lt;code&gt;ReferenceMap&lt;/code&gt; with the
     * specified reference types, load factor and initial
     * capacity.
     *
     * @param keyType  the type of reference to use for keys;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param valueType  the type of reference to use for values;
     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}
     * @param capacity  the initial capacity for the map
     * @param loadFactor  the load factor for the map
     * @param purgeValues  should the value be automatically purged when the 
     *   key is garbage collected 
     */</comment>
    <constructor><specifier>public</specifier> <name>ReferenceMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valueType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>,
                        <parameter><decl><type><name>float</name></type> <name>loadFactor</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>purgeValues</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>keyType</name></expr></argument>, <argument><expr><name>valueType</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>loadFactor</name></expr></argument>, <argument><expr><name>purgeValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">//-----------------------------------------------------------------------</comment>
    <comment type="block" format="javadoc">/**
     * Write the map out using a custom routine.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<parameter><decl><type><name>ObjectOutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doWriteObject</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read the map in using a custom routine.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<parameter><decl><type><name>ObjectInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doReadObject</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

</unit>
