<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="OpenTripPlanner-for-Android-2.1.5">

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/androidTest/java/edu/usf/cutr/opentripplanner/android/tasks/TripRequestTest.java" hash="03d02cd024a8fdfb229437a893e506aeda121e1d"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>ActivityTestCase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Place</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>TripPlan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>WalkStep</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>OptimizeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseModeSet</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>JacksonConfig</name></name>;</import>

<class><specifier>public</specifier> class <name>TripRequestTest</name> <super_list><extends>extends <super><name>ActivityTestCase</name></super></extends></super_list> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testGetErrorMessage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>

    </block_content>}</block></function>
<comment type="line">//TODO make test case less exhaustive and run with all servers</comment>
<comment type="line">//    public void testRequestPlan() throws Exception {</comment>
<comment type="line">//        Context context = getInstrumentation().getTargetContext();</comment>
<comment type="line">//        Resources resources = context.getResources();</comment>
<comment type="line">//        InputStream inputStream = resources.openRawResource(R.raw.test_trip_response_corunha);</comment>
<comment type="line">//        Response savedResponse = JacksonConfig.getObjectReaderInstance().readValue(inputStream);</comment>
<comment type="line">//        String baseURL = "http://galadriel.dc.fi.udc.es:8080/otp";</comment>
<comment type="line">//        Request request = new Request();</comment>
<comment type="line">//        double startLatitude = 43.3527384041191, startLlongitude = -8.409261703491211;</comment>
<comment type="line">//        double endLatitude = 43.33304453039103, endLongitude = -8.411107063293457;</comment>
<comment type="line">//        boolean arriveBy = false;</comment>
<comment type="line">//        TraverseModeSet modes = new TraverseModeSet(TraverseMode.RAIL, TraverseMode.BUS, TraverseMode.WALK);</comment>
<comment type="line">//        OptimizeType optimization = OptimizeType.QUICK;</comment>
<comment type="line">//        String startLocation = startLatitude + "," + startLlongitude;</comment>
<comment type="line">//        String endLocation = endLatitude + "," + endLongitude;</comment>
<comment type="line">//</comment>
<comment type="line">//        try {</comment>
<comment type="line">//            request.setFrom(URLEncoder.encode(startLocation, OTPApp.URL_ENCODING));</comment>
<comment type="line">//            request.setTo(URLEncoder.encode(endLocation, OTPApp.URL_ENCODING));</comment>
<comment type="line">//        } catch (UnsupportedEncodingException e1) {</comment>
<comment type="line">//            e1.printStackTrace();</comment>
<comment type="line">//        }</comment>
<comment type="line">//        request.setOptimize(optimization);</comment>
<comment type="line">//        request.setModes(modes);</comment>
<comment type="line">//        Date requestTripDate;</comment>
<comment type="line">//        Calendar calendar = Calendar.getInstance();</comment>
<comment type="line">//        calendar.set(2014, Calendar.SEPTEMBER, 4, 16, 49);</comment>
<comment type="line">//        requestTripDate = calendar.getTime();</comment>
<comment type="line">//        request.setDateTime(</comment>
<comment type="line">//                DateFormat.format(OTPApp.FORMAT_OTP_SERVER_DATE_QUERY,</comment>
<comment type="line">//                        requestTripDate.getTime()).toString(),</comment>
<comment type="line">//                DateFormat</comment>
<comment type="line">//                        .format(OTPApp.FORMAT_OTP_SERVER_TIME_QUERY, requestTripDate.getTime())</comment>
<comment type="line">//                        .toString());</comment>
<comment type="line">//        TripRequest tripRequest = new TripRequest(null, getActivity(), resources, null, null);</comment>
<comment type="line">//        Response newResponse = tripRequest.requestPlan(request, OTPApp.FOLDER_STRUCTURE_PREFIX_NEW, baseURL);</comment>
<comment type="line">//        TripPlan oldTripPlan = savedResponse.getPlan();</comment>
<comment type="line">//        TripPlan newTripPlan = newResponse.getPlan();</comment>
<comment type="line">//        ObjectMapper mapper = new ObjectMapper();</comment>
<comment type="line">//        File file = new File(context.getFilesDir(), "test_trip_request_corunha.json");</comment>
<comment type="line">//        mapper.writeValue(file, request);</comment>
<comment type="line">//        if (newTripPlan != null &amp;&amp; newTripPlan.getItinerary() != null){</comment>
<comment type="line">//            Assert.assertEquals(oldTripPlan.getItinerary().size(),newTripPlan.getItinerary().size());</comment>
<comment type="line">//            for (int i = 0; i &lt; newTripPlan.getItinerary().size(); i++){</comment>
<comment type="line">//                Itinerary oldItinerary = oldTripPlan.getItinerary().get(i);</comment>
<comment type="line">//                Itinerary newItinerary = newTripPlan.getItinerary().get(i);</comment>
<comment type="line">//                Assert.assertEquals(newItinerary.legs.size(), oldItinerary.legs.size());</comment>
<comment type="line">//                for (int j = 0; j &lt; newItinerary.legs.size(); j++){</comment>
<comment type="line">//                    Leg oldLeg = oldItinerary.legs.get(j);</comment>
<comment type="line">//                    Leg newLeg = newItinerary.legs.get(j);</comment>
<comment type="line">//                    Assert.assertEquals(newLeg.from.getLat(), oldLeg.from.getLat());</comment>
<comment type="line">//                    Assert.assertEquals(newLeg.from.getLon(), oldLeg.from.getLon());</comment>
<comment type="line">//                    Assert.assertEquals(newLeg.to.getLat(), oldLeg.to.getLat());</comment>
<comment type="line">//                    Assert.assertEquals(newLeg.to.getLon(), oldLeg.to.getLon());</comment>
<comment type="line">//                    if (oldLeg.getSteps() != null &amp;&amp; newLeg.getSteps() != null){</comment>
<comment type="line">//                        Assert.assertEquals(newLeg.getSteps().size(), oldLeg.getSteps().size());</comment>
<comment type="line">//                        for (int k = 0; k &lt; newLeg.getSteps().size(); k++){</comment>
<comment type="line">//                            WalkStep oldWalkStep = oldLeg.getSteps().get(k);</comment>
<comment type="line">//                            WalkStep newWalkStep = newLeg.getSteps().get(k);</comment>
<comment type="line">//                            Assert.assertEquals(oldWalkStep.getLat(),newWalkStep.getLat());</comment>
<comment type="line">//                            Assert.assertEquals(oldWalkStep.getLon(),newWalkStep.getLon());</comment>
<comment type="line">//                        }</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                    else if (!(oldLeg.getSteps() == null &amp;&amp; newLeg.getSteps() == null)){</comment>
<comment type="line">//                        fail();</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                    if (oldLeg.getIntermediateStops() != null &amp;&amp; newLeg.getIntermediateStops() != null){</comment>
<comment type="line">//                        Assert.assertEquals(newLeg.getIntermediateStops().size(), oldLeg.getIntermediateStops().size());</comment>
<comment type="line">//                        for (int k = 0; k &lt; newLeg.getSteps().size(); k++){</comment>
<comment type="line">//                            Place oldPlace = oldLeg.getIntermediateStops().get(k);</comment>
<comment type="line">//                            Place newPlace = newLeg.getIntermediateStops().get(k);</comment>
<comment type="line">//                            Assert.assertEquals(oldPlace.getLat(),newPlace.getLat());</comment>
<comment type="line">//                            Assert.assertEquals(oldPlace.getLon(),newPlace.getLon());</comment>
<comment type="line">//                        }</comment>
<comment type="line">//                    }</comment>
<comment type="line">//                    else if (!(oldLeg.getIntermediateStops() == null &amp;&amp; newLeg.getIntermediateStops() == null)){</comment>
<comment type="line">//                        fail();</comment>
<comment type="line">//                    }</comment>
<comment type="line">//</comment>
<comment type="line">//                }</comment>
<comment type="line">//            }</comment>
<comment type="line">//        }</comment>
<comment type="line">//        else{</comment>
<comment type="line">//            fail("Empty trip plan or itineraries");</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/androidTest/java/edu/usf/cutr/opentripplanner/android/test/BoundsTest.java" hash="44cf0a0f37e6dc1eeae19eb31191cd5fafc54704"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>test</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<import>import <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>AndroidTestCase</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>LocationUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Evaluates the LocationUtil.checkPointInBoundingBox() method with various bounds
 * and locations.
 * &lt;p&gt;
 * This method also works for servers crossing IDL.
 *
 * @author barbeau
 * @author Vreixo Gonzalez
 */</comment>
<class><specifier>public</specifier> class <name>BoundsTest</name> <super_list><extends>extends <super><name>AndroidTestCase</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"BoundsTest"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverTampa</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverPortland</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverGreenville</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverCalgary</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverPorto</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverPortlandBigBounds</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// This servers test the behavior when crossing the IDL, which is the main reason to use the distances to check point bounds</comment>
    <decl_stmt><decl><type><name>Server</name></type> <name>serverFijiIDL</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverChukotkaPeninsulaIDL</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Server</name></type> <name>serverUnitedStates</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <comment type="line">// Tampa server</comment>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Tampa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://opentripplanner.usf.edu/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"27.6236434,-82.8511308,28.3251809,-82.0559399"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Sean Barbeau"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverTampa</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"opentripplanner@cutr.usf.edu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Portland server</comment>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Portland"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://rtp.trimet.org/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"45.416,-122.839,45.609,-122.537"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Tech Support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortland</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"maptripplanner@trimet.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Greenville, SC server</comment>
        <expr_stmt><expr><call><name><name>serverGreenville</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Greenville, SC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverGreenville</name>
                <operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://trip.greenvilleopenmap.info/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverGreenville</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"34.50005,-82.9999831,35.043754,-81.800363"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverGreenville</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverGreenville</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Mike Nice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverGreenville</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"bikeoid@greenvilleopenmap.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Calgary, Canada server</comment>
        <expr_stmt><expr><call><name><name>serverCalgary</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Calgary, Canada"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverCalgary</name>
                <operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://gisciencegroup.ucalgary.ca:8080/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverCalgary</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"50.7100302,-114.6108674,51.352879,-113.4783241"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverCalgary</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_CA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverCalgary</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Stefan Steiniger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverCalgary</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"sstein@geo.uzh.ch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Porto, Portugal server</comment>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Porto, Portugal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(
                <argument><expr><literal type="string">"http://env-8084044.jelastic.servint.net/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"40.96826,-8.77817,41.40688,-8.27958"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"pt_PT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Ricardo Reis da Silva"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPorto</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"info@transportespublicos.pt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Portland server big bounds</comment>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"Portland big bounds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://rtp.trimet.org/opentripplanner-api-webapp/ws"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"44.761538,-123.5271731,45.901268,-121.121062"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Tech Support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverPortlandBigBounds</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"maptripplanner@trimet.org"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FijiIDL server</comment>
        <comment type="line">// This server tests the behavior when crossing the IDL, which is the main reason to use the distances to check point bounds</comment>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"FijiIDL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://newserver.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"-17.0074,179.8261,-16.407,-179.8141"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverFijiIDL</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Chukotka Peninsula server</comment>
        <comment type="line">// This server tests the behavior when crossing the IDL, which is the main reason to use the distances to check point bounds</comment>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"ChukotkaPeninsulaIDL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://newserver.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"66.1433,179.0001,67.9183,-179.0124"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverChukotkaPeninsulaIDL</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// United States</comment>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><literal type="string">"United States"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><literal type="string">"http://us-server.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="string">"24.5454892,-124.16933,49.273757,-69.965541"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><literal type="string">"en_US"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverUnitedStates</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUp</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>testBoundsEvaluation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Tampa server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInTampa1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">27.9710</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">82.4650</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
                <argument><expr><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInTampa1</name></expr></argument>, <argument><expr><name>serverTampa</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfTampa1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.416</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.839</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfTampa1</name></expr></argument>, <argument><expr><name>serverTampa</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Portland server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInPortland1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.518</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.6800</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInPortland1</name></expr></argument>, <argument><expr><name>serverPortland</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfPortland1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.416</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.939</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfPortland1</name></expr></argument>, <argument><expr><name>serverPortland</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Greenville server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInGreenville1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">34.84733</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">82.39693</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInGreenville1</name></expr></argument>, <argument><expr><name>serverGreenville</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfGreenville1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.416</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.839</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfGreenville1</name></expr></argument>, <argument><expr><name>serverGreenville</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Calgary server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInCalgary1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">50.7100302</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">114.6108674</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInCalgary1</name></expr></argument>, <argument><expr><name>serverCalgary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfCalgary1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.416</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.839</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfCalgary1</name></expr></argument>, <argument><expr><name>serverCalgary</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Porto server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInPorto1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">41.1554</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8.6078</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(
                <argument><expr><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInPorto1</name></expr></argument>, <argument><expr><name>serverPorto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfPorto1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.416</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.839</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfPorto1</name></expr></argument>, <argument><expr><name>serverPorto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Portland big bounds server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInPortlandBigBounds1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">45.518</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">122.6800</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInPortlandBigBounds1</name></expr></argument>, <argument><expr><name>serverPortlandBigBounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfPortlandBigBounds1</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">27.9710</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">82.4650</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfPortlandBigBounds1</name></expr></argument>, <argument><expr><name>serverPortlandBigBounds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// FijiIDL server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInFijiIDLPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16.407</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">179.8141</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInFijiIDLPositive</name></expr></argument>, <argument><expr><name>serverFijiIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfFijiIDLPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">17.6995</literal></expr></argument>, <argument><expr><literal type="number">175.6581</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfFijiIDLPositive</name></expr></argument>, <argument><expr><name>serverFijiIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInFijiIDLNegative</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16.9089</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">179.8151</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInFijiIDLNegative</name></expr></argument>, <argument><expr><name>serverFijiIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfFijiIDLNegative</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16.5907</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">178.8570</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfFijiIDLNegative</name></expr></argument>, <argument><expr><name>serverFijiIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ChukotkaPeninsulaIDL server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInChukotkaPeninsulaIDLPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">66.8878</literal></expr></argument>, <argument><expr><literal type="number">179.1520</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInChukotkaPeninsulaIDLPositive</name></expr></argument>,
                <argument><expr><name>serverChukotkaPeninsulaIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfChukotkaPeninsulaIDLPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">17.6995</literal></expr></argument>, <argument><expr><literal type="number">175.6581</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfChukotkaPeninsulaIDLPositive</name></expr></argument>,
                        <argument><expr><name>serverChukotkaPeninsulaIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInChukotkaPeninsulaIDLNegative</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">67.2878</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">179.7276</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInChukotkaPeninsulaIDLNegative</name></expr></argument>,
                <argument><expr><name>serverChukotkaPeninsulaIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfChukotkaPeninsulaIDLNegative</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">67.2878</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">178.7276</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfChukotkaPeninsulaIDLNegative</name></expr></argument>,
                        <argument><expr><name>serverChukotkaPeninsulaIDL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// USA server</comment>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointInUsaPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">28.05866283764341</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">82.41802878677845</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointInUsaPositive</name></expr></argument>,
                <argument><expr><name>serverUnitedStates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LatLng</name></type> <name>pointOutOfUsaPositive</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><literal type="number">67.2878</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">178.7276</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertFalse</name></name><argument_list>(<argument><expr><call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>pointOutOfUsaPositive</name></expr></argument>, <argument><expr><name>serverUnitedStates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/AboutActivity.java" hash="b7f508abddea76c3c309440ec62d6733eeaef0b5"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>GooglePlayServicesUtil</name></name>;</import>


<class><specifier>public</specifier> class <name>AboutActivity</name> <super_list><extends>extends <super><name>FragmentActivity</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>AboutActivity</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>description</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>appDescription</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>acknowledgements</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>acknowledgements</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>license</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>license</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Button</name></type> <name>playServicesButton</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>playServicesButton</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>acknowledgements</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>license</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>playServicesButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>AboutActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>AboutPlayServicesActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/AboutPlayServicesActivity.java" hash="eb28a41b0d33b3c70b7a9c17395503b585df5db4"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>GooglePlayServicesUtil</name></name>;</import>


<class><specifier>public</specifier> class <name>AboutPlayServicesActivity</name> <super_list><extends>extends <super><name>FragmentActivity</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>AboutPlayServicesActivity</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>about_playservices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>playServicesAcknowledgement</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>playServicesAcknowledgement</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>playServicesAcknowledgement</name>
                <operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>GooglePlayServicesUtil</name><operator>.</operator><name>getOpenSourceSoftwareLicenseInfo</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/MyActivity.java" hash="db1079d4cc30ddd7944562b5af138c84911454fc"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>prefs</name><operator>.</operator><name>PreferenceChangeEvent</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>fragments</name><operator>.</operator><name>DirectionListFragment</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>fragments</name><operator>.</operator><name>MainFragment</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>DateCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OtpFragment</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>OTPBundle</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>ServersDataSource</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ServerChecker</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Main Activity for the OTP for Android app
 *
 * @author Marcy Gordon
 * @author Khoa Tran
 * @author Sean Barbeau (conversion to Jackson)
 * @author Vreixo Gonzï¿½lez (update to Google Maps API v2, UI and general app improvements)
 */</comment>

<class><specifier>public</specifier> class <name>MyActivity</name> <super_list><extends>extends <super><name>FragmentActivity</name></super></extends> <implements>implements <super><name>OtpFragment</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>currentItinerary</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>currentItineraryList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentItineraryIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OTPBundle</name></type> <name>bundle</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>MainFragment</name></type> <name>mainFragment</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentRequestString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isButtonStartLocation</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DateCompleteListener</name></type> <name>dateCompleteCallback</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Called when the activity is first created. */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//	bundle = (OTPBundle)getLastCustomNonConfigurationInstance();</comment>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mainFragment</name> <operator>=</operator> <operator>(</operator><name>MainFragment</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(
                    <argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG_FRAGMENT_MAIN_FRAGMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//recuperar o tag adecuado e pillar ese fragment</comment>

        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>fragmentTransaction</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mainFragment</name> <operator>=</operator> <operator>new</operator> <call><name>MainFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentTransaction</name>
                    <operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mainFragment</name></name></expr></argument>, <argument><expr><name>mainFragment</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG_FRAGMENT_MAIN_FRAGMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentTransaction</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onNewIntent</name> <parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_RESUME_APP_WITH_TRIP_ID</name></name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>openModeMarker</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>OTPApp</name><operator>.</operator><name>SETTINGS_REQUEST_CODE</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name>RESULT_OK</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>shouldRefresh</name> <init>= <expr><call><name><name>data</name>
                            <operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>REFRESH_SERVER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>changedSelectedCustomServer</name> <init>= <expr><call><name><name>data</name>
                            <operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_SELECTED_CUSTOM_SERVER_RETURN_KEY</name></name></expr></argument>,
                                    <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>changedTileProvider</name> <init>= <expr><call><name><name>data</name>
                            <operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_MAP_TILE_PROVIDER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>liveUpdatesDisabled</name> <init>= <expr><call><name><name>data</name>
                            <operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>LIVE_UPDATES_DISABLED_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>changedParametersMustRequestTrip</name> <init>= <expr><call><name><name>data</name>
                            <operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_PARAMETERS_MUST_REQUEST_TRIP_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">//				Toast.makeText(this, "Should server list refresh? " + shouldRefresh, Toast.LENGTH_LONG).show();</comment>
                    <if_stmt><if>if <condition>(<expr><name>shouldRefresh</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>setNeedToRunAutoDetect</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>setNeedToUpdateServersList</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>changedSelectedCustomServer</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name> <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name>mainFragment</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Server</name></type> <name>server</name></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                            <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else<block>{<block_content>
                            <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><call><name><name>dataSource</name>
                                    <operator>.</operator><name>getServer</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>setmCustomServerMetadata</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>changedTileProvider</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>updateOverlay</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>liveUpdatesDisabled</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>listenForTripTimeUpdates</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>changedParametersMustRequestTrip</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>processRequestTrip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            <case>case <expr><name><name>OTPApp</name><operator>.</operator><name>CHOOSE_CONTACT_REQUEST_CODE</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name>RESULT_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"CHOOSE CONTACT RESULT OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>Uri</name></type> <name>contactData</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Cursor</name></type> <name>c</name> <init>= <expr><call><name>managedQuery</name><argument_list>(<argument><expr><name>contactData</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>c</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(
                                <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>FORMATTED_ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>setTextBoxLocation</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>isButtonStartLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>PreferenceManager</name>
                                <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>isButtonStartLocation</name></expr>)</condition><block>{<block_content>
                            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else<block>{<block_content>
                            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>processAddress</name></name><argument_list>(<argument><expr><name>isButtonStartLocation</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>processRequestTrip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>

        <expr_stmt><expr><name>mainFragment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Released mainFragment with map in MyActivity.onDestroy()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onItinerariesLoaded</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>currentItineraryList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentItineraryList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LIVE_UPDATES</name></name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>realtimeLegsOnItineraries</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>soonerRealTimeDeparture</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Itinerary</name></type> <name>itinerary</name> <range>: <expr><name>itineraries</name></expr></range></decl></init>)</control><block>{<block_content>
                <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>itinerary</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>realTime</name></name></expr>)</condition><block>{<block_content>
                        <decl_stmt><decl><type><name>long</name></type> <name>legRealtimeDeparture</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>legRealtimeDeparture</name> <operator>&lt;</operator> <name>soonerRealTimeDeparture</name></expr>)</condition><block>{<block_content>
                            <expr_stmt><expr><name>soonerRealTimeDeparture</name> <operator>=</operator> <name>legRealtimeDeparture</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>realtimeLegsOnItineraries</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>realtimeLegsOnItineraries</name></expr>)</condition><block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>realtimeLegsOnItineraries</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_REALTIME_AVAILABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>listenForTripTimeUpdates</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>soonerRealTimeDeparture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onItinerarySelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>animateCamera</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name><name>currentItineraryList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>currentItineraryIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentItinerary</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentItinerary</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>currentItineraryList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>legs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>showRouteOnMap</name></name><argument_list>(<argument><expr><name>currentItinerary</name></expr></argument>, <argument><expr><name>animateCamera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>getCurrentItinerary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentItinerary</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onSwitchedToDirectionFragment</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FragmentManager</name></type> <name>fm</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Fragment</name></type> <name>directionFragment</name> <init>= <expr><operator>new</operator> <call><name>DirectionListFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mainFragment</name></name></expr></argument>, <argument><expr><name>directionFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><name><name>FragmentTransaction</name><operator>.</operator><name>TRANSIT_FRAGMENT_FADE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>addToBackStack</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>OTPBundle</name></type> <name>getOTPBundle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>bundle</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setOTPBundle</name><parameter_list>(<parameter><decl><type><name>OTPBundle</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bundle</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bundle</name><operator>.</operator><name>setCurrentItineraryIndex</name></name><argument_list>(<argument><expr><name>currentItineraryIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bundle</name><operator>.</operator><name>setItineraryList</name></name><argument_list>(<argument><expr><name>currentItineraryList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onSwitchedToMainFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>FragmentManager</name></type> <name>fm</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>transaction</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>setTransition</name></name><argument_list>(<argument><expr><name><name>FragmentTransaction</name><operator>.</operator><name>TRANSIT_FRAGMENT_FADE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fm</name><operator>.</operator><name>popBackStack</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>transaction</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>setCurrentRequestString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>currentRequestString</name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>getCurrentRequestString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentRequestString</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>zoomToLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mainFragment</name><operator>.</operator><name>zoomToLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>getCurrentItineraryList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentItineraryList</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCurrentItineraryIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentItineraryIndex</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the isButtonStartLocation
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isButtonStartLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isButtonStartLocation</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param isButtonStartLocation the isButtonStartLocation to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setButtonStartLocation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isButtonStartLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isButtonStartLocation</name></name> <operator>=</operator> <name>isButtonStartLocation</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDateCompleteCallback</name><parameter_list>(<parameter><decl><type><name>DateCompleteListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dateCompleteCallback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onDateComplete</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>tripDate</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>scheduleType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dateCompleteCallback</name><operator>.</operator><name>onDateComplete</name></name><argument_list>(<argument><expr><name>tripDate</name></expr></argument>, <argument><expr><name>scheduleType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/OTPApp.java" hash="c2c813cf59a196b5dde521dc774013f5126e4c86"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>

<comment type="block">/*
 * Modified by Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>OTPApp</name> <super_list><extends>extends <super><name>Application</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CONNECTION_FAILURE_RESOLUTION_REQUEST_CODE</name> <init>= <expr><literal type="number">9000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHECK_GOOGLE_PLAY_REQUEST_CODE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SETTINGS_REQUEST_CODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CHOOSE_CONTACT_REQUEST_CODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>METADATA_LOCATION</name> <init>= <expr><literal type="string">"/metadata"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BIKE_RENTAL_LOCATION</name> <init>= <expr><literal type="string">"/bike_rental"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRIP_TIMES_UPDATES_LOCATION_BEFORE_ID</name> <init>= <expr><literal type="string">"/index/trips/"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TRIP_TIMES_UPDATES_LOCATION_AFTER_ID</name> <init>= <expr><literal type="string">"/stoptimes"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PLAN_LOCATION</name> <init>= <expr><literal type="string">"/plan"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVER_INFO_LOCATION_OLD</name> <init>= <expr><literal type="string">"/serverinfo"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SERVER_INFO_LOCATION_NEW</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Since OTP version 0.11 (API_VERSION_v1), duration is published in seconds, before in ms */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_MINOR_011</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Since OTP version 0.19 (API_VERSION_v2), router metadata is published via /routers/default endpoint */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_MINOR_019</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Since OTP version 1.0.0 (API_VERSION_v3), busish and trainish modes are not supported any more */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_V3</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Since OTP version 0.19 (API_VERSION_v2), router metadata is published via /routers/default endpoint */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_V2</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_V1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>API_VERSION_PRE_V1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FOLDER_STRUCTURE_PREFIX_NEW</name> <init>= <expr><literal type="string">"/routers/default"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FOLDER_STRUCTURE_PREFIX_OLD</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>URL_ENCODING</name> <init>= <expr><literal type="string">"UTF-8"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>REFRESH_SERVER_RETURN_KEY</name> <init>= <expr><literal type="string">"RefreshServer"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHANGED_SELECTED_CUSTOM_SERVER_RETURN_KEY</name>
            <init>= <expr><literal type="string">"ChangedSelectedCustomServer"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHANGED_MAP_TILE_PROVIDER_RETURN_KEY</name> <init>= <expr><literal type="string">"ChangedMapTileProvider"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LIVE_UPDATES_DISABLED_RETURN_KEY</name> <init>= <expr><literal type="string">"LiveUpdatesDisabled"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CHANGED_PARAMETERS_MUST_REQUEST_TRIP_RETURN_KEY</name> <init>= <expr><literal type="string">"ChangedParameters"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_FRAGMENT_MAIN_FRAGMENT</name> <init>= <expr><literal type="string">"mainFragment"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_FRAGMENT_DATE_TIME_DIALOG</name> <init>= <expr><literal type="string">"dateTimeDialog"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAP_TILE_GOOGLE</name> <init>= <expr><literal type="string">"Google"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAP_TILE_GOOGLE_HYBRID</name> <init>= <expr><literal type="string">"Google hybrid"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAP_TILE_GOOGLE_NORMAL</name> <init>= <expr><literal type="string">"Google normal"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAP_TILE_GOOGLE_SATELLITE</name> <init>= <expr><literal type="string">"Google satellite"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MAP_TILE_GOOGLE_TERRAIN</name> <init>= <expr><literal type="string">"Google terrain"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_MAP_TILE_SMALL_HEIGHT</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_MAP_TILE_SMALL_WIDTH</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_MAP_TILE_BIG_HEIGHT</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_MAP_TILE_BIG_WIDTH</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CUSTOM_MAP_TILE_Z_INDEX</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BIKE_PARAMETERS_MIN_VALUE</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BIKE_PARAMETERS_QUICK_DEFAULT_VALUE</name> <init>= <expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BIKE_PARAMETERS_FLAT_DEFAULT_VALUE</name> <init>= <expr><literal type="number">2.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BIKE_PARAMETERS_MAX_VALUE</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>COORDINATES_IMPORTANT_DIFFERENCE</name> <init>= <expr><literal type="number">2000f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ADDRESS_MAX_LINES_TO_SHOW</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//in meters</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GEOCODING_MAX_ERROR</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HTTP_CONNECTION_TIMEOUT</name> <init>= <expr><literal type="number">15000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HTTP_SOCKET_TIMEOUT</name> <init>= <expr><literal type="number">15000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_MAP_FAILED</name> <init>= <expr><literal type="string">"Map failed"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_MAP_CAMERA</name> <init>= <expr><literal type="string">"Map Camera"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_MAP_START_MARKER_POSITION</name> <init>= <expr><literal type="string">"Map StartMarkerPosition"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_MAP_END_MARKER_POSITION</name> <init>= <expr><literal type="string">"Map EndMarkerPosition"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_TB_START_LOCATION</name> <init>= <expr><literal type="string">"tbStartLocation"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_TB_END_LOCATION</name> <init>= <expr><literal type="string">"tbEndLocation"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_OTP_BUNDLE</name> <init>= <expr><literal type="string">"OTP bundle"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_APP_STARTS</name> <init>= <expr><literal type="string">"app starts"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_IS_START_LOCATION_GEOCODING_PROCESSED</name>
            <init>= <expr><literal type="string">"startlocation geocoding processed"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_IS_END_LOCATION_GEOCODING_PROCESSED</name>
            <init>= <expr><literal type="string">"enlocation geocoding processed"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_IS_START_LOCATION_CHANGED_BY_USER</name>
            <init>= <expr><literal type="string">"startlocation changed by user"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_IS_END_LOCATION_CHANGED_BY_USER</name>
            <init>= <expr><literal type="string">"endlocation changed by user"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_RESULT_TRIP_START_LOCATION</name> <init>= <expr><literal type="string">"result trip start location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_RESULT_TRIP_END_LOCATION</name> <init>= <expr><literal type="string">"result trip end location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_SAVED_LAST_LOCATION</name> <init>= <expr><literal type="string">"saved last location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_SAVED_LAST_LOCATION_CHECKED_FOR_SERVER</name>
            <init>= <expr><literal type="string">"saved last location checked for server"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_TRIP_DATE</name> <init>= <expr><literal type="string">"trip date"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_ARRIVE_BY</name> <init>= <expr><literal type="string">"arrive by"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_TIMEPICKER_SAVED_HOUR</name> <init>= <expr><literal type="string">"timepicker hours"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_TIMEPICKER_SAVED_MINUTE</name> <init>= <expr><literal type="string">"timepicker minutes"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_SETTINGS_INTENT</name> <init>= <expr><literal type="string">"timepicker minutes"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY__IS_ALARM_BIKE_RENTAL_ACTIVE</name> <init>= <expr><literal type="string">"is alarm bike rental active"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_INTENT_TRIP_ID</name> <init>= <expr><literal type="string">"intent trip id"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_PREVIOUS_OPTIMIZATION</name> <init>= <expr><literal type="string">"previous Optimization"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_PREVIOUS_MODES</name> <init>= <expr><literal type="string">"previous mode"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MIN_VALUE</name> <init>= <expr><literal type="string">"previous bike triangle min value"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MAX_VALUE</name> <init>= <expr><literal type="string">"previous bike triangle max value"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BUNDLE_KEY_CUSTOM_SERVER_METADATA</name> <init>= <expr><literal type="string">"custom server metadata"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLOR_ROUTE_LINE</name> <init>= <expr><literal type="number">0x7F0000FF</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Preference keys
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name> <init>= <expr><literal type="string">"origin_is_my_location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name>
            <init>= <expr><literal type="string">"destination_is_my_location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_MAP_TILE_SOURCE</name> <init>= <expr><literal type="string">"map_tile_source"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_GEOCODER_PROVIDER</name> <init>= <expr><literal type="string">"geocoder_provider"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name> <init>= <expr><literal type="string">"auto_detect_server"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name> <init>= <expr><literal type="string">"custom_server_url"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_CUSTOM_SERVER_BOUNDS</name> <init>= <expr><literal type="string">"custom_server_bounds"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name>
            <init>= <expr><literal type="string">"custom_server_url_is_valid"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_REFRESH_SERVER_LIST</name> <init>= <expr><literal type="string">"refresh_server_list"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_OTP_PROVIDER_FEEDBACK</name> <init>= <expr><literal type="string">"otp_provider_feedback"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_MAX_WALKING_DISTANCE</name> <init>= <expr><literal type="string">"max_walking_distance"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_WHEEL_ACCESSIBLE</name> <init>= <expr><literal type="string">"wheelchair_accessible"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_SELECTED_SERVER</name> <init>= <expr><literal type="string">"selected_server"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name> <init>= <expr><literal type="string">"selected_custom_server"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_USE_ANDROID_GEOCODER</name> <init>= <expr><literal type="string">"use_android_geocoder"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name> <init>= <expr><literal type="string">"use_intelligent_markers"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_USE_DEVICE_TIMEZONE</name> <init>= <expr><literal type="string">"use_device_timezone"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LAST_TRAVERSE_MODE_SET</name> <init>= <expr><literal type="string">"last_traverse_mode_set"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MIN_VALUE</name> <init>= <expr><literal type="string">"last_bike_triangle_min_value"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MAX_VALUE</name> <init>= <expr><literal type="string">"last_bike_triangle_max_value"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LAST_OPTIMIZATION</name> <init>= <expr><literal type="string">"last_optimization"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_API_VERSION</name> <init>= <expr><literal type="string">"last_api_version"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name> <init>= <expr><literal type="string">"folder_structure_prefix"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LIVE_UPDATES</name> <init>= <expr><literal type="string">"live_updates"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_LIVE_UPDATES_CATEGORY</name> <init>= <expr><literal type="string">"live_updates_category"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_REALTIME_AVAILABLE</name> <init>= <expr><literal type="string">"real_time_available"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_PREFERENCE_SCREEN</name> <init>= <expr><literal type="string">"preferences_screen"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_APP_VERSION</name> <init>= <expr><literal type="string">"app_version"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_EXECUTED_VERSION_CODE_13</name> <init>= <expr><literal type="string">"executed_version_13"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_ABOUT</name> <init>= <expr><literal type="string">"about"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFERENCE_KEY_ABOUT_CATEGORY</name> <init>= <expr><literal type="string">"about_category"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Server</name></type> <name>selectedServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"OTP"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EXPIRATION_DAYS_FOR_SERVER_LIST</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>defaultInitialZoomLevel</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>defaultMediumZoomLevel</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>defaultMyLocationZoomLevel</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_COORDINATES</name> <init>= <expr><literal type="string">"#0.00000"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_DISTANCE_METERS</name> <init>= <expr><literal type="string">"%.0f"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_DISTANCE_KILOMETERS</name> <init>= <expr><literal type="string">"%.1f"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_OTP_SERVER_DATE_RESPONSE</name> <init>= <expr><literal type="string">"yyyy-MM-dd\'T\'HH:mm:ssZZ"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_OTP_SERVER_DATE_QUERY</name> <init>= <expr><literal type="string">"MM/dd/yy"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>FORMAT_OTP_SERVER_TIME_QUERY</name> <init>= <expr><literal type="string">"kk:mm"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OTP_RENTAL_QUALIFIER</name> <init>= <expr><literal type="string">"_RENT"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_UPDATE_INTERVAL_BIKE_RENTAL</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>DEFAULT_UPDATE_INTERVAL_TRIP_TIME</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTENT_UPDATE_BIKE_RENTAL_ACTION</name>
            <init>= <expr><literal type="string">"edu.usf.cutr.opentripplanner.android.OpenTripPlanner.UPDATE_BIKE_RENTAL"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTENT_UPDATE_TRIP_TIME_ACTION</name>
            <init>= <expr><literal type="string">"edu.usf.cutr.opentripplanner.android.OpenTripPlanner.UPDATE_TRIP_TIME"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTENT_NOTIFICATION_ACTION_OPEN_APP</name>
            <init>= <expr><literal type="string">"edu.usf.cutr.opentripplanner.android.OpenTripPlanner.NOTIFICATION_OPEN_APP"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTENT_NOTIFICATION_ACTION_DISMISS_UPDATES</name>
            <init>= <expr><literal type="string">"edu.usf.cutr.opentripplanner.android.OpenTripPlanner.NOTIFICATION_DISMISS_UPDATES"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>INTENT_NOTIFICATION_RESUME_APP_WITH_TRIP_ID</name>
            <init>= <expr><literal type="string">"edu.usf.cutr.opentripplanner.android.OpenTripPlanner.NOTIFICATION_RESUME"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Sets the currently selected OTP server
     *
     * @param sServer the selected OTP server
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedServer</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>sServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>selectedServer</name> <operator>=</operator> <name>sServer</name></expr>;</expr_stmt>
<comment type="line">//		new MetadataRequest(activity).execute("");</comment>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the currently selected OTP server
     *
     * @return the currently selected OTP server
     */</comment>
    <function><type><specifier>public</specifier> <name>Server</name></type> <name>getSelectedServer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>selectedServer</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/SettingsActivity.java" hash="98f7bbe504de6f8eff8bf058ff07544f020fb232"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>CheckBoxPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>ListPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceCategory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceScreen</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>URLUtil</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerCheckerCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>ServersDataSource</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ServerChecker</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>ConversionUtils</name></name>;</import>

<empty_stmt>;</empty_stmt>

<comment type="block">/*
 * Modified by Khoa Tran
 */</comment>
<class><specifier>public</specifier> class <name>SettingsActivity</name> <super_list><extends>extends <super><name>PreferenceActivity</name></super></extends> <implements>implements <super><name>ServerCheckerCompleteListener</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ListPreference</name></type> <name>mapTileProvider</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBoxPreference</name></type> <name>autoDetectServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>EditTextPreference</name></type> <name>customServerURL</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Preference</name></type> <name>providerFeedbackButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBoxPreference</name></type> <name>wheelAccessible</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Preference</name></type> <name>serverRefreshButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Preference</name></type> <name>aboutButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBoxPreference</name></type> <name>selectedCustomServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBoxPreference</name></type> <name>liveUpdates</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>PreferenceCategory</name></type> <name>liveUpdatesCategory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>PreferenceScreen</name></type> <name>preferenceScreen</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ListPreference</name></type> <name>geocoderProvider</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>EditTextPreference</name></type> <name>maxWalkingDistance</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Intent</name></type> <name>returnIntent</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>returnIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>returnIntent</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SETTINGS_INTENT</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preferences</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mapTileProvider</name> <operator>=</operator> <operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_MAP_TILE_SOURCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>geocoderProvider</name> <operator>=</operator> <operator>(</operator><name>ListPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_GEOCODER_PROVIDER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>autoDetectServer</name> <operator>=</operator> <operator>(</operator><name>CheckBoxPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>customServerURL</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>selectedCustomServer</name> <operator>=</operator> <operator>(</operator><name>CheckBoxPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveUpdates</name> <operator>=</operator> <operator>(</operator><name>CheckBoxPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LIVE_UPDATES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>liveUpdatesCategory</name> <operator>=</operator> <operator>(</operator><name>PreferenceCategory</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LIVE_UPDATES_CATEGORY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preferenceScreen</name> <operator>=</operator> <operator>(</operator><name>PreferenceScreen</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_PREFERENCE_SCREEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxWalkingDistance</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_MAX_WALKING_DISTANCE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wheelAccessible</name> <operator>=</operator> <operator>(</operator><name>CheckBoxPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_WHEEL_ACCESSIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aboutButton</name> <operator>=</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ABOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>entriesArray</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>map_tiles_servers_names</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>entriesArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setEntries</name></name><argument_list>(<argument><expr><call><name><name>entries</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>entriesValuesArray</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>map_tiles_servers_urls</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>entriesValues</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>entriesValuesArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>entriesValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entriesValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entriesValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>entriesValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mapTileProvider</name>
                <operator>.</operator><name>setEntryValues</name></name><argument_list>(<argument><expr><call><name><name>entriesValues</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>entriesValues</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>mapTileProvider</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getOverlayString</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>CharSequence</name></type> <name><name>geocoders</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr>,
                <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_google_places</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setEntries</name></name><argument_list>(<argument><expr><name>geocoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setEntryValues</name></name><argument_list>(<argument><expr><name>geocoders</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>geocoderProvider</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name>
                <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_GEOCODER_PROVIDER</name></name></expr></argument>,
                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_geocoder_preference_provider_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_geocoder_preference_provider_google_places</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_geocoder_preference_provider_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>geocoderProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_geocoder_preference_provider_google_places</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>actualMapTileProvider</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_MAP_TILE_SOURCE</name></name></expr></argument>,
                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_tiles_default_server_low_res</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapnik</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapnik</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_maquest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maquest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name>
                <operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_cyclemap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cyclemap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name>
                <operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_lyrk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>lyrk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name>
                <operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapbox</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapbox</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name>
                <operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapbox_retina</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapboxretina</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>actualMapTileProvider</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_MAP_TILE_PROVIDER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapnik</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapnik</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_maquest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>maquest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_cyclemap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cyclemap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_lyrk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>lyrk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapbox</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapbox</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapbox_retina</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mapboxretina</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mapTileProvider</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>maxWalkingDistance</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>maxWalkingDistance</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_maximum_walk_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>maxWalkingDistance</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>maxWalkingDistance</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                        <argument><expr><name>value</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_maximum_walk_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_PARAMETERS_MUST_REQUEST_TRIP_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>wheelAccessible</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>

                <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_PARAMETERS_MUST_REQUEST_TRIP_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>customServerURL</name>
                    <operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>customServerURL</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>selectedCustomServer</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setDependency</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>customServerURL</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>URLUtil</name><operator>.</operator><name>isValidUrl</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(
                            <argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name> <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>,
                            <argument><expr><call><name><name>SettingsActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                            <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(
                            <argument><expr><operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>SettingsActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name><name>SettingsActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>SettingsActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_url</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>
                )</argument_list></call>
                        <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>customServerURL</name>
                        <operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Custom server Button clicked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_SELECTED_CUSTOM_SERVER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name>
                        <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_REALTIME_AVAILABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>liveUpdates</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnPreferenceChangeListener</name></super><argument_list>()</argument_list> <block>{

                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <decl_stmt><decl><type><name>Boolean</name></type> <name>value</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>newValue</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>LIVE_UPDATES_DISABLED_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>liveUpdatesCategory</name><operator>.</operator><name>removePreference</name></name><argument_list>(<argument><expr><name>liveUpdates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>preferenceScreen</name><operator>.</operator><name>removePreference</name></name><argument_list>(<argument><expr><name>liveUpdatesCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>aboutButton</name><operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceClick</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"About button clicked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>AboutActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>providerFeedbackButton</name> <operator>=</operator> <operator>(</operator><name>Preference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_OTP_PROVIDER_FEEDBACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>providerFeedbackButton</name>
                <operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceClick</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Provider Feedback Button clicked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>recipient</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feedback_email_android_developer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>String</name></type> <name>uriText</name> <init>= <expr><literal type="string">"mailto:"</literal> <operator>+</operator> <name>recipient</name></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>String</name></type> <name>subject</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>subject</name> <operator>+=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_feedback_subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Date</name></type> <name>d</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>subject</name> <operator>+=</operator> <literal type="string">"["</literal> <operator>+</operator> <call><name><name>d</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>uriText</name> <operator>+=</operator> <literal type="string">"?subject="</literal> <operator>+</operator> <name>subject</name></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uriText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name>Intent</name></type> <name>sendIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SENDTO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>sendIntent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><call><name><name>Intent</name><operator>.</operator><name>createChooser</name></name><argument_list>(<argument><expr><name>sendIntent</name></expr></argument>,
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_feedback_send_email</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>datasource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>datasource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Long</name></type> <name>mostRecentDate</name> <init>= <expr><call><name><name>datasource</name><operator>.</operator><name>getMostRecentDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>serverRefreshButton</name> <operator>=</operator> <operator>(</operator><name>Preference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_REFRESH_SERVER_LIST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>mostRecentDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>mostRecentDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>serverRefreshButton</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_server_list_download_date_description</name></name></expr></argument>)</argument_list></call>
                            <operator>+</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>cal</name><operator>.</operator><name>getTimeZone</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>cal</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>serverRefreshButton</name><operator>.</operator><name>setSummary</name></name><argument_list>(
                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_server_list_download_date_unknown</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>serverRefreshButton</name>
                <operator>.</operator><name>setOnPreferenceClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Preference</name><operator>.</operator><name>OnPreferenceClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>boolean</name></type> <name>onPreferenceClick</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server Refresh Button clicked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>REFRESH_SERVER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>datasource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onServerCheckerComplete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCustomServer</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type> <name>isAutodetected</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isWorking</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>PreferenceManager</name>
                <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isWorking</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHANGED_SELECTED_CUSTOM_SERVER_RETURN_KEY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name>RESULT_OK</name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>customServerURL</name>
                    <operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>autoDetectServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>selectedCustomServer</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>customServerURL</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_unreachable</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>returnIntent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SETTINGS_INTENT</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/exceptions/ServerListParsingException.java" hash="70a7c3a8a99e40ff9b76f14bf10122805102bb2b"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>exceptions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Created by foucelhas on 2/10/14.
 */</comment>
<class><specifier>public</specifier> class <name>ServerListParsingException</name> <super_list><extends>extends <super><name>IllegalArgumentException</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>ServerListParsingException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Problems parsing server fields: "</literal> <operator>+</operator> <name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/fragments/DirectionListFragment.java" hash="cd0b35d85dca36a3dbe70324005f7603865b1fa7"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>fragments</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ExpandableListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OtpFragment</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Direction</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>OTPBundle</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>ConversionUtils</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DirectionExpandableListAdapter</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DirectionsGenerator</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>ExpandableListFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This fragment shows the list of step-by-step directions for a planned trip
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>DirectionListFragment</name> <super_list><extends>extends <super><name>ExpandableListFragment</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name>View</name></type> <name>header</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OtpFragment</name></type> <name>fragmentListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ExpandableListView</name></type> <name>elv</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isFragmentFirstLoad</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>fromHeader</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>toHeader</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>departureTimeHeader</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>arrivalTimeHeader</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>OTPBundle</name></type> <name>otpBundle</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name>setFragmentListener</name><argument_list>(<argument><expr><operator>(</operator><name>OtpFragment</name><operator>)</operator> <name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(
                    <argument><expr><call><name><name>activity</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" must implement OtpFragment"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>View</name></type> <name>mainView</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>direction</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>header</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>list_direction_header</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>mainView</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ImageButton</name></type> <name>btnDisplayMap</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnDisplayMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>OtpFragment</name></type> <name>ofl</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getFragmentListener</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DirectionListFragment</name></type> <name>dlf</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclDisplayDirection</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ofl</name><operator>.</operator><name>onSwitchedToMainFragment</name></name><argument_list>(<argument><expr><name>dlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnDisplayMap</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclDisplayDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fromHeader</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fromHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>toHeader</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>departureTimeHeader</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>departureTimeHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>arrivalTimeHeader</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>arrivalTimeHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>otpBundle</name> <operator>=</operator> <operator>(</operator><name>OTPBundle</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                    <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_OTP_BUNDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragmentListener</name><operator>.</operator><name>setOTPBundle</name></name><argument_list>(<argument><expr><name>otpBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>otpBundle</name> <operator>=</operator> <call><name><name>fragmentListener</name><operator>.</operator><name>getOTPBundle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>fromHeader</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>otpBundle</name><operator>.</operator><name>getFromText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toHeader</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>otpBundle</name><operator>.</operator><name>getToText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDepartureArrivalHeaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>currentItinerary</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>currentItinerary</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItinerary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraryList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>itineraryList</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItineraryList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentItineraryIndex</name> <init>= <expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectionsGenerator</name></type> <name>dirGen</name> <init>= <expr><operator>new</operator> <call><name>DirectionsGenerator</name><argument_list>(<argument><expr><name>currentItinerary</name></expr></argument>,
                <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>tempDirections</name> <init>= <expr><call><name><name>dirGen</name><operator>.</operator><name>getDirections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tempDirections</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tempDirections</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>tempDirections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Spinner</name></type> <name>itinerarySelectionSpinner</name> <init>= <expr><operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>header</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>itinerarySelection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>itinerarySummaryList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>itineraryList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isTransitIsTagSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>itinerarySummaryList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>isTransitIsTagSet</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Itinerary</name></type> <name>it</name> <init>= <expr><call><name><name>itineraryList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>it</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ConversionUtils</name>
                            <operator>.</operator><name>getRouteShortNameSafe</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>routeShortName</name></name></expr></argument>,
                                    <argument><expr><name><name>leg</name><operator>.</operator><name>routeLongName</name></name></expr></argument>,
                                    <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">". "</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>isTransitIsTagSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTransitIsTagSet</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">".   "</literal></expr>;</expr_stmt><comment type="line">//Shown index is i + 1, to use 1-based indexes for the UI instead of 0-based</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>itinerarySummaryList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Itinerary</name></type> <name>it</name> <init>= <expr><call><name><name>itineraryList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>tripDuration</name> <init>= <expr><call><name><name>ConversionUtils</name><operator>.</operator><name>normalizeDuration</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>duration</name></name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_total_duration</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>tripDuration</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                            <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>isTransitIsTagSet</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="string">"   "</literal> <operator>+</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_walking_duration</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>walkTime</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>itineraryAdapter</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>, <argument><expr><name>itinerarySummaryList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>itineraryAdapter</name><operator>.</operator><name>setDropDownViewResource</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_dropdown_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>itinerarySelectionSpinner</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>itineraryAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></type> <name>itinerarySpinnerListener</name>
                <init>= <expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>position</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>fragmentListener</name><operator>.</operator><name>onItinerarySelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>setDepartureArrivalHeaders</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFragmentFirstLoad</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>DirectionsGenerator</name></type> <name>dirGen</name> <init>= <expr><operator>new</operator> <call><name>DirectionsGenerator</name><argument_list>(
                            <argument><expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItinerary</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>tempDirections</name> <init>= <expr><call><name><name>dirGen</name><operator>.</operator><name>getDirections</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>tempDirections</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>tempDirections</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>tempDirections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <decl_stmt><decl><type><name>Direction</name></type> <name><name>direction_data</name><index>[]</index></name> <init>= <expr><call><name><name>directions</name>
                            <operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Direction</name><index>[<expr><call><name><name>directions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>DirectionExpandableListAdapter</name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <call><name>DirectionExpandableListAdapter</name><argument_list>(
                            <argument><expr><call><name><name>DirectionListFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>list_direction_item</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>list_subdirection_item</name></name></expr></argument>,
                            <argument><expr><name>direction_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>openIfNonTransit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>isFragmentFirstLoad</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>itinerarySelectionSpinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>currentItineraryIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>itinerarySelectionSpinner</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><name>itinerarySpinnerListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Populate list with our static array of titles.</comment>
        <expr_stmt><expr><name>elv</name> <operator>=</operator> <call><name>getExpandableListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Direction</name></type> <name><name>direction_data</name><index>[]</index></name> <init>= <expr><call><name><name>directions</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Direction</name><index>[<expr><call><name><name>directions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>DirectionExpandableListAdapter</name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <call><name>DirectionExpandableListAdapter</name><argument_list>(
                <argument><expr><call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>list_direction_item</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>list_subdirection_item</name></name></expr></argument>, <argument><expr><name>direction_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>addHeaderView</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>setGroupIndicator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Get rid of the down arrow</comment>

        <expr_stmt><expr><call><name>openIfNonTransit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>otpBundle</name><operator>.</operator><name>isFromInfoWindow</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>expandGroup</name></name><argument_list>(<argument><expr><call><name><name>otpBundle</name><operator>.</operator><name>getCurrentStepIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>setSelectedGroup</name></name><argument_list>(<argument><expr><call><name><name>otpBundle</name><operator>.</operator><name>getCurrentStepIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setFromInfoWindow</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>openIfNonTransit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>legsList</name> <init>= <expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItinerary</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>legsList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Leg</name></type> <name>firstLeg</name> <init>= <expr><call><name><name>legsList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>firstLeg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>traverseMode</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>elv</name><operator>.</operator><name>expandGroup</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>setDepartureArrivalHeaders</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Itinerary</name></type> <name>actualItinerary</name> <init>= <expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItineraryList</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>fragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>actualItinerary</name><operator>.</operator><name>legs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Leg</name></type> <name>firstLeg</name> <init>= <expr><call><name><name>actualItinerary</name><operator>.</operator><name>legs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Leg</name></type> <name>lastLeg</name> <init>= <expr><call><name><name>actualItinerary</name><operator>.</operator><name>legs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>actualItinerary</name><operator>.</operator><name>legs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>agencyTimeZoneOffset</name> <init>= <expr><name><name>firstLeg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>startTimeInSeconds</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>firstLeg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>endTimeInSeconds</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>lastLeg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>departureTimeHeader</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>agencyTimeZoneOffset</name></expr></argument>,
                            <argument><expr><name>startTimeInSeconds</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>arrivalTimeHeader</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>agencyTimeZoneOffset</name></expr></argument>,
                            <argument><expr><name>endTimeInSeconds</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_OTP_BUNDLE</name></name></expr></argument>, <argument><expr><name>otpBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the fragmentListener
     */</comment>
    <function><type><specifier>public</specifier> <name>OtpFragment</name></type> <name>getFragmentListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fragmentListener</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param fragmentListener the fragmentListener to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFragmentListener</name><parameter_list>(<parameter><decl><type><name>OtpFragment</name></type> <name>fragmentListener</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragmentListener</name></name> <operator>=</operator> <name>fragmentListener</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/fragments/MainFragment.java" hash="d0a0391afd5baf8baddb3021f62247369a2465fd"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>fragments</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>ConnectionResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>GooglePlayServicesUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>api</name><operator>.</operator><name>GoogleApiClient</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>CameraUpdateFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name><operator>.</operator><name>OnInfoWindowClickListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name><operator>.</operator><name>OnMapClickListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name><operator>.</operator><name>OnMapLongClickListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name><operator>.</operator><name>OnMarkerDragListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>SupportMapFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>UiSettings</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>BitmapDescriptorFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>CameraPosition</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLngBounds</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>Marker</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>MarkerOptions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>Polyline</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>PolylineOptions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>TileOverlay</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>TileOverlayOptions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>GraphMetadata</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>index</name><operator>.</operator><name>model</name><operator>.</operator><name>TripTimeShort</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>bike_rental</name><operator>.</operator><name>BikeRentalStation</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>bike_rental</name><operator>.</operator><name>BikeRentalStationList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>OptimizeType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseModeSet</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>LayoutTransition</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlarmManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name><operator>.</operator><name>OnDismissListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentSender</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>LocationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentTransaction</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name><operator>.</operator><name>DrawerListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnFocusChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnTouchListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name><operator>.</operator><name>OnGlobalLayoutListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>EditorInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputMethodManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AutoCompleteTextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CompoundButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RadioButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name><operator>.</operator><name>OnEditorActionListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormatSymbols</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>MyActivity</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>SettingsActivity</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>BikeRentalLoadCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>DateCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>MetadataRequestCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OTPGeocodingListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OtpFragment</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>RequestTimesForTripsCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerCheckerCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerSelectorCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>TripRequestCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>maps</name><operator>.</operator><name>CustomUrlTileProvider</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>OTPBundle</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>OptimizeSpinnerItem</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>ServersDataSource</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>BikeRentalLoad</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>MetadataRequest</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>OTPGeocoding</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>RequestTimesForTrips</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ServerChecker</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>ServerSelector</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name><operator>.</operator><name>TripRequest</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>BikeRentalStationInfo</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>ConversionUtils</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>CustomAddress</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>CustomInfoWindowAdapter</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DateTimeDialog</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DirectionsGenerator</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>LocationUtil</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>PlacesAutoCompleteAdapter</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>RangeSeekBar</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>RangeSeekBar</name><operator>.</operator><name>OnRangeSeekBarChangeListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>RightDrawableOnTouchListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TripInfo</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>location</name><operator>.</operator><name>LocationServices</name><operator>.</operator><name>API</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>location</name><operator>.</operator><name>LocationServices</name><operator>.</operator><name>FusedLocationApi</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Main UI screen of the mOTPApp, showing the map.
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>MainFragment</name> <super_list><extends>extends <super><name>Fragment</name></super></extends> <implements>implements
        <super><name>ServerSelectorCompleteListener</name></super>,
        <super><name>TripRequestCompleteListener</name></super>, <super><name>MetadataRequestCompleteListener</name></super>,
        <super><name>BikeRentalLoadCompleteListener</name></super>, <super><name>RequestTimesForTripsCompleteListener</name></super>, <super><name>OTPGeocodingListener</name></super>,
        <super><name>DateCompleteListener</name></super>, <super><name><name>OnRangeSeekBarChangeListener</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super>, <super><name>ServerCheckerCompleteListener</name></super>,
        <super><name><name>GoogleApiClient</name><operator>.</operator><name>OnConnectionFailedListener</name></name></super>,
        <super><name><name>GoogleApiClient</name><operator>.</operator><name>ConnectionCallbacks</name></name></super>,
        <super><name><name>GoogleMap</name><operator>.</operator><name>OnCameraChangeListener</name></name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>LocationManager</name></type> <name>sLocationManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OTPApp</name></type> <name>mOTPApp</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>mApplicationContext</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>GoogleApiClient</name></type> <name>mGoogleApiClient</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OtpFragment</name></type> <name>mFragmentListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>SharedPreferences</name></type> <name>mPrefs</name></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mAppStarts</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>mNeedToUpdateServersList</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>mNeedToRunAutoDetect</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ImageButton</name></type> <name>mBtnDateDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ImageButton</name></type> <name>mBtnSwapOriginDestination</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ImageButton</name></type> <name>mBtnMyLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ImageButton</name></type> <name>mBtnHandle</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>DrawerLayout</name></type> <name>mDrawerLayout</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ViewGroup</name></type> <name>mNavigationDrawerLeftPane</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ListView</name></type> <name>mDdlOptimization</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBox</name></type> <name>mBtnModeBus</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBox</name></type> <name>mBtnModeTrain</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBox</name></type> <name>mBtnModeFerry</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CheckBox</name></type> <name>mBtnModeRentedBike</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RadioButton</name></type> <name>mBtnModeWalk</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RadioButton</name></type> <name>mBtnModeBike</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>mBikeTriangleMinValue</name> <init>= <expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_QUICK_DEFAULT_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>mBikeTriangleMaxValue</name> <init>= <expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_FLAT_DEFAULT_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>mBikeTriangleParameters</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ViewGroup</name></type> <name>mBikeTriangleParametersLayout</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>View</name></type> <name>mPanelDisplayDirection</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Spinner</name></type> <name>mItinerarySelectionSpinner</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ImageButton</name></type> <name>mBtnDisplayDirection</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>MenuItem</name></type> <name>mGPS</name></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <name>GoogleMap</name></type> <name>mMap</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mMapFailed</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>mMaxZoomLevel</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TileOverlay</name></type> <name>mSelectedTileOverlay</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LatLng</name></type> <name>mSavedLastLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LatLng</name></type> <name>mSavedLastLocationCheckedForServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Polyline</name></type> <name>mBoundariesPolyline</name></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <name>AutoCompleteTextView</name></type> <name>mTbStartLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>AutoCompleteTextView</name></type> <name>mTbEndLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CustomAddress</name></type> <name>mStartAddress</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CustomAddress</name></type> <name>mEndAddress</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mResultTripStartLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mResultTripEndLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Marker</name></type> <name>mStartMarker</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Marker</name></type> <name>mEndMarker</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LatLng</name></type> <name>mStartMarkerPosition</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LatLng</name></type> <name>mEndMarkerPosition</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsStartLocationGeocodingCompleted</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsEndLocationGeocodingCompleted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsStartLocationChangedByUser</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsEndLocationChangedByUser</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></type> <name>mModeMarkers</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Polyline</name></argument>&gt;</argument_list></name></type> <name>mRoute</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>BikeRentalStationInfo</name></argument>&gt;</argument_list></name></type> <name>mBikeRentalStations</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mOptimizationValueToRestoreWhenNoBike</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>mTripDate</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mArriveBy</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mMapPaddingLeft</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mMapPaddingTop</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mMapPaddingRight</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mMapPaddingBottom</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>AlarmManager</name></type> <name>mAlarmMgr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PendingIntent</name></type> <name>mAlarmIntentTripTimeUpdate</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>mIsAlarmTripTimeUpdateActive</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PendingIntent</name></type> <name>mAlarmIntentBikeRentalUpdate</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>mIsAlarmBikeRentalUpdateActive</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>AlarmReceiver</name></type> <name>mAlarmReceiver</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>IntentFilter</name></type> <name>mIntentFilter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Intent</name></type> <name>mTripTimeUpdateIntent</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Intent</name></type> <name>mBikeRentalUpdateIntent</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CustomInfoWindowAdapter</name></type> <name>mCustomInfoWindowAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>mNewAppVersion</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PlacesAutoCompleteAdapter</name></type> <name>startLocationPlacesAutoCompleteAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PlacesAutoCompleteAdapter</name></type> <name>endLocationPlacesAutoCompleteAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>changingTextBoxWithAutocomplete</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OptimizeType</name></type> <name>previousOptimization</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TraverseModeSet</name></type> <name>previousModes</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>previousBikeTriangleMinValue</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>previousBikeTriangleMaxValue</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>GraphMetadata</name></type> <name>mCustomServerMetadata</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OTPGeocoding</name></type> <name>mGeoCodingTask</name></decl>;</decl_stmt>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <specifier>static</specifier> <name>void</name></type> <name>removeOnGlobalLayoutListener</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>,
            <parameter><decl><type><name>OnGlobalLayoutListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ViewTreeObserver</name></type> <name>viewTreeObserver</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>viewTreeObserver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>viewTreeObserver</name><operator>.</operator><name>removeGlobalOnLayoutListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>viewTreeObserver</name><operator>.</operator><name>removeOnGlobalLayoutListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                    <argument><expr><literal type="string">"Problems obtaining exact element's positions on screen, some other elements"</literal>
                            <operator>+</operator> <literal type="string">"can be misplaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeedToUpdateServersList</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>needToUpdateServersList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mNeedToUpdateServersList</name></name> <operator>=</operator> <name>needToUpdateServersList</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeedToRunAutoDetect</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>needToRunAutoDetect</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mNeedToRunAutoDetect</name></name> <operator>=</operator> <name>needToRunAutoDetect</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MyActivity</name><operator>)</operator> <name>activity</name><operator>)</operator><operator>.</operator><call><name>setDateCompleteCallback</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setFragmentListener</name><argument_list>(<argument><expr><operator>(</operator><name>OtpFragment</name><operator>)</operator> <name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">" must implement OtpFragment"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>addOnBackStackChangedListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>FragmentManager</name><operator>.</operator><name>OnBackStackChangedListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onBackStackChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"back stack changed "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>backCount</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getBackStackEntryCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>backCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>mItinerarySelectionSpinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(
                                        <argument><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentItineraryIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>mainView</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>main</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>mainView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ViewTreeObserver</name></type> <name>vto</name> <init>= <expr><call><name><name>mainView</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>vto</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>vto</name><operator>.</operator><name>addOnGlobalLayoutListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnGlobalLayoutListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr></argument>)</argument_list></annotation>
                    <annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onGlobalLayout</name><parameter_list>()</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>MainFragment</name><operator>.</operator><name>removeOnGlobalLayoutListener</name></name><argument_list>(<argument><expr><name>mainView</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name><name>locationTbEndLocation</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getLocationInWindow</name></name><argument_list>(<argument><expr><name>locationTbEndLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name><name>locationItinerarySelectionSpinner</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>mItinerarySelectionSpinner</name>
                                <operator>.</operator><name>getLocationInWindow</name></name><argument_list>(<argument><expr><name>locationItinerarySelectionSpinner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name><name>locationBtnHandle</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>mBtnHandle</name><operator>.</operator><name>getLocationInWindow</name></name><argument_list>(<argument><expr><name>locationBtnHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>windowHeight</name> <init>= <expr><name><name>metrics</name><operator>.</operator><name>heightPixels</name></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>paddingMargin</name> <init>= <expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>map_padding_margin</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>mMapPaddingLeft</name> <operator>=</operator> <name><name>locationBtnHandle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name><name>mBtnHandle</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal>
                                <operator>+</operator> <name>paddingMargin</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mMapPaddingTop</name> <operator>=</operator> <name><name>locationTbEndLocation</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name><name>mTbEndLocation</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal>
                                <operator>+</operator> <name>paddingMargin</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mMapPaddingRight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mMapPaddingBottom</name> <operator>=</operator> <name>windowHeight</name> <operator>-</operator> <name><name>locationItinerarySelectionSpinner</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>
                                <operator>+</operator> <name>paddingMargin</name></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name>mMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><name>mMapPaddingLeft</name></expr></argument>, <argument><expr><name>mMapPaddingTop</name></expr></argument>, <argument><expr><name>mMapPaddingRight</name></expr></argument>, <argument><expr><name>mMapPaddingBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                        <argument><expr><literal type="string">"Not possible to obtain exact element's positions on screen, some other"</literal>
                                <operator>+</operator> <literal type="string">"elements can be misplaced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>mTbStartLocation</name> <operator>=</operator> <operator>(</operator><name>AutoCompleteTextView</name><operator>)</operator> <call><name><name>mainView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbStartLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mTbEndLocation</name> <operator>=</operator> <operator>(</operator><name>AutoCompleteTextView</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbEndLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnSwapOriginDestination</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnSwapOriginDestination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mDdlOptimization</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator> <call><name><name>mainView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spinOptimization</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnModeWalk</name> <operator>=</operator> <operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeWalk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mBtnModeBike</name> <operator>=</operator> <operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeBike</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mBtnModeBus</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeBus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mBtnModeTrain</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeTrain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mBtnModeFerry</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeFerry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mBtnModeRentedBike</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnModeRentedBike</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBikeTriangleParameters</name> <operator>=</operator> <operator>new</operator> <call><name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_MIN_VALUE</name></name></expr></argument>,
                    <argument><expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_MAX_VALUE</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysRed</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysGreen</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysBlue</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>seek_thumb_normal</name></name></expr></argument>,
                    <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>seek_thumb_pressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// add RangeSeekBar to pre-defined layout</comment>
            <expr_stmt><expr><name>mBikeTriangleParametersLayout</name> <operator>=</operator> <operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>mainView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bikeParametersLayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                    <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>BELOW</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bikeParametersTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mBikeTriangleParametersLayout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>mBikeTriangleParameters</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnMyLocation</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnMyLocation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnDateDialog</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnDateDialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnDisplayDirection</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mainView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnDisplayDirection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mNavigationDrawerLeftPane</name> <operator>=</operator> <operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>mainView</name>
                    <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigationDrawerLeftPane</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mPanelDisplayDirection</name> <operator>=</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>panelDisplayDirection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mBtnHandle</name> <operator>=</operator> <operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mDrawerLayout</name> <operator>=</operator> <operator>(</operator><name>DrawerLayout</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawerLayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setImeOptions</name></name><argument_list>(<argument><expr><name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_NEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setImeOptions</name></name><argument_list>(<argument><expr><name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_DONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setImeActionLabel</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_virtual_keyboard_done_label</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_DONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>mItinerarySelectionSpinner</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>mainView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>itinerarySelection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"finish onStart()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LayoutTransition</name></type> <name>l</name> <init>= <expr><operator>new</operator> <call><name>LayoutTransition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ViewGroup</name></type> <name>mainButtons</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>mainView</name>
                        <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>content_frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>mainButtons</name><operator>.</operator><name>setLayoutTransition</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>mainView</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to obtain main view, UI won't be correctly created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"onActivityCreated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mApplicationContext</name> <operator>=</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mIntentFilter</name> <operator>=</operator> <operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_BIKE_RENTAL_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mIntentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_TRIP_TIME_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mIntentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_OPEN_APP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mIntentFilter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_DISMISS_UPDATES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBikeRentalUpdateIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_BIKE_RENTAL_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mAlarmIntentBikeRentalUpdate</name> <operator>=</operator> <call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mBikeRentalUpdateIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mTripTimeUpdateIntent</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_TRIP_TIME_ACTION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mAlarmIntentTripTimeUpdate</name> <operator>=</operator> <call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mTripTimeUpdateIntent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mAlarmMgr</name> <operator>=</operator> <operator>(</operator><name>AlarmManager</name><operator>)</operator><call><name><name>mApplicationContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ALARM_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mIsAlarmBikeRentalUpdateActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mIsAlarmTripTimeUpdateActive</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mAlarmReceiver</name> <operator>=</operator> <operator>new</operator> <call><name>AlarmReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mMap</name> <operator>=</operator> <call><name>retrieveMap</name><argument_list>(<argument><expr><name>mMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mOTPApp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OTPApp</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>mPrefs</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(
                <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sLocationManager</name> <operator>=</operator> <operator>(</operator><name>LocationManager</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LOCATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>checkAppVersion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>restorePanelUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mArriveBy</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>OptimizeSpinnerItem</name></argument>&gt;</argument_list></name></type> <name>optimizationAdapter</name>
                <init>= <expr><operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>OptimizeSpinnerItem</name></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_list_item_single_choice</name></name></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>OptimizeSpinnerItem</name><index>[]</index></name><block>{
                        <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_quick</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>QUICK</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_safe</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>SAFE</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_fewest_transfers</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>TRANSFERS</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Server</name></type> <name>selectedServer</name> <init>= <expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>moveCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mCustomInfoWindowAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>CustomInfoWindowAdapter</name><argument_list>(<argument><expr><call><name>getLayoutInflater</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreState</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>updateSelectedServer</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>initializeMapInterface</name><argument_list>(<argument><expr><name>mMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>initializeMapInterface</name><parameter_list>(<parameter><decl><type><name>GoogleMap</name></type> <name>mMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>UiSettings</name></type> <name>uiSettings</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getUiSettings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setMyLocationEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnCameraChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uiSettings</name><operator>.</operator><name>setMyLocationButtonEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uiSettings</name><operator>.</operator><name>setCompassEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uiSettings</name><operator>.</operator><name>setAllGesturesEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>uiSettings</name><operator>.</operator><name>setZoomControlsEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateOverlay</name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getOverlayString</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addInterfaceListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>void</name></type> <name>addInterfaceListeners</name><parameter_list>()</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><specifier>final</specifier> <name>OnMapClickListener</name></type> <name>onMapClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnMapClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMapClick</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latlng</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMapClickListener</name></name><argument_list>(<argument><expr><name>onMapClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnFocusChangeListener</name></type> <name>tbLocationOnFocusChangeListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnFocusChangeListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>hasFocus</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMapClickListener</name></name><argument_list>(<argument><expr><name>onMapClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>CharSequence</name></type> <name>tvCharSequence</name> <init>= <expr><call><name><name>tv</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>tvCharSequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>tvCharSequence</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbStartLocation</name></name></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsStartLocationGeocodingCompleted</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>showDropDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbEndLocation</name></name></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsEndLocationGeocodingCompleted</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>showDropDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                <argument><expr><literal type="string">"Focus has changed, but was not possible to obtain start/end"</literal>
                                        <operator>+</operator> <literal type="string">" textbox text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>tbLocationOnFocusChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>tbLocationOnFocusChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnMarkerDragListener</name></type> <name>onMarkerDragListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnMarkerDragListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMarkerDrag</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMarkerDragEnd</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>LatLng</name></type> <name>markerLatlng</name> <init>= <expr><call><name><name>marker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>LocationUtil</name>
                        <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>markerLatlng</name></expr></argument>, <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                        <operator>||</operator> <operator>(</operator><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>marker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>mStartMarker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>mPrefs</name>
                                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><name>markerLatlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>markerLatlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <name>markerLatlng</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>marker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>mEndMarker</name>
                            <operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>mPrefs</name>
                                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><name>markerLatlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>markerLatlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <name>markerLatlng</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>

                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>marker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>mStartMarker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>marker</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>mStartMarkerPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>marker</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>mEndMarkerPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_map_markers_marker_out_of_boundaries</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMarkerDragStart</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMarkerDragListener</name></name><argument_list>(<argument><expr><name>onMarkerDragListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnMapLongClickListener</name></type> <name>onMapLongClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnMapLongClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onMapLongClick</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latlng</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name>LatLng</name></type> <name>latLngFinal</name> <init>= <expr><name>latlng</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>items</name> <init>= <expr><block>{<expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>point_type_selector_start_marker_option</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>point_type_selector_end_marker_option</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                        <argument><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>point_type_selector_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>latLngFinal</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>latLngFinal</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMapLongClickListener</name></name><argument_list>(<argument><expr><name>onMapLongClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>onClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>openDrawer</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBtnHandle</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>onClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnInfoWindowClickListener</name></type> <name>onInfoWindowClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnInfoWindowClickListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onInfoWindowClick</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mBikeRentalStations</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>BikeRentalStationInfo</name></type> <name>bikeRentalStationInfo</name> <init>= <expr><call><name><name>mBikeRentalStations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>bikeRentalStationInfo</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>bikeRentalStationInfo</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>saveOTPBundle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>OTPBundle</name></type> <name>otpBundle</name> <init>= <expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOTPBundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\d+"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>matcher</name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>numberString</name> <init>= <expr><call><name><name>marker</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>matcher</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">//Step indexes shown to the user are in a scale starting by 1 but instructions steps internally start by 0</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>currentStepIndex</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>numberString</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setCurrentStepIndex</name></name><argument_list>(<argument><expr><name>currentStepIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setFromInfoWindow</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOTPBundle</name><argument_list>(<argument><expr><name>otpBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onSwitchedToDirectionFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnInfoWindowClickListener</name></name><argument_list>(<argument><expr><name>onInfoWindowClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt><decl><type><name>DrawerListener</name></type> <name>dl</name> <init>= <expr><operator>new</operator> <class><super><name>DrawerListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onDrawerStateChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onDrawerSlide</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onDrawerOpened</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>previousOptimization</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>OptimizeSpinnerItem</name><operator>)</operator> <call><name><name>mDdlOptimization</name>
                        <operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>getCheckedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getOptimizeType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousModes</name> <operator>=</operator> <call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousBikeTriangleMinValue</name> <operator>=</operator> <name>mBikeTriangleMinValue</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousBikeTriangleMaxValue</name> <operator>=</operator> <name>mBikeTriangleMaxValue</name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onDrawerClosed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>TraverseModeSet</name></type> <name>newModes</name> <init>= <expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>OptimizeType</name></type> <name>newOptimization</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OptimizeSpinnerItem</name><operator>)</operator> <call><name><name>mDdlOptimization</name>
                        <operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>getCheckedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getOptimizeType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>sameOptimization</name> <init>= <expr><call><name><name>previousOptimization</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newOptimization</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>sameTraverseMode</name> <init>= <expr><call><name><name>previousModes</name><operator>.</operator><name>getModes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>newModes</name><operator>.</operator><name>getModes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>sameBikeTriangle</name> <init>= <expr><name>previousBikeTriangleMinValue</name> <operator>==</operator> <name>mBikeTriangleMinValue</name>
                        <operator>&amp;&amp;</operator> <name>previousBikeTriangleMaxValue</name> <operator>==</operator> <name>mBikeTriangleMaxValue</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sameOptimization</name> <operator>||</operator> <operator>!</operator><name>sameTraverseMode</name> <operator>||</operator> <operator>!</operator><name>sameBikeTriangle</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerListener</name></name><argument_list>(<argument><expr><name>dl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt><expr><name>startLocationPlacesAutoCompleteAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>PlacesAutoCompleteAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_dropdown_item</name></name></expr></argument>,
                <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>startLocationPlacesAutoCompleteAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setThreshold</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>endLocationPlacesAutoCompleteAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>PlacesAutoCompleteAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_dropdown_item</name></name></expr></argument>,
                <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>startLocationPlacesAutoCompleteAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>endLocationPlacesAutoCompleteAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name> <operator>.</operator><name>setThreshold</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnTouchListener</name></type> <name>otlStart</name> <init>= <expr><operator>new</operator> <class><super><name>RightDrawableOnTouchListener</name></super><argument_list>(<argument><expr><name>mTbStartLocation</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onDrawableTouch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>items</name> <init>= <expr><block>{
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_current_location</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_contact</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_map_point</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                        <argument><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_choose_location_type_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_current_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>,
                                        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mStartMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>

                                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name>
                                <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_contact</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_PICK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(
                                    <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>CONTENT_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MyActivity</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>)</operator>
                                    <operator>.</operator><call><name>setButtonStartLocation</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>,
                                            <argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHOOSE_CONTACT_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Point on Map</comment>
                            <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><call><name><name>mStartMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setHint</name></name><argument_list>(
                                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_need_to_place_marker</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><name>otlStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnTouchListener</name></type> <name>otlEnd</name> <init>= <expr><operator>new</operator> <class><super><name>RightDrawableOnTouchListener</name></super><argument_list>(<argument><expr><name>mTbEndLocation</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onDrawableTouch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>items</name> <init>= <expr><block>{
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_current_location</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_contact</name></name></expr></argument>)</argument_list></call></expr>,
                        <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_map_point</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                        <argument><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_choose_location_type_end</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_current_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(
                                        <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mEndMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>

                                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>


                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name>
                                <operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_dialog_location_type_contact</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_PICK</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(
                                    <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>CONTENT_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MyActivity</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>)</operator>
                                    <operator>.</operator><call><name>setButtonStartLocation</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>,
                                            <argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHOOSE_CONTACT_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// Point on Map</comment>
                            <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><call><name><name>mEndMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setHint</name></name><argument_list>(
                                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_need_to_place_marker</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><name>otlEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnItemClickListener</name></type> <name>tbAutocompleteOnItemClickListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnItemClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterView</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>changingTextBoxWithAutocomplete</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>isStartBox</name> <init>= <expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CustomAddress</name></type> <name>selectedAddress</name> <init>= <expr><operator>(</operator><name>CustomAddress</name><operator>)</operator> <call><name><name>adapterView</name><operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>useNewAddress</name><argument_list>(<argument><expr><name>isStartBox</name></expr></argument>, <argument><expr><name>selectedAddress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><name>tbAutocompleteOnItemClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><name>tbAutocompleteOnItemClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextWatcher</name></type> <name>textWatcherStart</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>changingTextBoxWithAutocomplete</name></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mIsStartLocationChangedByUser</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TextWatcher</name></type> <name>textWatcherEnd</name> <init>= <expr><operator>new</operator> <class><super><name>TextWatcher</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{<block_content>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>changingTextBoxWithAutocomplete</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mIsEndLocationChangedByUser</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcherStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcherEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnEditorActionListener</name></type> <name>tbLocationOnEditorActionListener</name> <init>= <expr><operator>new</operator> <class><super><name>OnEditorActionListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>boolean</name></type> <name>onEditorAction</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>actionId</name></decl></parameter>,
                    <parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbStartLocation</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>actionId</name> <operator>==</operator> <name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_NEXT</name></name>
                            <operator>||</operator> <operator>(</operator><name>event</name> <operator>!=</operator> <literal type="null">null</literal>
                            <operator>&amp;&amp;</operator> <call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name> <operator>&amp;&amp;</operator> <call><name><name>event</name>
                            <operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsStartLocationGeocodingCompleted</name>
                                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mPrefs</name>
                                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>CharSequence</name></type> <name>tvCharSequence</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>tvCharSequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>processAddress</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>tvCharSequence</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                        <argument><expr><literal type="string">"User switched to next input, but was not possible to"</literal>
                                                <operator>+</operator> <literal type="string">"obtain start/end textbox text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tbEndLocation</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>actionId</name> <operator>==</operator> <name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_DONE</name></name>
                            <operator>||</operator> <operator>(</operator><name>event</name> <operator>!=</operator> <literal type="null">null</literal>
                            <operator>&amp;&amp;</operator> <call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name> <operator>&amp;&amp;</operator> <call><name><name>event</name>
                            <operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsEndLocationGeocodingCompleted</name>
                                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mPrefs</name>
                                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>CharSequence</name></type> <name>tvCharSequence</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>tvCharSequence</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name>processAddress</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>tvCharSequence</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                        <argument><expr><literal type="string">"User pressed done, but was not possible to"</literal>
                                                <operator>+</operator> <literal type="string">"obtain start/end textbox text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mTbStartLocation</name>
                <operator>.</operator><name>setOnEditorActionListener</name></name><argument_list>(<argument><expr><name>tbLocationOnEditorActionListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name>
                <operator>.</operator><name>setOnEditorActionListener</name></name><argument_list>(<argument><expr><name>tbLocationOnEditorActionListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclDisplayDirection</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>saveOTPBundle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onSwitchedToDirectionFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBtnDisplayDirection</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclDisplayDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Do NOT show direction icon if there is no direction yet</comment>
        <expr_stmt><expr><call><name>toggleItinerarySelectionSpinner</name><argument_list>(<argument><expr><operator>!</operator><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentItinerary</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclMyLocation</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                            <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>mMap</name><operator>.</operator><name>getCameraPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>zoom</name> <operator>&lt;</operator> <name><name>OTPApp</name><operator>.</operator><name>defaultMyLocationZoomLevel</name></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                    <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>defaultMyLocationZoomLevel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLng</name></name><argument_list>(<argument><expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBtnMyLocation</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclMyLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclDateDialog</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>FragmentTransaction</name></type> <name>ft</name> <init>= <expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Fragment</name></type> <name>prev</name> <init>= <expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG_FRAGMENT_DATE_TIME_DIALOG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>addToBackStack</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create and show the dialog.</comment>
                <decl_stmt><decl><type><name>DateTimeDialog</name></type> <name>newFragment</name> <init>= <expr><operator>new</operator> <call><name>DateTimeDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Date</name></type> <name>dateDialogDate</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mTripDate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>dateDialogDate</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>dateDialogDate</name> <operator>=</operator> <name>mTripDate</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TRIP_DATE</name></name></expr></argument>, <argument><expr><name>dateDialogDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_ARRIVE_BY</name></name></expr></argument>, <argument><expr><name>mArriveBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ft</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>newFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG_FRAGMENT_DATE_TIME_DIALOG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBtnDateDialog</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclDateDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclSwapOriginDestination</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>tempBoolean</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CustomAddress</name></type> <name>tempAddress</name></decl>;</decl_stmt>
                    <expr_stmt><expr><name>tempBoolean</name> <operator>=</operator> <name>mIsStartLocationGeocodingCompleted</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <name>mIsEndLocationGeocodingCompleted</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <name>tempBoolean</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tempBoolean</name> <operator>=</operator> <name>mIsStartLocationChangedByUser</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <name>mIsEndLocationChangedByUser</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <name>tempBoolean</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tempAddress</name> <operator>=</operator> <name>mStartAddress</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mStartAddress</name> <operator>=</operator> <name>mEndAddress</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mEndAddress</name> <operator>=</operator> <name>tempAddress</name></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Boolean</name></type> <name>tempPref</name> <init>= <expr><call><name><name>mPrefs</name>
                            <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><call><name><name>mPrefs</name>
                            <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><name>tempPref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Marker</name></type> <name>mOldStartMarker</name> <init>= <expr><name>mStartMarker</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>newStartMarkerOptions</name> <init>= <expr><operator>new</operator> <call><name>MarkerOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>newEndMarkerOptions</name> <init>= <expr><operator>new</operator> <call><name>MarkerOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>newStartMarkerOptions</name><operator>.</operator><name>snippet</name></name><argument_list>(<argument><expr><call><name><name>mEndMarker</name><operator>.</operator><name>getSnippet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newStartMarkerOptions</name><operator>.</operator><name>title</name></name><argument_list>(<argument><expr><call><name><name>mEndMarker</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newStartMarkerOptions</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><call><name><name>mEndMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newStartMarkerOptions</name><operator>.</operator><name>icon</name></name><argument_list>(<argument><expr><call><name><name>BitmapDescriptorFactory</name>
                                <operator>.</operator><name>defaultMarker</name></name><argument_list>(<argument><expr><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>HUE_GREEN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mStartMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>newStartMarkerOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <call><name><name>mStartMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else<block>{<block_content>
                        <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mOldStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>newEndMarkerOptions</name><operator>.</operator><name>snippet</name></name><argument_list>(<argument><expr><call><name><name>mOldStartMarker</name><operator>.</operator><name>getSnippet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newEndMarkerOptions</name><operator>.</operator><name>title</name></name><argument_list>(<argument><expr><call><name><name>mOldStartMarker</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newEndMarkerOptions</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><call><name><name>mOldStartMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>newEndMarkerOptions</name><operator>.</operator><name>icon</name></name><argument_list>(<argument><expr><call><name><name>BitmapDescriptorFactory</name>
                                <operator>.</operator><name>defaultMarker</name></name><argument_list>(<argument><expr><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>HUE_RED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mEndMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mOldStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>newEndMarkerOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <call><name><name>mEndMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else<block>{<block_content>
                        <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <decl_stmt><decl><type><name>CharSequence</name></type> <name>tempCharSequence</name> <init>= <expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>tempCharSequence</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_start_location_hint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_end_location_hint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBtnSwapOriginDestination</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclSwapOriginDestination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></type> <name>itinerarySpinnerListener</name>
                <init>= <expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>

                <if_stmt><if>if <condition>(<expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItinerary</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>position</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mFragmentListener</name><operator>.</operator><name>onItinerarySelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentItineraryIndex</name> <init>= <expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mItinerarySelectionSpinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>currentItineraryIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mItinerarySelectionSpinner</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><name>itinerarySpinnerListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name>
                <operator>.</operator><name>setOnRangeSeekBarChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>OnRangeSeekBarChangeListener</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onRangeSeekBarValuesChanged</name><parameter_list>(<parameter><decl><type><name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>rangeSeekBar</name></decl></parameter>,
                            <parameter><decl><type><name>Double</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>Double</name></type> <name>maxValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <comment type="line">// handle changed range values</comment>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                <argument><expr><literal type="string">"User selected new range values: MIN="</literal> <operator>+</operator> <name>minValue</name> <operator>+</operator> <literal type="string">", MAX="</literal>
                                        <operator>+</operator> <name>maxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
             }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt><expr><call><name><name>mBtnModeWalk</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>setBikeOptimizationAdapter</name><argument_list>(<argument><expr><name>isChecked</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(<argument><expr><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>setBikeOptimizationAdapter</name><argument_list>(<argument><expr><name>isChecked</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(<argument><expr><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOffersBikeRental</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>isChecked</name></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>BikeRentalLoad</name></type> <name>bikeRentalGetStations</name> <init>= <expr><operator>new</operator> <call><name>BikeRentalLoad</name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                            <argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bikeRentalGetStations</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBaseURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>mBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isChecked</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name>removeBikeStations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBtnModeBus</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBtnModeTrain</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBtnModeFerry</name><operator>.</operator><name>setOnCheckedChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>CompoundButton</name><operator>.</operator><name>OnCheckedChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onCheckedChanged</name><parameter_list>(<parameter><decl><type><name>CompoundButton</name></type> <name>buttonView</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>updateModes</name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnItemClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBicycle</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mOptimizationValueToRestoreWhenNoBike</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>OptimizeSpinnerItem</name></type> <name>optimizeSpinnerItem</name> <init>= <expr><operator>(</operator><name>OptimizeSpinnerItem</name><operator>)</operator> <call><name><name>mDdlOptimization</name>
                        <operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>optimizeSpinnerItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(
                            <argument><expr><call><name><name>optimizeSpinnerItem</name><operator>.</operator><name>getOptimizeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OptimizeType</name><operator>.</operator><name>TRIANGLE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to change optimization mode because selected"</literal>
                            <operator>+</operator> <literal type="string">"optimization is unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name><operator>.</operator><name>setOnRangeSeekBarChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper to call the functions to recover trip options (traverse mode, optimization type and
     * bike parameters) to last state, before closing the app, if there isn't data functions set
     * options to default value. If it's needed UI update is also processed.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restorePanelUI</name><parameter_list>()</parameter_list><block>{<block_content>
        <expr_stmt><expr><call><name>restoreTraverseModes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>restoreBikeParameters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>restoreOptimization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recovers trip optimization value to last state, before closing the app, if there isn't data
     * sets default value.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreOptimization</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>previousOptimization</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>previousOptimization</name> <operator>=</operator>
                <call><name><name>mPrefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>mOTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><name>previousOptimization</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recovers bike parameters to last state, before closing the app, if there isn't data sets
     * default value.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreBikeParameters</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>previousMinValue</name></decl>, <decl><type ref="prev"/><name>previousMaxValue</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>previousMinValue</name> <operator>=</operator> <call><name><name>mPrefs</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MIN_VALUE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name><operator>.</operator><name>setSelectedMinValue</name></name><argument_list>(<argument><expr><name>previousMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name><operator>.</operator><name>setSelectedMinValue</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_QUICK_DEFAULT_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>previousMaxValue</name> <operator>=</operator> <call><name><name>mPrefs</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MAX_VALUE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name><operator>.</operator><name>setSelectedMaxValue</name></name><argument_list>(<argument><expr><name>previousMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><call><name><name>mBikeTriangleParameters</name><operator>.</operator><name>setSelectedMaxValue</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BIKE_PARAMETERS_FLAT_DEFAULT_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recovers trip traverse mode to last state, before closing the app, if there isn't data
     * sets default value. It also updates UI according to the new modes.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreTraverseModes</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>lastTraverseModeSet</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lastTraverseModeSet</name> <operator>=</operator>
                <call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_TRAVERSE_MODE_SET</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mBtnModeWalk</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnModeBus</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnModeTrain</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnModeFerry</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setBikeOptimizationAdapter</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>TraverseModeSet</name></type> <name>traverseModeSet</name> <init>= <expr><operator>new</operator> <call><name>TraverseModeSet</name><argument_list>(<argument><expr><name>lastTraverseModeSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>traverseModeSet</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mBtnModeWalk</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getWalk</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mBtnModeBus</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getBus</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mBtnModeTrain</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getRail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mBtnModeFerry</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getFerry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getWalk</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>traverseModeSet</name><operator>.</operator><name>getBicycle</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name><name>traverseModeSet</name><operator>.</operator><name>getWalk</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>traverseModeSet</name><operator>.</operator><name>getBicycle</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setBikeOptimizationAdapter</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>traverseModeSet</name><operator>.</operator><name>getBicycle</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name>setBikeOptimizationAdapter</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>showBikeParameters</name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Traverse mode set is null, UI not updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>TraverseModeSet</name></type> <name>getSelectedTraverseModeSet</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>TraverseModeSet</name></type> <name>selectedTraverseModeSet</name> <init>= <expr><operator>new</operator> <call><name>TraverseModeSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>selectedTraverseModeSet</name><operator>.</operator><name>setWalk</name></name><argument_list>(<argument><expr><call><name><name>mBtnModeWalk</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedTraverseModeSet</name><operator>.</operator><name>setBicycle</name></name><argument_list>(<argument><expr><call><name><name>mBtnModeBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedTraverseModeSet</name><operator>.</operator><name>setBus</name></name><argument_list>(<argument><expr><call><name><name>mBtnModeBus</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedTraverseModeSet</name><operator>.</operator><name>setTrainish</name></name><argument_list>(<argument><expr><call><name><name>mBtnModeTrain</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedTraverseModeSet</name><operator>.</operator><name>setFerry</name></name><argument_list>(<argument><expr><call><name><name>mBtnModeFerry</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>selectedTraverseModeSet</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateModes</name><parameter_list>(<parameter><decl><type><name>TraverseModeSet</name></type> <name>modeSet</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>modesString</name> <init>= <expr><call><name><name>modeSet</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_TRAVERSE_MODE_SET</name></name></expr></argument>, <argument><expr><name>modesString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper to call request trip, triggering geocoding processes if it's
     * necessary.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processRequestTrip</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mIsStartLocationGeocodingCompleted</name> <operator>&amp;&amp;</operator> <name>mIsEndLocationGeocodingCompleted</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>requestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sends information of the text boxes to fragment listener class through a
     * bundle.
     * &lt;p&gt;
     * Fragment listener provides intercommunication with other fragments or classes.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>saveOTPBundle</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>OTPBundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>OTPBundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>setFromText</name></name><argument_list>(<argument><expr><name>mResultTripStartLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>setToText</name></name><argument_list>(<argument><expr><name>mResultTripEndLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>getFragmentListener</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOTPBundle</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>



    <function><type><specifier>private</specifier> <name>void</name></type> <name>restoreState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mMap</name> <operator>=</operator> <call><name>retrieveMap</name><argument_list>(<argument><expr><name>mMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>boolean</name></type> <name>mapFailedBefore</name> <init>= <expr><call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_FAILED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>mapFailedBefore</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>enableUIElements</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>initializeMapInterface</name><argument_list>(<argument><expr><name>mMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mapFailedBefore</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>updateOverlay</name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getOverlayString</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(
                        <argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TB_START_LOCATION</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TB_END_LOCATION</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>CameraPosition</name></type> <name>camPosition</name> <init>= <expr><call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_CAMERA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>camPosition</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>moveCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newCameraPosition</name></name><argument_list>(<argument><expr><name>camPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mStartMarkerPosition</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_START_MARKER_POSITION</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>mStartMarkerPosition</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mEndMarkerPosition</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_END_MARKER_POSITION</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>mEndMarkerPosition</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_START_LOCATION_GEOCODING_PROCESSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_END_LOCATION_GEOCODING_PROCESSED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mAppStarts</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_APP_STARTS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_START_LOCATION_CHANGED_BY_USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_END_LOCATION_CHANGED_BY_USER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>mSavedLastLocation</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SAVED_LAST_LOCATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mSavedLastLocationCheckedForServer</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SAVED_LAST_LOCATION_CHECKED_FOR_SERVER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>restorePanelUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>OTPBundle</name></type> <name>otpBundle</name> <init>= <expr><operator>(</operator><name>OTPBundle</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_OTP_BUNDLE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>otpBundle</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name> <init>= <expr><call><name><name>otpBundle</name><operator>.</operator><name>getItineraryList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onItinerariesLoaded</name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onItinerarySelected</name><argument_list>(<argument><expr><call><name><name>otpBundle</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>fillItinerariesSpinner</name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>Date</name></type> <name>savedTripDate</name> <init>= <expr><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TRIP_DATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>savedTripDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mTripDate</name> <operator>=</operator> <name>savedTripDate</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>mArriveBy</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_ARRIVE_BY</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_START_LOCATION</name></name></expr></argument>)</argument_list></call>
                        <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mResultTripStartLocation</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                            <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_START_LOCATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_END_LOCATION</name></name></expr></argument>)</argument_list></call>
                        <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mResultTripEndLocation</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                            <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_END_LOCATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

                <expr_stmt><expr><name>mIsAlarmBikeRentalUpdateActive</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY__IS_ALARM_BIKE_RENTAL_ACTIVE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>previousOptimization</name> <operator>=</operator> <operator>(</operator><name>OptimizeType</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_OPTIMIZATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousModes</name> <operator>=</operator> <operator>(</operator><name>TraverseModeSet</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_MODES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousBikeTriangleMinValue</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previousBikeTriangleMaxValue</name> <operator>=</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mCustomServerMetadata</name> <operator>=</operator> <operator>(</operator><name>GraphMetadata</name><operator>)</operator> <call><name><name>savedInstanceState</name>
                        <operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_CUSTOM_SERVER_METADATA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Activates/deactivates all the UI, avoiding to take care of the possible
     * listeners functions if the application is in a non working state.
     *
     * @param enable if true elements will be enabled
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>enableUIElements</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>visibility</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>visibility</name> <operator>=</operator> <name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBtnDateDialog</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBtnMyLocation</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mNavigationDrawerLeftPane</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>toggleItinerarySelectionSpinner</name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows/hides itinerary drop down list of map main view.
     * &lt;p&gt;
     * Moves related buttons for MyLocation and the handle to show the left
     * panel accordingly.
     *
     * @param show if true drop down list will be shown
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>toggleItinerarySelectionSpinner</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>show</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>paramsMyLocation</name>
                <init>= <expr><operator>(</operator><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>mBtnMyLocation</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>paramsHandle</name>
                <init>= <expr><operator>(</operator><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>mBtnHandle</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>paramsHandle</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>paramsMyLocation</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>show</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mPanelDisplayDirection</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//Workaround, this value proves to be false, but is dirty. This is because removeRule is not defined in early versions of the API</comment>
                <expr_stmt><expr><call><name><name>paramsMyLocation</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>ALIGN_PARENT_BOTTOM</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//Workaround, this value proves to be false, but is dirty. This is because removeRule is not defined in early versions of the API</comment>
                <expr_stmt><expr><call><name><name>paramsHandle</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>ALIGN_PARENT_BOTTOM</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mPanelDisplayDirection</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>paramsMyLocation</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>ALIGN_PARENT_BOTTOM</name></name></expr></argument>, <argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>paramsHandle</name><operator>.</operator><name>addRule</name></name><argument_list>(<argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>ALIGN_PARENT_BOTTOM</name></name></expr></argument>, <argument><expr><name><name>RelativeLayout</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>mBtnMyLocation</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>paramsMyLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnHandle</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>paramsHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnMyLocation</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBtnHandle</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to move down itineraries spinner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>requestTrip</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>startLocationString</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>endLocationString</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Boolean</name></type> <name>isOriginMyLocation</name> <init>= <expr><call><name><name>mPrefs</name>
                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>isDestinationMyLocation</name> <init>= <expr><call><name><name>mPrefs</name>
                <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>toggleItinerarySelectionSpinner</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>mRoute</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Polyline</name></type> <name>p</name> <range>: <expr><name>mRoute</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>mRoute</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mModeMarkers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mModeMarkers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>mModeMarkers</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>isOriginMyLocation</name> <operator>&amp;&amp;</operator> <name>isDestinationMyLocation</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_origin_destination_are_equal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>isOriginMyLocation</name> <operator>||</operator> <name>isDestinationMyLocation</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isOriginMyLocation</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>startLocationString</name> <operator>=</operator> <name><name>mCurrentLatLng</name><operator>.</operator><name>latitude</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name><name>mCurrentLatLng</name><operator>.</operator><name>longitude</name></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                                <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_need_to_place_markers_before_planning</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>endLocationString</name> <operator>=</operator> <call><name><name>mEndMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>latitude</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>mEndMarker</name>
                                <operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>longitude</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>endLocationString</name> <operator>=</operator> <name><name>mCurrentLatLng</name><operator>.</operator><name>latitude</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name><name>mCurrentLatLng</name><operator>.</operator><name>longitude</name></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                                <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_need_to_place_markers_before_planning</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>startLocationString</name> <operator>=</operator> <call><name><name>mStartMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>latitude</name> <operator>+</operator> <literal type="string">","</literal>
                                <operator>+</operator> <call><name><name>mStartMarker</name>
                                <operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>longitude</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mStartMarker</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mEndMarker</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>,
                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_need_to_place_markers_before_planning</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>startLocationString</name> <operator>=</operator> <call><name><name>mStartMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>latitude</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>mStartMarker</name>
                        <operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>longitude</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>endLocationString</name> <operator>=</operator> <call><name><name>mEndMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>latitude</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>mEndMarker</name>
                        <operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>longitude</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>startLocationString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>endLocationString</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_origin_destination_are_equal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsStartLocationGeocodingCompleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isOriginMyLocation</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_need_to_place_markers_before_planning</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>mIsEndLocationGeocodingCompleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isDestinationMyLocation</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_need_to_place_markers_before_planning</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>Request</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setFrom</name></name><argument_list>(<argument><expr><call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>startLocationString</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setTo</name></name><argument_list>(<argument><expr><call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>endLocationString</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setArriveBy</name></name><argument_list>(<argument><expr><name>mArriveBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OptimizeSpinnerItem</name></type> <name>optimizeSpinnerItem</name> <init>= <expr><operator>(</operator><name>OptimizeSpinnerItem</name><operator>)</operator> <call><name><name>mDdlOptimization</name>
                <operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>getCheckedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>optimizeSpinnerItem</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>optimizeSpinnerItem</name> <operator>=</operator> <operator>(</operator><name>OptimizeSpinnerItem</name><operator>)</operator> <call><name><name>mDdlOptimization</name><operator>.</operator><name>getItemAtPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>optimizeSpinnerItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setOptimize</name></name><argument_list>(<argument><expr><call><name><name>optimizeSpinnerItem</name><operator>.</operator><name>getOptimizeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>optimizeSpinnerItem</name><operator>.</operator><name>getOptimizeType</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OptimizeType</name><operator>.</operator><name>TRIANGLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setTriangleTimeFactor</name></name><argument_list>(<argument><expr><name>mBikeTriangleMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setTriangleSlopeFactor</name></name><argument_list>(<argument><expr><name>mBikeTriangleMaxValue</name> <operator>-</operator> <name>mBikeTriangleMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setTriangleSafetyFactor</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>mBikeTriangleMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                    <argument><expr><literal type="string">"Optimization not found, not possible to add it to the request so, most"</literal>
                            <operator>+</operator> <literal type="string">"likely results will be incorrect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setModes</name></name><argument_list>(<argument><expr><call><name>getSelectedTraverseModeSet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Server</name></type> <name>selectedServer</name> <init>= <expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>selectedServer</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setBikeRental</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Integer</name></type> <name>defaultMaxWalkInt</name> <init>= <expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                 <operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>max_walking_distance</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Double</name></type> <name>maxWalk</name> <init>= <expr><call><name><name>Double</name>
                    <operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_MAX_WALKING_DISTANCE</name></name></expr></argument>,
                            <argument><expr><call><name><name>defaultMaxWalkInt</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setMaxWalkDistance</name></name><argument_list>(<argument><expr><name>maxWalk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setMaxWalkDistance</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>defaultMaxWalkInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setWheelchair</name></name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_WHEEL_ACCESSIBLE</name></name></expr></argument>,
                <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Date</name></type> <name>requestTripDate</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mTripDate</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>requestTripDate</name> <operator>=</operator> <call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>requestTripDate</name> <operator>=</operator> <name>mTripDate</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setDateTime</name></name><argument_list>(
                <argument><expr><call><name><name>DateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_OTP_SERVER_DATE_QUERY</name></name></expr></argument>,
                        <argument><expr><call><name><name>requestTripDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DateFormat</name>
                        <operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_OTP_SERVER_TIME_QUERY</name></name></expr></argument>, <argument><expr><call><name><name>requestTripDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>setShowIntermediateStops</name></name><argument_list>(<argument><expr><name><name>Boolean</name><operator>.</operator><name>TRUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>TripRequest</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>mApplicationContext</name></name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mOTPApp</name>
                <operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>execute</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mTripDate</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves a map if the map fragment parameter is null.
     * &lt;p&gt;
     * If there is an error tries to solve it checking if it was because of
     * "Google Play Services" sending the corresponding intent.
     *
     * @param mMap map fragment to check if the map is already initialized
     * @return initialized map fragment
     */</comment>
    <function><type><specifier>private</specifier> <name>GoogleMap</name></type> <name>retrieveMap</name><parameter_list>(<parameter><decl><type><name>GoogleMap</name></type> <name>mMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// Do a null check to confirm that we have not already instantiated the map.</comment>
        <expr_stmt><expr><name>mMapFailed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>mMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mMap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SupportMapFragment</name><operator>)</operator> <call><name>getChildFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>.</operator><call><name>getMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Check if we were successful in obtaining the map.</comment>
            <if_stmt><if>if <condition>(<expr><name>mMap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name><name>GooglePlayServicesUtil</name>
                        <operator>.</operator><name>isGooglePlayServicesAvailable</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name><name>ConnectionResult</name><operator>.</operator><name>SUCCESS</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>enableUIElements</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Dialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>GooglePlayServicesUtil</name><operator>.</operator><name>getErrorDialog</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>OTPApp</name><operator>.</operator><name>CHECK_GOOGLE_PLAY_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mMapFailed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>mMap</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper to trigger functions to disable bike parameters and effectively
     * show them as inactive (faded).
     *
     * @param enable when true parameters are shown
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>showBikeParameters</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setRangeSeekBarStateColors</name><argument_list>(<argument><expr><name>enable</name></expr></argument>, <argument><expr><name>mBikeTriangleParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>disableEnableControls</name><argument_list>(<argument><expr><name>enable</name></expr></argument>, <argument><expr><name>mBikeTriangleParametersLayout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes optimization spinner values to show ones compatible with
     * bikes or with transit. If updateOptimizationValue is true values of the spinner are also
     * modified to adapt to bike.
     * &lt;p&gt;
     * Replaces fewest transfers with safer trip options.
     *
     * @param enable when true spinner is set to bike values
     * @param updateOptimizationValue when true optimization spinner values are modified to select
     *                                by default "custom trip" by bike and restore previous value
     *                                when bike mode is abandoned
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setBikeOptimizationAdapter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateOptimizationValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>OptimizeSpinnerItem</name></argument>&gt;</argument_list></name></type> <name>optimizationAdapter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newOptimizationValue</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>updateOptimizationValue</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>mOptimizationValueToRestoreWhenNoBike</name> <operator>=</operator> <call><name><name>mDdlOptimization</name><operator>.</operator><name>getCheckedItemPosition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>optimizationAdapter</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>OptimizeSpinnerItem</name></argument>&gt;</argument_list></name><argument_list>(
                    <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_list_item_single_choice</name></name></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>OptimizeSpinnerItem</name><index>[]</index></name><block>{
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_quick</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>QUICK</name></name></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_safe</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>SAFE</name></name></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_bike_triangle</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>TRIANGLE</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>optimizationAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>optimizationAdapter</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>OptimizeSpinnerItem</name></argument>&gt;</argument_list></name><argument_list>(
                    <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_list_item_single_choice</name></name></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>OptimizeSpinnerItem</name><index>[]</index></name><block>{
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_quick</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>QUICK</name></name></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(
                                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_safe</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>SAFE</name></name></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>new</operator> <call><name>OptimizeSpinnerItem</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>left_panel_optimization_fewest_transfers</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>OptimizeType</name><operator>.</operator><name>TRANSFERS</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>optimizationAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>updateOptimizationValue</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>newOptimizationValue</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mOptimizationValueToRestoreWhenNoBike</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>newOptimizationValue</name> <operator>=</operator> <name>mOptimizationValueToRestoreWhenNoBike</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>newOptimizationValue</name> <operator>=</operator> <call><name><name>mPrefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><name>newOptimizationValue</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>mDdlOptimization</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><name>newOptimizationValue</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_OPTIMIZATION</name></name></expr></argument>, <argument><expr><name>newOptimizationValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Toggles between standard colors and faded colors for the passed seekbar
     * to visually show that it's disabled.
     *
     * @param enable  when true standard colors are used
     * @param seekBar bar that will be toggled
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setRangeSeekBarStateColors</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>seekBar</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setLeftColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysRed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setMiddleColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysGreen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setRightColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysBlue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setLeftColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysRedFaded</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setMiddleColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysGreenFaded</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>seekBar</name><operator>.</operator><name>setRightColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysBlueFaded</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Recursively enable/disable all the views contained in a ViewGroup and
     * it's descendants.
     *
     * @param enable when true views will be disable
     * @param vg     a ViewGroup that will be modified
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>disableEnableControls</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>vg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vg</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>View</name></type> <name>child</name> <init>= <expr><call><name><name>vg</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>child</name> <operator>instanceof</operator> <name>ViewGroup</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>disableEnableControls</name><argument_list>(<argument><expr><name>enable</name></expr></argument>, <argument><expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                            <argument><expr><literal type="string">"Not possible to fully perform process to disable all controls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Removes focus from the text box chosen by the parameter and deletes map click listener if
     * none of the text boxes remain focused.
     *
     * @param isStartTextbox to select text box to removes focus from
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>removeFocus</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartTextbox</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isStartTextbox</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mTbEndLocation</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMapClickListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mTbStartLocation</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setOnMapClickListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Triggers ServerSelector task to retrieve servers list.
     * &lt;p&gt;
     * Server list will be downloaded or retrieved from the database.
     * &lt;p&gt;
     * A valid location should be passed to perform server autodetect if the
     * preference is set. If location is null a toast will be displayed
     * informing of the error.
     * &lt;p&gt;
     * It it's not possible or not requested to autodetect the server list will
     * be displayed.
     *
     * @param mCurrentLatLng location to use if servers should be detected
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>runAutoDetectServer</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showDialog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mCurrentLatLng</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>mMap</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                    <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ServerSelector</name></type> <name>serverSelector</name> <init>= <expr><operator>new</operator> <call><name>ServerSelector</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>,
                    <argument><expr><name>dataSource</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>mNeedToUpdateServersList</name></expr></argument>, <argument><expr><name>showDialog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>serverSelector</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mSavedLastLocationCheckedForServer</name> <operator>=</operator> <name>mCurrentLatLng</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>setNeedToRunAutoDetect</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNeedToUpdateServersList</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Triggers ServerSelector task to retrieve servers list.
     * &lt;p&gt;
     * Server list will be downloaded or retrieved from the database.
     * &lt;p&gt;
     * A servers list will be displayed or a toast informing of the error.
     * &lt;p&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>runAutoDetectServerNoLocation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showDialog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ServerSelector</name></type> <name>serverSelector</name> <init>= <expr><operator>new</operator> <call><name>ServerSelector</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>,
                <argument><expr><name>dataSource</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>mNeedToUpdateServersList</name></expr></argument>, <argument><expr><name>showDialog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name><name>latLngList</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>LatLng</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>latLngList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>serverSelector</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>latLngList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNeedToRunAutoDetect</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNeedToUpdateServersList</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Registers the server in the OTPApp class.
     * &lt;p&gt;
     * UI may be restored to avoid presence of all server data, removing all
     * objects from the map and restarting text boxes to default contents.
     * &lt;p&gt;
     * OTPApp can be requested calling to getActivity by other fragments.
     *
     * @param s new server to be set
     * @param restartUI if true UI will be restarted to adapt to new server
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setSelectedServer</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>restartUI</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>restartUI</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>restartMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>restartTextBoxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>mOTPApp</name><operator>.</operator><name>setSelectedServer</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Removes all map objects and the global variables that reference them in
     * this fragment.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restartMap</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mStartMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mEndMarker</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mModeMarkers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mModeMarkers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>BikeRentalStationInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mBikeRentalStations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mRoute</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Polyline</name></type> <name>p</name> <range>: <expr><name>mRoute</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mBoundariesPolyline</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mBoundariesPolyline</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mRoute</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mModeMarkers</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBikeRentalStations</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBoundariesPolyline</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>toggleItinerarySelectionSpinner</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets text boxes to initial default locations.
     * &lt;p&gt;
     * MyLocation for start text box and empty for end text box.
     * &lt;p&gt;
     * Accordingly preference with key PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION
     * is set.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restartTextBoxes</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Writes coordinates of latlng to the selected text box.
     *
     * @param latlng    object containing the coordinates to set
     * @param isStartTb when true start text box is set otherwise end text box
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setLocationTb</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latlng</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStartTb</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>DecimalFormatSymbols</name></type> <name>decimalFormatSymbols</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormatSymbols</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>decimalFormatSymbols</name><operator>.</operator><name>setDecimalSeparator</name></name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>decimalFormat</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_COORDINATES</name></name></expr></argument>,
                <argument><expr><name>decimalFormatSymbols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isStartTb</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>decimalFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>latlng</name><operator>.</operator><name>latitude</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>decimalFormat</name>
                    <operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>latlng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>decimalFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>latlng</name><operator>.</operator><name>latitude</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>decimalFormat</name>
                    <operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>latlng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Moves or adds (if didn't existed) a start/end marker to latlng position
     * and updates its text box.
     * &lt;p&gt;
     * If preference with key PREFERENCE_KEY_USE_INTELLIGENT_MARKERS is set
     * geocoding will be triggered for text boxes, except if the parameter geocoding is set to
     * false.
     * &lt;p&gt;
     * If the marker does not fit in selected server bounds marker won't be set
     * and a warning will be shown.
     *
     * @param isStartMarker when true start marker will be set
     * @param latlng        the location to move on
     * @param showMessage   whether show or not informative message on success
     * @param geocode       when false, even with the preference set, geocoding won't be triggered.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setMarker</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartMarker</name></decl></parameter>, <parameter><decl><type><name>LatLng</name></type> <name>latlng</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showMessage</name></decl></parameter>,
                           <parameter><decl><type><name>boolean</name></type> <name>geocode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>LocationUtil</name>
                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>||</operator> <operator>(</operator><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>showMessage</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>toastText</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>toastText</name> <operator>=</operator> <call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_map_markers_start_marker_activated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>toastText</name> <operator>=</operator> <call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_map_markers_end_marker_activated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name>toastText</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setMarkerPosition</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <name>latlng</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>setLocationTb</name></name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>geocode</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>setMarkerPosition</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <name>latlng</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>MainFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>setLocationTb</name></name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>geocode</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>updateMarkerPosition</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>showMessage</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_map_markers_marker_out_of_boundaries</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Updates marker or creates a new one if doesn't exit to the passed latlng
     * &lt;p&gt;
     * Accordingly updates the field used for save/restore purposes.
     *
     * @param isStartMarker if true start marker will be changed, end marker
     *                      otherwise
     * @param latLng        contains the coordinates of the position to be changed to
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setMarkerPosition</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartMarker</name></decl></parameter>, <parameter><decl><type><name>LatLng</name></type> <name>latLng</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mStartMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>latLng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mStartMarker</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>latLng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <name>latLng</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mEndMarker</name> <operator>=</operator> <call><name>addStartEndMarker</name><argument_list>(<argument><expr><name>latLng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mEndMarker</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><name>latLng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <name>latLng</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Creates and adds to the map a new start/end marker.
     * &lt;p&gt;
     * Accordingly updates the field used for save/restore purposes.
     *
     * @param latLng        the position to initialize the new marker
     * @param isStartMarker if true a start marker will be created
     * @return the new marker created
     */</comment>
    <function><type><specifier>private</specifier> <name>Marker</name></type> <name>addStartEndMarker</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latLng</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStartMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>markerOptions</name> <init>= <expr><operator>new</operator> <call><name>MarkerOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>position</name><argument_list>(<argument><expr><name>latLng</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>draggable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>markerOptions</name>
                        <operator>.</operator><name>title</name></name><argument_list>(<argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_start_marker_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>snippet</name><argument_list>(<argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_start_marker_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>icon</name><argument_list>(<argument><expr><call><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>defaultMarker</name></name><argument_list>(<argument><expr><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>HUE_GREEN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mStartMarkerPosition</name> <operator>=</operator> <name>latLng</name></expr>;</expr_stmt>
                <return>return <expr><call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>markerOptions</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>markerOptions</name>
                        <operator>.</operator><name>title</name></name><argument_list>(<argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_end_marker_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>snippet</name><argument_list>(<argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_end_marker_description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>icon</name><argument_list>(<argument><expr><call><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>defaultMarker</name></name><argument_list>(<argument><expr><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>HUE_RED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mEndMarkerPosition</name> <operator>=</operator> <name>latLng</name></expr>;</expr_stmt>
                <return>return <expr><call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>markerOptions</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>


    <function><type><specifier>private</specifier> <name>String</name></type> <name>getLocationTbText</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isTbStartLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isTbStartLocation</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Editable</name></type> <name>tbStarLocationEditable</name> <init>= <expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tbStarLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>tbStarLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to obtain origin from input box"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Editable</name></type> <name>tbEndLocationEditable</name> <init>= <expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tbEndLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>tbEndLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to obtain destination from input box"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Updates the text box contents to the given location and triggers
     * geocoding for that location to update the text box.
     * &lt;p&gt;
     * This is a wrapper for setLocationTb, processAddress and accordingly change
     * the field to control if the text box was changed by the user.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateMarkerPosition</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>newLatLng</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStartMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setLocationTb</name><argument_list>(<argument><expr><name>newLatLng</name></expr></argument>, <argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>locationText</name> <init>= <expr><call><name>getLocationTbText</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>processAddress</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>, <argument><expr><name>locationText</name></expr></argument>, <argument><expr><name><name>newLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>, <argument><expr><name><name>newLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mGoogleApiClient</name> <operator>=</operator> <operator>new</operator> <call><name><name>GoogleApiClient</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addApi</name><argument_list>(<argument><expr><name>API</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addConnectionCallbacks</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addOnConnectionFailedListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mMap</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SupportMapFragment</name><operator>)</operator> <call><name>getChildFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                    <operator>.</operator><call><name>getMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Check if we were successful in obtaining the map.</comment>
            <if_stmt><if>if <condition>(<expr><name>mMap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>enableUIElements</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>initializeMapInterface</name><argument_list>(<argument><expr><name>mMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>runAutoDetectServerNoLocation</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>connectLocationClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Connects the LocationClient.
     * &lt;p&gt;
     * To avoid errors only tries if is not pending for another connection
     * request or is disconnected.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>connectLocationClient</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mGoogleApiClient</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mGoogleApiClient</name><operator>.</operator><name>isConnecting</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mGoogleApiClient</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Disconnects the LocationClient.
     * &lt;p&gt;
     * To avoid errors only tries if it's connected.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>disconnectLocationClient</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mGoogleApiClient</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mGoogleApiClient</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mGoogleApiClient</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_FAILED</name></name></expr></argument>, <argument><expr><name>mMapFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_CAMERA</name></name></expr></argument>, <argument><expr><call><name><name>mMap</name><operator>.</operator><name>getCameraPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_START_MARKER_POSITION</name></name></expr></argument>, <argument><expr><name>mStartMarkerPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_MAP_END_MARKER_POSITION</name></name></expr></argument>, <argument><expr><name>mEndMarkerPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_APP_STARTS</name></name></expr></argument>, <argument><expr><name>mAppStarts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_START_LOCATION_GEOCODING_PROCESSED</name></name></expr></argument>,
                    <argument><expr><name>mIsStartLocationGeocodingCompleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_END_LOCATION_GEOCODING_PROCESSED</name></name></expr></argument>,
                    <argument><expr><name>mIsEndLocationGeocodingCompleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_START_LOCATION_CHANGED_BY_USER</name></name></expr></argument>,
                    <argument><expr><name>mIsStartLocationChangedByUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_IS_END_LOCATION_CHANGED_BY_USER</name></name></expr></argument>,
                    <argument><expr><name>mIsEndLocationChangedByUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Editable</name></type> <name>tbStarLocationEditable</name> <init>= <expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tbStarLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TB_START_LOCATION</name></name></expr></argument>,
                        <argument><expr><call><name><name>tbStarLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to obtain origin while saving app bundle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>Editable</name></type> <name>tbEndLocationEditable</name> <init>= <expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tbEndLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TB_END_LOCATION</name></name></expr></argument>,
                        <argument><expr><call><name><name>tbEndLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Not possible to obtain destination while saving app bundle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TB_END_LOCATION</name></name></expr></argument>,
                    <argument><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SAVED_LAST_LOCATION</name></name></expr></argument>, <argument><expr><name>mSavedLastLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_SAVED_LAST_LOCATION_CHECKED_FOR_SERVER</name></name></expr></argument>,
                    <argument><expr><name>mSavedLastLocationCheckedForServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>mResultTripStartLocation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_START_LOCATION</name></name></expr></argument>,
                        <argument><expr><name>mResultTripStartLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mResultTripEndLocation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_RESULT_TRIP_END_LOCATION</name></name></expr></argument>,
                        <argument><expr><name>mResultTripEndLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TRIP_DATE</name></name></expr></argument>, <argument><expr><name>mTripDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_ARRIVE_BY</name></name></expr></argument>, <argument><expr><name>mArriveBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY__IS_ALARM_BIKE_RENTAL_ACTIVE</name></name></expr></argument>, <argument><expr><name>mIsAlarmBikeRentalUpdateActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_OPTIMIZATION</name></name></expr></argument>, <argument><expr><name>previousOptimization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_MODES</name></name></expr></argument>, <argument><expr><name>previousModes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MIN_VALUE</name></name></expr></argument>, <argument><expr><name>previousBikeTriangleMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_PREVIOUS_BIKE_TRIANGLE_MAX_VALUE</name></name></expr></argument>, <argument><expr><name>previousBikeTriangleMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItineraryList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>OTPBundle</name></type> <name>otpBundle</name> <init>= <expr><operator>new</operator> <call><name>OTPBundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setFromText</name></name><argument_list>(<argument><expr><name>mResultTripStartLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setToText</name></name><argument_list>(<argument><expr><name>mResultTripEndLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setItineraryList</name></name><argument_list>(<argument><expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItineraryList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setCurrentItineraryIndex</name></name><argument_list>(<argument><expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItineraryIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>otpBundle</name><operator>.</operator><name>setCurrentItinerary</name></name><argument_list>(<argument><expr><call><name><name>mFragmentListener</name><operator>.</operator><name>getCurrentItinerary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_OTP_BUNDLE</name></name></expr></argument>, <argument><expr><name>otpBundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_CUSTOM_SERVER_METADATA</name></name></expr></argument>, <argument><expr><name>mCustomServerMetadata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Triggers geocoding for chosen text box with passed text.
     * &lt;p&gt;
     * If address contents are the String used to identify user's location
     * ("MyLocation" for example) user location is passed to know the
     * corresponding address.
     * In this case user's location shouldn't be null, if it is a toast is
     * shown.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isStartTextBox</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>,
                               <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>processAddress</name><argument_list>(<argument><expr><name>isStartTextBox</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>geocodingForMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Triggers geocoding for chosen text box with passed text, offering the possibility of pass
     * original latitude and longitude requested to check reverse geocoding results when
     * geocoding for marker.
     * &lt;p&gt;
     * If address contents are the String used to identify user's location
     * ("MyLocation" for example) user location is passed to know the
     * corresponding address.
     * In this case user's location shouldn't be null, if it is a toast is
     * shown.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>processAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isStartTextBox</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>Double</name></type> <name>originalLat</name></decl></parameter>,
                               <parameter><decl><type><name>Double</name></type> <name>originalLon</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>mGeoCodingTask</name> <operator>=</operator> <operator>new</operator> <call><name>OTPGeocoding</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>,
                <argument><expr><name>isStartTextBox</name></expr></argument>, <argument><expr><name>geocodingForMarker</name></expr></argument>, <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isStartTextBox</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mGeoCodingTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mGeoCodingTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>latString</name></decl>, <decl><type ref="prev"/><name>lonString</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>originalLat</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>originalLon</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>latString</name> <operator>=</operator> <call><name><name>originalLat</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lonString</name> <operator>=</operator> <call><name><name>originalLon</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>latString</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>lonString</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>isStartTextBox</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mGeoCodingTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latString</name></expr></argument>, <argument><expr><name>lonString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mGeoCodingTask</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>latString</name></expr></argument>, <argument><expr><name>lonString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><name>mIsAlarmBikeRentalUpdateActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"MainFragment onResume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>disconnectLocationClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Release all map-related objects to make sure GPS is shut down when</comment>
        <comment type="line">// the user leaves the app</comment>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Released all map objects in MainFragment.onDestroy()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Updates server to the new one set in preferences and also makes some UI changes (camera
     * movements) if specified.
     *
     * @param updateUI also updateUI, not useful if changes should occur on background
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateSelectedServer</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>updateUI</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>serverId</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Server</name></type> <name>server</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSelectedServer</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>updateUI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>bounds</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bounds</name> <operator>=</operator> <call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_BOUNDS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>)</operator>
                        <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addBoundariesRectangle</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>mCustomServerMetadata</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>MetadataRequest</name></type> <name>metaRequest</name> <init>= <expr><operator>new</operator> <call><name>MetadataRequest</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>,
                            <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>metaRequest</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name>onMetadataRequestComplete</name><argument_list>(<argument><expr><name>mCustomServerMetadata</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Now using custom OTP server: "</literal> <operator>+</operator> <call><name><name>mPrefs</name>
                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>serverId</name> <operator>=</operator> <call><name><name>mPrefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>mCustomServerMetadata</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>server</name> <operator>=</operator> <operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><call><name><name>dataSource</name>
                        <operator>.</operator><name>getServer</name></name><argument_list>(<argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setSelectedServer</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>updateUI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addBoundariesRectangle</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>updateUI</name></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mCurrentLatLng</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>LocationUtil</name>
                            <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Now using OTP server: "</literal> <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server not selected yet, should be first start or app update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>server</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>server</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>server</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>BikeRentalLoad</name></type> <name>bikeRentalGetStations</name> <init>= <expr><operator>new</operator> <call><name>BikeRentalLoad</name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                            <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bikeRentalGetStations</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name>removeBikeStations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>startLocationPlacesAutoCompleteAdapter</name> <operator>!=</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <name>endLocationPlacesAutoCompleteAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>startLocationPlacesAutoCompleteAdapter</name><operator>.</operator><name>setSelectedServer</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>endLocationPlacesAutoCompleteAdapter</name><operator>.</operator><name>setSelectedServer</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>pMenu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>pMenu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>menu</name></name></expr></argument>, <argument><expr><name>pMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mGPS</name> <operator>=</operator> <call><name><name>pMenu</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Menu</name></type> <name>pMenu</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isGPSEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mGPS</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_disable_gps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>mGPS</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_enable_gps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>pMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>OTPApp</name></type> <name>app</name> <init>= <expr><operator>(</operator><operator>(</operator><name>OTPApp</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name><name>pItem</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gps_settings</name></name></expr>:</case>
                <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(
                        <argument><expr><name><name>Settings</name><operator>.</operator><name>ACTION_LOCATION_SOURCE_SETTINGS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>settings</name></name></expr>:</case>
                <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startActivityForResult</name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>OTPApp</name><operator>.</operator><name>SETTINGS_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>feedback</name></name></expr>:</case>
                <decl_stmt><decl><type><name>Server</name></type> <name>selectedServer</name> <init>= <expr><call><name><name>app</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>recipients</name> <init>= <expr><block>{<expr><call><name><name>selectedServer</name><operator>.</operator><name>getContactEmail</name></name><argument_list>()</argument_list></call></expr>,
                        <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>feedback_email_android_developer</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>uriText</name> <init>= <expr><literal type="string">"mailto:"</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>recipient</name> <range>: <expr><name>recipients</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>uriText</name> <operator>+=</operator> <name>recipient</name> <operator>+</operator> <literal type="string">";"</literal></expr>;</expr_stmt>
                </block_content>}</block></for>

                <decl_stmt><decl><type><name>String</name></type> <name>subject</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>subject</name> <operator>+=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_feedback_subject</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Date</name></type> <name>d</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>subject</name> <operator>+=</operator> <literal type="string">"["</literal> <operator>+</operator> <call><name><name>d</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>uriText</name> <operator>+=</operator> <literal type="string">"?subject="</literal> <operator>+</operator> <name>subject</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>content</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MyActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getCurrentRequestString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try <block>{<block_content>
                    <expr_stmt><expr><name>uriText</name> <operator>+=</operator> <literal type="string">"&amp;body="</literal> <operator>+</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></catch></try>

                <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uriText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Intent</name></type> <name>sendIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SENDTO</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sendIntent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><call><name><name>Intent</name><operator>.</operator><name>createChooser</name></name><argument_list>(<argument><expr><name>sendIntent</name></expr></argument>,
                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>menu_button_feedback_send_email</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>server_info</name></name></expr>:</case>
                <decl_stmt><decl><type><name>Server</name></type> <name>server</name> <init>= <expr><call><name><name>app</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                            <argument><expr><literal type="string">"Tried to get server info when no server was selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_no_server_selected_error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>weakContext</name> <init>= <expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name> <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>weakContext</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>,
                        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Boolean</name></type> <name>isGPSEnabled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>sLocationManager</name><operator>.</operator><name>isProviderEnabled</name></name><argument_list>(<argument><expr><name><name>LocationManager</name><operator>.</operator><name>GPS_PROVIDER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper to other functions: moves the marker to the location included
     * in the address, updates text box and zooms to that position.
     *
     * @param isStartMarker if true start marker will be changed
     * @param address       will location and text information
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>moveMarker</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>isStartMarker</name></decl></parameter>, <parameter><decl><type><name>CustomAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mStartAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>mEndAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>latlng</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setMarkerPosition</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>, <argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zoomToGeocodingResult</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper to other functions: moves the marker to the location included
     * in the address, updates text box and zooms to that position.
     * &lt;p&gt;
     * This only happens if the new location is closer than a constant to
     * marker previous location. Otherwise address is only used as reference
     * and text box is updated to "Marker close to [address]".
     *
     * @param isStartMarker if true start marker will be changed
     * @param address       will location and text information
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>moveMarkerRelative</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>isStartMarker</name></decl></parameter>, <parameter><decl><type><name>CustomAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name><name>results</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>addressLat</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>addressLon</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Marker</name></type> <name>marker</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isStartMarker</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>marker</name> <operator>=</operator> <name>mStartMarker</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mStartAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>marker</name> <operator>=</operator> <name>mEndMarker</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mEndAddress</name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>Location</name><operator>.</operator><name>distanceBetween</name></name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>latitude</name></expr></argument>, <argument><expr><call><name><name>marker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>longitude</name></expr></argument>,
                <argument><expr><name>addressLat</name></expr></argument>, <argument><expr><name>addressLon</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>OTPApp</name><operator>.</operator><name>GEOCODING_MAX_ERROR</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>LatLng</name></type> <name>newLatlng</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name>addressLat</name></expr></argument>, <argument><expr><name>addressLon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setMarkerPosition</name><argument_list>(<argument><expr><name>isStartMarker</name></expr></argument>, <argument><expr><name>newLatlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setTextBoxLocation</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_close_to_marker</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name><name>address</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>isStartMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Zooms to address or to address and the location of the other marker if it's
     * not the first marker.
     * &lt;p&gt;
     * If the other location is "MyLocation" will also be included in zoom.
     *
     * @param isStartLocation if true address is for start location
     * @param address         with the location to zoom at
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomToGeocodingResult</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartLocation</name></decl></parameter>, <parameter><decl><type><name>CustomAddress</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>latlng</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isStartLocation</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mIsStartLocationChangedByUser</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mEndMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>zoomToTwoPoints</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><name>mEndMarkerPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mPrefs</name>
                            <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_DESTINATION_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>zoomToTwoPoints</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><name>mCurrentLatLng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>zoomToLocation</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>mIsEndLocationChangedByUser</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mStartMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>zoomToTwoPoints</name><argument_list>(<argument><expr><name>mStartMarkerPosition</name></expr></argument>, <argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_ORIGIN_IS_MY_LOCATION</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>mCurrentLatLng</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_tripplanner_current_location_error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <expr_stmt><expr><call><name>zoomToTwoPoints</name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>zoomToLocation</name><argument_list>(<argument><expr><name>latlng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomToLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latlng</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>latlng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(
                    <argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>latlng</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>defaultMediumZoomLevel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomToTwoPoints</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>pointA</name></decl></parameter>, <parameter><decl><type><name>LatLng</name></type> <name>pointB</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pointA</name><operator>.</operator><name>latitude</name></name> <operator>!=</operator> <name><name>pointB</name><operator>.</operator><name>latitude</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pointA</name><operator>.</operator><name>longitude</name></name> <operator>!=</operator> <name><name>pointB</name><operator>.</operator><name>longitude</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>LatLngBounds</name><operator>.</operator><name>Builder</name></name></type> <name>boundsCreator</name> <init>= <expr><call><name><name>LatLngBounds</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>boundsCreator</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>pointA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>boundsCreator</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>pointB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLngBounds</name></name><argument_list>(<argument><expr><call><name><name>boundsCreator</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>route_zoom_padding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Updates start/end text box contents to the given text.
     *
     * @param text           contents to insert
     * @param isStartTextBox if true start box will be used
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextBoxLocation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStartTextBox</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isStartTextBox</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Resets start/end text box to previous valid address.
     *
     * @param isStartTextBox if true start box will be used
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>restartTextBoxLocation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartTextBox</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>isStartTextBox</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mStartAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mIsStartLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>addressToString</name><argument_list>(<argument><expr><name>mStartAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mEndAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mIsEndLocationChangedByUser</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>addressToString</name><argument_list>(<argument><expr><name>mEndAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns address in string format.
     * &lt;p&gt;
     * Lines used are first and second.
     *
     * @param add the address to transform
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>addressToString</name><parameter_list>(<parameter><decl><type><name>CustomAddress</name></type> <name>add</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>add</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>add</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator>
                <operator>+</operator> <literal type="string">", "</literal>
                <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>add</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>add</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Draws the route on the map.
     * &lt;p&gt;
     * To indicate the full route a polyline will be drawn using all points in
     * itinerary.
     * &lt;p&gt;
     * On each method of transportation change a mode marker will be added.
     * &lt;p&gt;
     * Mode marker for transit step will display stop name, departure time and
     * headsign.
     * Mode marker for walk/bike connection, guidance to next point and distance and time
     * to get there.
     * &lt;p&gt;
     * Previous routes are removed from the map.
     *
     * @param itinerary     the information to be drawn
     * @param animateCamera type of camera animation: - 0 camera wouldn't be animated
     *                                                - 1 animated to fit the route
     *                                                - 2 animated to fit first transit marker if
     *                                                  any, otherwise to route.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>showRouteOnMap</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>itinerary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>animateCamera</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                <argument><expr><literal type="string">"(TripRequest) legs size = "</literal>
                        <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>itinerary</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mRoute</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>Polyline</name></type> <name>legLine</name> <range>: <expr><name>mRoute</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>legLine</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>mRoute</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mModeMarkers</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mModeMarkers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mRoute</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Polyline</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mModeMarkers</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Marker</name></type> <name>firstTransitMarker</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>itinerary</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>LatLngBounds</name><operator>.</operator><name>Builder</name></name></type> <name>boundsCreator</name> <init>= <expr><call><name><name>LatLngBounds</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>stepIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name>itinerary</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>stepIndex</name><operator>++</operator></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name></type> <name>points</name> <init>= <expr><call><name><name>LocationUtil</name><operator>.</operator><name>decodePoly</name></name><argument_list>(<argument><expr><call><name><name>leg</name><operator>.</operator><name>legGeometry</name>
                        <operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>points</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>modeMarkerOption</name> <init>= <expr><call><name>generateModeMarkerOptions</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>stepIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>float</name></type> <name>scaleFactor</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFraction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>fraction</name><operator>.</operator><name>scaleFactor</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


                    <decl_stmt><decl><type><name>Marker</name></type> <name>modeMarker</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>modeMarkerOption</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>realtime</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isTransit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>realtime</name> <operator>=</operator> <name><name>leg</name><operator>.</operator><name>realTime</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>TripInfo</name></type> <name>tripInfo</name> <init>= <expr><operator>new</operator> <call><name>TripInfo</name><argument_list>(<argument><expr><name>realtime</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>,
                            <argument><expr><call><name>generateModeMarkerSnippet</name><argument_list>(<argument><expr><name>leg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mModeMarkers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>modeMarker</name></expr></argument>, <argument><expr><name>tripInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isTransit</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <comment type="line">//because on transit two step-by-step indications are generated (get on / get off)</comment>
                        <expr_stmt><expr><name>stepIndex</name><operator>++</operator></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name>firstTransitMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>firstTransitMarker</name> <operator>=</operator> <name>modeMarker</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>PolylineOptions</name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name>PolylineOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>width</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>scaleFactor</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>COLOR_ROUTE_LINE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Polyline</name></type> <name>routeLine</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>addPolyline</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>mRoute</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>routeLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>LatLng</name></type> <name>point</name> <range>: <expr><name>points</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>boundsCreator</name><operator>.</operator><name>include</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>mCustomInfoWindowAdapter</name><operator>.</operator><name>setMarkers</name></name><argument_list>(<argument><expr><name>mModeMarkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setInfoWindowAdapter</name></name><argument_list>(<argument><expr><name>mCustomInfoWindowAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>animateCamera</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>firstTransitMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>firstTransitMarker</name><operator>.</operator><name>showInfoWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>animateCamera</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>LatLngBounds</name></type> <name>routeBounds</name> <init>= <expr><call><name><name>boundsCreator</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SupportMapFragment</name><operator>)</operator> <call><name>getChildFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                        <operator>.</operator><call><name>getMap</name><argument_list>()</argument_list></call>
                        <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name>showRouteOnMapAnimateCamera</name><argument_list>(<argument><expr><name>routeBounds</name></expr></argument>, <argument><expr><name>firstTransitMarker</name></expr></argument>, <argument><expr><name>animateCamera</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>MarkerOptions</name></type> <name>generateModeMarkerOptions</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>, <parameter><decl><type><name>LatLng</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stepIndex</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>modeMarkerOption</name> <init>= <expr><operator>new</operator> <call><name>MarkerOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>position</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Drawable</name></type> <name>drawable</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><call><name>getPathIcon</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>drawable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>BitmapDrawable</name></type> <name>bitmapDrawable</name> <init>= <expr><operator>(</operator><name>BitmapDrawable</name><operator>)</operator> <call><name><name>drawable</name><operator>.</operator><name>getCurrent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>bitmapDrawable</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>modeMarkerOption</name><operator>.</operator><name>icon</name></name><argument_list>(
                    <argument><expr><call><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>fromBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error obtaining drawable to add mode icons to the map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>modeMarkerOption</name><operator>.</operator><name>title</name></name><argument_list>(<argument><expr><call><name>generateModeMarkerTitle</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><name>stepIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>modeMarkerOption</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>generateModeMarkerTitle</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stepIndex</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>title</name> <operator>=</operator> <name>stepIndex</name> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getRouteShortNameSafe</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>routeShortName</name></name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>routeLongName</name></name></expr></argument>,
                            <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call>
                    <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_connector_before_stop</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name><name>DirectionsGenerator</name><operator>.</operator><name>getLocalizedStreetName</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>from</name><operator>.</operator><name>name</name></name></expr></argument>,
                    <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>WALK</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>title</name> <operator>=</operator> <name>stepIndex</name> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_mode_walk_action</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_connector_before_destination</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DirectionsGenerator</name><operator>.</operator><name>getLocalizedStreetName</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>name</name></name></expr></argument>,
                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>title</name> <operator>=</operator> <name>stepIndex</name> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_mode_bicycle_action</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_connector_before_destination</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DirectionsGenerator</name><operator>.</operator><name>getLocalizedStreetName</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>name</name></name></expr></argument>,
                        <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>title</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>CharSequence</name></type> <name>generateModeMarkerSnippet</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>snippet</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>legDuration</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>legDuration</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>normalizeDuration</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>duration</name></name></expr></argument>, <argument><expr><name>mPrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>spannableSnippet</name> <init>= <expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>realTime</name></name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getDelayColor</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>spannableSnippet</name> <operator>=</operator> <call><name><name>ConversionUtils</name>
                        <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                                <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>headsign</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>snippet</name> <operator>=</operator> <call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>spannableSnippet</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_to</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>headsign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>snippet</name> <operator>=</operator> <name>spannableSnippet</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>snippet</name> <operator>=</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>legDuration</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                            <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getFormattedDistance</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>distance</name></name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return  <expr><name>snippet</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Moves the camera to correctly display the route on map. Several options are possible to move
     * the camera according to animateCamera parameter.
     * &lt;p&gt;
     * If the route contains any transit leg, Info Window of start point of the first one will be
     * opened and centered in the screen, to display stop address from where route starts.
     * To fit the whole route in the screen and let the first transit stop in the center, next steps
     * are performed (the objective is to create new bounds with this characteristic):
     * - Measure screen horizontal and vertical distance to northeast and southwest points of route
     * bounds. Obtain the highest.
     * - Add this distance in the other 3 dimensions to the first transit marker screen position in
     * order to obtain new points to have all the route fitted and the transit marker in the middle
     * (approximately due to projection restrictions).
     * - Calculate the coordinates of these new points and add them to the route points to calculate
     * the new bounds.
     * - Pass the new bounds to the camera movement function and correct result will be obtained.
     *
     * @param routeBounds original route bounds
     * @param firstTransitMarker position of first transit stop that will be centered
     * @param animateCamera type of camera animation: - 0 camera wouldn't be animated
     *                                                - 1 animated to fit the route
     *                                                - 2 animated to fit first transit marker if
     *                                                  any, otherwise to route.
     *                                                - 3 moved with no animation to fit first
     *                                                transit marker if any, otherwise to route.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>showRouteOnMapAnimateCamera</name><parameter_list>(<parameter><decl><type><name>LatLngBounds</name></type> <name>routeBounds</name></decl></parameter>, <parameter><decl><type><name>Marker</name></type> <name>firstTransitMarker</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>animateCamera</name></decl></parameter>)</parameter_list><block>{<block_content>

        <decl_stmt><decl><type><name>int</name></type> <name>windowWidth</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>widthPixels</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>windowHeight</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>heightPixels</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limitNortheastRight</name> <init>= <expr><name>windowWidth</name> <operator>-</operator> <name>mMapPaddingRight</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limitNortheastTop</name> <init>= <expr><name>mMapPaddingTop</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limitSouthwestLeft</name> <init>= <expr><name>mMapPaddingLeft</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>limitSouthwestBottom</name> <init>= <expr><name>windowHeight</name> <operator>-</operator> <name>mMapPaddingBottom</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point</name></type> <name>northeastInScreen</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getProjection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toScreenLocation</name><argument_list>(<argument><expr><name><name>routeBounds</name><operator>.</operator><name>northeast</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point</name></type> <name>southwestInScreen</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getProjection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toScreenLocation</name><argument_list>(<argument><expr><name><name>routeBounds</name><operator>.</operator><name>southwest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>firstTransitMarker</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>animateCamera</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>Point</name></type> <name>firstTransitMarkerInScreen</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getProjection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toScreenLocation</name><argument_list>(<argument><expr><call><name><name>firstTransitMarker</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxDistanceToRouteEdge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distanceHorizontalNortheast</name> <init>= <expr><name><name>northeastInScreen</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distanceVerticalNortheast</name> <init>= <expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>northeastInScreen</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distanceHorizontalSouthwest</name> <init>= <expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>southwestInScreen</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distanceVerticalSouthwest</name> <init>= <expr><name><name>southwestInScreen</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>distanceHorizontalNortheast</name> <operator>&gt;</operator> <name>maxDistanceToRouteEdge</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>maxDistanceToRouteEdge</name> <operator>=</operator> <name>distanceHorizontalNortheast</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>distanceVerticalNortheast</name> <operator>&gt;</operator> <name>maxDistanceToRouteEdge</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>maxDistanceToRouteEdge</name> <operator>=</operator> <name>distanceVerticalNortheast</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>distanceHorizontalSouthwest</name> <operator>&gt;</operator> <name>maxDistanceToRouteEdge</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>maxDistanceToRouteEdge</name> <operator>=</operator> <name>distanceHorizontalSouthwest</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>distanceVerticalSouthwest</name> <operator>&gt;</operator> <name>maxDistanceToRouteEdge</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>maxDistanceToRouteEdge</name> <operator>=</operator> <name>distanceVerticalSouthwest</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>maxDistanceToRouteEdge</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>maxDistanceToRouteEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Point</name></type> <name>newLimitSouthWest</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>maxDistanceToRouteEdge</name></expr></argument>, <argument><expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>maxDistanceToRouteEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point</name></type> <name>newLimitNorthEast</name> <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>maxDistanceToRouteEdge</name></expr></argument>, <argument><expr><name><name>firstTransitMarkerInScreen</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>maxDistanceToRouteEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LatLng</name></type> <name>newLimitSouthWestLatLng</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getProjection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromScreenLocation</name><argument_list>(<argument><expr><name>newLimitSouthWest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LatLng</name></type> <name>newLimitNorthEastLatLng</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>getProjection</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>fromScreenLocation</name><argument_list>(<argument><expr><name>newLimitNorthEast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>newLimitSouthWestLatLng</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>newLimitNorthEastLatLng</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>latitude</name></name> <operator>&lt;</operator> <name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>latitude</name></name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>newLimitNorthEastLatLng</name> <operator>=</operator> <operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>,
                            <argument><expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>newLimitSouthWestLatLng</name> <operator>=</operator> <operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>,
                            <argument><expr><name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>longitude</name></name> <operator>&lt;</operator> <name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>longitude</name></name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>newLimitNorthEastLatLng</name> <operator>=</operator> <operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>,
                            <argument><expr><name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>newLimitSouthWestLatLng</name> <operator>=</operator> <operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name><name>newLimitSouthWestLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>,
                            <argument><expr><name><name>newLimitNorthEastLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>routeBounds</name> <operator>=</operator> <operator>new</operator> <call><name>LatLngBounds</name><argument_list>(<argument><expr><name>newLimitSouthWestLatLng</name></expr></argument>, <argument><expr><name>newLimitNorthEastLatLng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>routeDefaultPadding</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>route_zoom_padding</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>routeDefaultPadding</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>routeDefaultPadding</name> <operator>*</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><name>routeDefaultPadding</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxHorizontalPadding</name> <init>= <expr><operator>(</operator><name>limitNortheastRight</name> <operator>-</operator> <name>limitSouthwestLeft</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>maxVerticalPadding</name> <init>= <expr><operator>(</operator><name>limitSouthwestBottom</name> <operator>-</operator> <name>limitNortheastTop</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&gt;</operator> <name>maxHorizontalPadding</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>maxHorizontalPadding</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&gt;</operator> <name>maxVerticalPadding</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>maxVerticalPadding</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>animateCamera</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>moveCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLngBounds</name></name><argument_list>(<argument><expr><name>routeBounds</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>newLatLngBounds</name></name><argument_list>(<argument><expr><name>routeBounds</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>int</name></type> <name>getPathIcon</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>modeString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>TraverseMode</name></type> <name>mode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>modeString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>icon</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>cycling</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>CAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>car</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUS</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name></name></expr></argument>)</argument_list></call>
                <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>bus</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>RAIL</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator>
                <call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>train</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FERRY</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ferry</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>GONDOLA</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>boat</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>SUBWAY</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>underground</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAM</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>tramway</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>WALK</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>pedestriancrossing</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>CABLE_CAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>cablecar</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FUNICULAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>funicolar</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRANSIT</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>road</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRANSFER</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>caution</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>road</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>icon</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>OtpFragment</name></type> <name>getFragmentListener</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mFragmentListener</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFragmentListener</name><parameter_list>(<parameter><decl><type><name>OtpFragment</name></type> <name>fragmentListener</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mFragmentListener</name></name> <operator>=</operator> <name>fragmentListener</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onServerSelectorComplete</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">//Update application server</comment>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>updateSelectedServer</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onTripRequestComplete</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>currentRequestString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>ConversionUtils</name><operator>.</operator><name>fixTimezoneOffsets</name></name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>,
                    <argument><expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_DEVICE_TIMEZONE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fillItinerariesSpinner</name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>toggleItinerarySelectionSpinner</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>itineraries</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>OtpFragment</name></type> <name>ofl</name> <init>= <expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// onItinerariesLoaded must be invoked before onItinerarySelected(0)</comment>
            <expr_stmt><expr><call><name><name>ofl</name><operator>.</operator><name>onItinerariesLoaded</name></name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ofl</name><operator>.</operator><name>onItinerarySelected</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>MyActivity</name></type> <name>myActivity</name> <init>= <expr><operator>(</operator><name>MyActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myActivity</name><operator>.</operator><name>setCurrentRequestString</name></name><argument_list>(<argument><expr><name>currentRequestString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mStartAddress</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>mPrefs</name>
                    <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mResultTripStartLocation</name> <operator>=</operator> <call><name>addressToString</name><argument_list>(<argument><expr><name>mStartAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Editable</name></type> <name>tbStarLocationEditable</name> <init>= <expr><call><name><name>mTbStartLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>tbStarLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mResultTripStartLocation</name> <operator>=</operator> <call><name><name>tbStarLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                            <argument><expr><literal type="string">"Not possible to obtain origin from input box while saving it to"</literal>
                                    <operator>+</operator> <literal type="string">" step-by-step screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mEndAddress</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>mPrefs</name>
                    <operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_INTELLIGENT_MARKERS</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mResultTripEndLocation</name> <operator>=</operator> <call><name>addressToString</name><argument_list>(<argument><expr><name>mEndAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>Editable</name></type> <name>tbEndLocationEditable</name> <init>= <expr><call><name><name>mTbEndLocation</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>tbEndLocationEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mResultTripEndLocation</name> <operator>=</operator> <call><name><name>tbEndLocationEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                            <argument><expr><literal type="string">"Not possible to obtain destination from input box while saving it to"</literal>
                                    <operator>+</operator> <literal type="string">" step-by-step screen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>fillItinerariesSpinner</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraryList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>itinerarySummaryList</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>itineraryList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>tripDuration</name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>itinerarySummaryList</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isTransitIsTagSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Itinerary</name></type> <name>it</name> <init>= <expr><call><name><name>itineraryList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tripDuration</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>normalizeDuration</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>duration</name></name></expr></argument>, <argument><expr><name>mPrefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>it</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>ConversionUtils</name>
                            <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                                    <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                            <operator>.</operator><name>getRouteShortNameSafe</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>routeShortName</name></name></expr></argument>,<argument><expr><name><name>leg</name><operator>.</operator><name>routeLongName</name></name></expr></argument>,
                                    <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="string">" - "</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                            <operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>tripDuration</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                    <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>headsign</name></name><operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="string">" - "</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>headsign</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>isTransitIsTagSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTransitIsTagSet</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">".   "</literal></expr>;</expr_stmt><comment type="line">//Shown index is i + 1, to use 1-based indexes for the UI instead of 0-based</comment>
                <expr_stmt><expr><name><name>itinerarySummaryList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator>
                        <call><name><name>ConversionUtils</name><operator>.</operator><name>getFormattedDistance</name></name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>walkDistance</name></name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call>
                                <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <literal type="string">"-"</literal> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                                <operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>tripDuration</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                                        <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>itineraryAdapter</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>, <argument><expr><name>itinerarySummaryList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>itineraryAdapter</name><operator>.</operator><name>setDropDownViewResource</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_dropdown_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mItinerarySelectionSpinner</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>itineraryAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onOTPGeocodingComplete</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isStartTextbox</name></decl></parameter>,
            <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addressesReturn</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>geocoderAlert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>geocoderAlert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_results_title</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_results_no_results_message</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                    </block_content>}</block></function>
                                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>addressesReturn</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>restartTextBoxLocation</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>geocoderAlert</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>addressesReturn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>useNewAddress</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>, <argument><expr><call><name><name>addressesReturn</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>geocodingForMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>geocoderSelector</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>geocoderSelector</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_results_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>addressesText</name> <init>= <expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>addressesReturn</name>
                        <operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>addressesReturn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>CustomAddress</name></type> <name>address</name> <init>= <expr><call><name><name>addressesReturn</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>addressesText</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>address</name><operator>.</operator><name>getStringAddress</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name><name>addressesText</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addressesTemp</name> <init>= <expr><name>addressesReturn</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>geocoderSelector</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>addressesText</name></expr></argument>,
                        <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                            <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                <decl_stmt><decl><type><name>CustomAddress</name></type> <name>address</name> <init>= <expr><call><name><name>addressesTemp</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Chosen: "</literal> <operator>+</operator> <name><name>addressesText</name><index>[<expr><name>item</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>useNewAddress</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></function>
                        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alertGeocoder</name> <init>= <expr><call><name><name>geocoderSelector</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>alertGeocoder</name><operator>.</operator><name>setOnDismissListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnDismissListener</name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <type><specifier>public</specifier> <name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <expr_stmt><expr><call><name>restartTextBoxLocation</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>alertGeocoder</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in Main Fragment Geocoding callback: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>useNewAddress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isStartTextbox</name></decl></parameter>, <parameter><decl><type><name>CustomAddress</name></type> <name>newAddress</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>removeFocus</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isStartTextbox</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mIsStartLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>mIsEndLocationGeocodingCompleted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>geocodingForMarker</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>moveMarkerRelative</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>, <argument><expr><name>newAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>moveMarker</name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>, <argument><expr><name>newAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>changingTextBoxWithAutocomplete</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onMetadataRequestComplete</name><parameter_list>(<parameter><decl><type><name>GraphMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateUI</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>mCustomServerMetadata</name> <operator>=</operator> <name>metadata</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>double</name></type> <name>lowerLeftLatitude</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>lowerLeftLongitude</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>upperRightLatitude</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>upperRightLongitude</name> <init>= <expr><call><name><name>metadata</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Server</name></type> <name>selectedServer</name> <init>= <expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>bounds</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>lowerLeftLatitude</name></expr></argument>)</argument_list></call> <operator>+</operator>
                        <literal type="string">","</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>lowerLeftLongitude</name></expr></argument>)</argument_list></call> <operator>+</operator>
                        <literal type="string">","</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>upperRightLatitude</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>String</name>
                        <operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>upperRightLongitude</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>selectedServer</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>PreferenceManager</name>
                        <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_BOUNDS</name></name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"LowerLeft: "</literal> <operator>+</operator> <call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>lowerLeftLatitude</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>Double</name>
                        <operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>lowerLeftLongitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"UpperRight"</literal> <operator>+</operator> <call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>upperRightLatitude</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>Double</name>
                        <operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>upperRightLongitude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>addBoundariesRectangle</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><call><name>getLastLocation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>updateUI</name></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mCurrentLatLng</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>LocationUtil</name>
                            <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Changes the tiles used to display the map and sets max zoom level.
     *
     * @param overlayString tiles URL for custom tiles or description for
     *                      Google ones
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateOverlay</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>overlayString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tile_width</name> <init>= <expr><name><name>OTPApp</name><operator>.</operator><name>CUSTOM_MAP_TILE_SMALL_WIDTH</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tile_height</name> <init>= <expr><name><name>OTPApp</name><operator>.</operator><name>CUSTOM_MAP_TILE_SMALL_HEIGHT</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>overlayString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>overlayString</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>getOverlayString</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mSelectedTileOverlay</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mSelectedTileOverlay</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>mapType</name> <init>= <expr><name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_NORMAL</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_HYBRID</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mapType</name> <operator>=</operator> <name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_HYBRID</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mapType</name> <operator>=</operator> <name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_NORMAL</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_TERRAIN</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mapType</name> <operator>=</operator> <name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_TERRAIN</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>MAP_TILE_GOOGLE_SATELLITE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mapType</name> <operator>=</operator> <name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_SATELLITE</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setMapType</name></name><argument_list>(<argument><expr><name>mapType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mMaxZoomLevel</name> <operator>=</operator> <call><name><name>mMap</name><operator>.</operator><name>getMaxZoomLevel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_mapnik</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mMaxZoomLevel</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>tiles_mapnik_max_zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>overlayString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tiles_lyrk</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>mMaxZoomLevel</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>tiles_lyrk_max_zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tile_width</name> <operator>=</operator> <name><name>OTPApp</name><operator>.</operator><name>CUSTOM_MAP_TILE_BIG_WIDTH</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tile_height</name> <operator>=</operator> <name><name>OTPApp</name><operator>.</operator><name>CUSTOM_MAP_TILE_BIG_HEIGHT</name></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>mMaxZoomLevel</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>tiles_maquest_max_zoom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>setMapType</name></name><argument_list>(<argument><expr><name><name>GoogleMap</name><operator>.</operator><name>MAP_TYPE_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>CustomUrlTileProvider</name></type> <name>mTileProvider</name> <init>= <expr><operator>new</operator> <call><name>CustomUrlTileProvider</name><argument_list>(
                        <argument><expr><name>tile_width</name></expr></argument>,
                        <argument><expr><name>tile_height</name></expr></argument>, <argument><expr><name>overlayString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>mSelectedTileOverlay</name> <operator>=</operator> <call><name><name>mMap</name><operator>.</operator><name>addTileOverlay</name></name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>TileOverlayOptions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>tileProvider</name><argument_list>(<argument><expr><name>mTileProvider</name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>zIndex</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>CUSTOM_MAP_TILE_Z_INDEX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>mMap</name><operator>.</operator><name>getCameraPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><name>zoom</name> <operator>&gt;</operator> <name>mMaxZoomLevel</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>moveCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>zoomTo</name></name><argument_list>(<argument><expr><name>mMaxZoomLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns last location coordinates.
     * &lt;p&gt;
     * This is obtained from the Location Client if it's connected and returns
     * a valid Location. If not saved last location is provided.
     * &lt;p&gt;
     * On successful call to Location Client saved last location is updated.
     *
     * @return a LatLng object with the most updated user coordinates
     */</comment>
    <function><type><specifier>public</specifier> <name>LatLng</name></type> <name>getLastLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mGoogleApiClient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mGoogleApiClient</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Location</name></type> <name>loc</name> <init>= <expr><call><name><name>FusedLocationApi</name><operator>.</operator><name>getLastLocation</name></name><argument_list>(<argument><expr><name>mGoogleApiClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>loc</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLocation</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>loc</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>loc</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>mSavedLastLocation</name> <operator>=</operator> <name>mCurrentLocation</name></expr>;</expr_stmt>
                    <return>return <expr><name>mCurrentLocation</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mSavedLastLocation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>mSavedLastLocation</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block">/*
     * Called by Location Services if the attempt to
     * Location Services fails.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onConnectionFailed</name><parameter_list>(<parameter><decl><type><name>ConnectionResult</name></type> <name>connectionResult</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="block">/*
         * Google Play services can resolve some errors it detects.
         * If the error has a resolution, try sending an Intent to
         * start a Google Play services activity that can resolve
         * error.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>connectionResult</name><operator>.</operator><name>hasResolution</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <try>try <block>{<block_content>
                    <comment type="line">// Start an Activity that tries to resolve the error</comment>
                    <expr_stmt><expr><call><name><name>connectionResult</name><operator>.</operator><name>startResolutionForResult</name></name><argument_list>(
                            <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name><name>OTPApp</name><operator>.</operator><name>CONNECTION_FAILURE_RESOLUTION_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/*
                     * Thrown if Google Play services canceled the original
                     * PendingIntent
                     */</comment>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>IntentSender</name><operator>.</operator><name>SendIntentException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>errorPlay</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>errorPlay</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>play_services_error_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>play_services_error</name></name></expr></argument>)</argument_list></call>
                                <operator>+</operator> <call><name><name>connectionResult</name><operator>.</operator><name>getErrorCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setNeutralButton</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Called by Google Play Services when this app is connected
     *
     * @param connectionHint
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onConnected</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>connectionHint</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Location</name></type> <name>mCurrentLocation</name> <init>= <expr><call><name><name>FusedLocationApi</name><operator>.</operator><name>getLastLocation</name></name><argument_list>(<argument><expr><name>mGoogleApiClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>autodetectServerTriggered</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>mMapFailed</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mCurrentLocation</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>savedLatitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>savedLongitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name><name>distance</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>distance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>mSavedLastLocationCheckedForServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>savedLatitude</name> <operator>=</operator> <name><name>mSavedLastLocationCheckedForServer</name><operator>.</operator><name>latitude</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>savedLongitude</name> <operator>=</operator> <name><name>mSavedLastLocationCheckedForServer</name><operator>.</operator><name>longitude</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>LatLng</name></type> <name>mCurrentLatLng</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>mCurrentLocation</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>mCurrentLocation</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>Location</name><operator>.</operator><name>distanceBetween</name></name><argument_list>(<argument><expr><name>savedLatitude</name></expr></argument>, <argument><expr><name>savedLongitude</name></expr></argument>, <argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>latitude</name></name></expr></argument>,
                        <argument><expr><name><name>mCurrentLatLng</name><operator>.</operator><name>longitude</name></name></expr></argument>, <argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkServersAreUpdated</name><argument_list>()</argument_list></call> <operator>||</operator> <name>mNewAppVersion</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>runAutoDetectServer</name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>mNeedToRunAutoDetect</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>autodetectServerTriggered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>runAutoDetectServer</name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

                        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                                <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>LocationUtil</name>
                                <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>,
                                        <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
                                <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>mSavedLastLocationCheckedForServer</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>distance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>
                                <operator>&gt;</operator> <name><name>OTPApp</name><operator>.</operator><name>COORDINATES_IMPORTANT_DIFFERENCE</name></name><operator>)</operator><operator>)</operator>
                                <operator>||</operator> <operator>(</operator><name>mSavedLastLocationCheckedForServer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>autodetectServerTriggered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>runAutoDetectServer</name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>autodetectServerTriggered</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>runAutoDetectServer</name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>autodetectServerTriggered</name></expr>)</condition><block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>mAppStarts</name></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>Server</name></type> <name>selectedServer</name> <init>= <expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>selectedServer</name><operator>.</operator><name>areBoundsSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name><name>LocationUtil</name>
                                        <operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                            <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>,
                                                    <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                            <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>setMarker</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getServerCenter</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>animateCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name>
                                        <operator>.</operator><name>newLatLngZoom</name></name><argument_list>(<argument><expr><name>mCurrentLatLng</name></expr></argument>,
                                                <argument><expr><call><name>getServerInitialZoom</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name>mAppStarts</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>mNewAppVersion</name>
                    <operator>||</operator> <name>mNeedToUpdateServersList</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>runAutoDetectServerNoLocation</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>checkServersAreUpdated</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><call><name><name>ServersDataSource</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>someDaysBefore</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>someDaysBefore</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>OTPApp</name><operator>.</operator><name>EXPIRATION_DAYS_FOR_SERVER_LIST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Long</name></type> <name>serversUpdateDate</name> <init>= <expr><call><name><name>dataSource</name><operator>.</operator><name>getMostRecentDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>serversUpdateDate</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>someDaysBefore</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call>
                <operator>&gt;</operator> <name>serversUpdateDate</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onConnectionSuspended</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Draws rectangle in the map to represent the bounds, using selected
     * server fields for lower left and upper right coordinates.
     *
     * @param server from which coordinates will be pulled
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addBoundariesRectangle</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name></type> <name>bounds</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bounds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>server</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PolylineOptions</name></type> <name>boundariesPolylineOptions</name> <init>= <expr><operator>new</operator> <call><name>PolylineOptions</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>color</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>GRAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>mBoundariesPolyline</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mBoundariesPolyline</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mBoundariesPolyline</name> <operator>=</operator> <call><name><name>mMap</name><operator>.</operator><name>addPolyline</name></name><argument_list>(<argument><expr><name>boundariesPolylineOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getServerInitialZoom</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isZoomSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>s</name><operator>.</operator><name>getInitialZoom</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>OTPApp</name><operator>.</operator><name>defaultInitialZoomLevel</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>LatLng</name></type> <name>getServerCenter</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isCenterSet</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCenterLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getCenterLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getGeometricalCenterLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getGeometricalCenterLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCameraChange</name><parameter_list>(<parameter><decl><type><name>CameraPosition</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>position</name><operator>.</operator><name>zoom</name></name> <operator>&gt;</operator> <name>mMaxZoomLevel</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>mMapFailed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mMap</name><operator>.</operator><name>moveCamera</name></name><argument_list>(<argument><expr><call><name><name>CameraUpdateFactory</name><operator>.</operator><name>zoomTo</name></name><argument_list>(<argument><expr><name>mMaxZoomLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onDateComplete</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>tripDate</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>arriveBy</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mTripDate</name></name> <operator>=</operator> <name>tripDate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mArriveBy</name></name> <operator>=</operator> <name>arriveBy</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tripTime</name> <init>= <expr><call><name><name>tripDate</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>arriveBy</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>processRequestTrip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>tripTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onRangeSeekBarValuesChanged</name><parameter_list>(<parameter><decl><type><name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>bar</name></decl></parameter>,
            <parameter><decl><type><name>Double</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>Double</name></type> <name>maxValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MIN_VALUE</name></name></expr></argument>, <argument><expr><call><name><name>minValue</name><operator>.</operator><name>floatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_LAST_BIKE_TRIANGLE_MAX_VALUE</name></name></expr></argument>, <argument><expr><call><name><name>maxValue</name><operator>.</operator><name>floatValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mBikeTriangleMinValue</name> <operator>=</operator> <name>minValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBikeTriangleMaxValue</name> <operator>=</operator> <name>maxValue</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>bikeParam</name> <init>= <expr><call><name><name>minValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>maxValue</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>bikeParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListLoad</name><parameter_list>(<parameter><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>removeBikeStations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>mBtnModeRentedBike</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bikeRentalStationList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BikeRentalStation</name></argument>&gt;</argument_list></name></type> <name>listOfBikeRentalStations</name> <init>= <expr><name><name>bikeRentalStationList</name><operator>.</operator><name>stations</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>listOfBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>listOfBikeRentalStations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>mBikeRentalStations</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>BikeRentalStationInfo</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>listOfBikeRentalStations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>MarkerOptions</name></type> <name>bikeRentalStationMarkerOption</name> <init>= <expr><operator>new</operator> <call><name>MarkerOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>Drawable</name></type> <name>drawable</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>parking_bicycle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>drawable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>BitmapDrawable</name></type> <name>bitmapDrawable</name> <init>= <expr><operator>(</operator><name>BitmapDrawable</name><operator>)</operator> <call><name><name>drawable</name><operator>.</operator><name>getCurrent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>bitmapDrawable</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>bikeRentalStationMarkerOption</name><operator>.</operator><name>icon</name></name><argument_list>(
                                <argument><expr><call><name><name>BitmapDescriptorFactory</name><operator>.</operator><name>fromBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error obtaining drawable to add bike rental icons to the map"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                    <for>for <control>(<init><decl><type><name>BikeRentalStation</name></type> <name>bikeRentalStation</name> <range>: <expr><name>listOfBikeRentalStations</name></expr></range></decl></init>)</control><block>{<block_content>
                        <decl_stmt><decl><type><name>LatLng</name></type> <name>position</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><name><name>bikeRentalStation</name><operator>.</operator><name>y</name></name></expr></argument>,
                                <argument><expr><name><name>bikeRentalStation</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>bikeRentalStationMarkerOption</name><operator>.</operator><name>position</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bikeRentalStationMarkerOption</name><operator>.</operator><name>title</name></name><argument_list>(<argument><expr><name><name>bikeRentalStation</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>bikeRentalStationMarkerOption</name><operator>.</operator><name>snippet</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_bike_rental_available_bikes</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                                <name><name>bikeRentalStation</name><operator>.</operator><name>bikesAvailable</name></name> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_bike_rental_available_spaces</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                                <name><name>bikeRentalStation</name><operator>.</operator><name>spacesAvailable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mMapFailed</name></expr>)</condition><block>{<block_content>
                            <decl_stmt><decl><type><name>Marker</name></type> <name>bikeRentalStationMarker</name> <init>= <expr><call><name><name>mMap</name><operator>.</operator><name>addMarker</name></name><argument_list>(<argument><expr><name>bikeRentalStationMarkerOption</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>BikeRentalStationInfo</name></type> <name>bikeRentalStationInfo</name> <init>= <expr><operator>new</operator> <call><name>BikeRentalStationInfo</name><argument_list>(<argument><expr><name>position</name></expr></argument>,
                                    <argument><expr><name><name>bikeRentalStation</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name><name>mBikeRentalStations</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>bikeRentalStationMarker</name></expr></argument>, <argument><expr><name>bikeRentalStationInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_bike_rental_load_request_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListUpdate</name><parameter_list>(<parameter><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>bikeRentalStationList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BikeRentalStation</name></argument>&gt;</argument_list></name></type> <name>listOfBikeRentalStations</name> <init>= <expr><name><name>bikeRentalStationList</name><operator>.</operator><name>stations</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>listOfBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>listOfBikeRentalStations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>
                        <operator>&amp;&amp;</operator> <operator>(</operator><name>mBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mBikeRentalStations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>BikeRentalStation</name></type> <name>bikeRentalStation</name> <range>: <expr><name>listOfBikeRentalStations</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>BikeRentalStationInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mBikeRentalStations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>bikeRentalStation</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSnippet</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_bike_rental_available_bikes</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                                        <name><name>bikeRentalStation</name><operator>.</operator><name>bikesAvailable</name></name> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_bike_rental_available_spaces</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                                        <name><name>bikeRentalStation</name><operator>.</operator><name>spacesAvailable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isInfoWindowShown</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>showInfoWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_bike_rental_load_request_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>removeBikeStations</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListFail</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>listenForBikeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>listenForBikeUpdates</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AlarmReceiver</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mIntentFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAlarmMgr</name><operator>.</operator><name>setInexactRepeating</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>ELAPSED_REALTIME</name></name></expr></argument>,
                    <argument><expr><name><name>OTPApp</name><operator>.</operator><name>DEFAULT_UPDATE_INTERVAL_BIKE_RENTAL</name></name></expr></argument>,
                    <argument><expr><name><name>OTPApp</name><operator>.</operator><name>DEFAULT_UPDATE_INTERVAL_BIKE_RENTAL</name></name></expr></argument>, <argument><expr><name>mAlarmIntentBikeRentalUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mApplicationContext</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>queryBroadcastReceivers</name><argument_list>(<argument><expr><name>mBikeRentalUpdateIntent</name></expr></argument>, <argument><expr><call><name><name>mBikeRentalUpdateIntent</name><operator>.</operator><name>getFlags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>mAlarmReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsAlarmTripTimeUpdateActive</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>mAlarmReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mAlarmMgr</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>mAlarmIntentBikeRentalUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeBikeStations</name><parameter_list>()</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mBikeRentalStations</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>BikeRentalStationInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mBikeRentalStations</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>mBikeRentalStations</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>listenForTripTimeUpdates</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeToStartUpdates</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>enable</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>Calendar</name></type> <name>calTimeToStartUpdates</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>calTimeToStartUpdates</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>timeToStartUpdates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>calTimeToStartUpdates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>timeToStartUpdatesProcessed</name> <init>= <expr><call><name><name>calTimeToStartUpdates</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>timeToStartUpdatesProcessed</name> <operator>&lt;</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>timeToStartUpdatesProcessed</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AlarmReceiver</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mIntentFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAlarmMgr</name><operator>.</operator><name>setInexactRepeating</name></name><argument_list>(<argument><expr><name><name>AlarmManager</name><operator>.</operator><name>RTC</name></name></expr></argument>, <argument><expr><name>timeToStartUpdatesProcessed</name></expr></argument>,
                    <argument><expr><name><name>OTPApp</name><operator>.</operator><name>DEFAULT_UPDATE_INTERVAL_TRIP_TIME</name></name></expr></argument>, <argument><expr><name>mAlarmIntentTripTimeUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>mApplicationContext</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>queryBroadcastReceivers</name><argument_list>(<argument><expr><name>mTripTimeUpdateIntent</name></expr></argument>, <argument><expr><call><name><name>mTripTimeUpdateIntent</name><operator>.</operator><name>getFlags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mIsAlarmBikeRentalUpdateActive</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>mAlarmReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mAlarmMgr</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><name>mAlarmIntentTripTimeUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onUpdateTripTimesComplete</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>timesUpdatesForTrips</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>itineraries</name> <operator>=</operator> <call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentItineraryList</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>timesUpdatesForTrips</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>timesUpdatesForTrips</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>lastLegTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Leg</name></type> <name>lastLeg</name> <init>= <expr><call><name><name>itineraries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>legs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>Itinerary</name></type> <name>itinerary</name> <range>: <expr><name>itineraries</name></expr></range></decl></init>)</control><block>{<block_content>
                        <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>itinerary</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control><block>{<block_content>
                            <decl_stmt><decl><type><name>long</name></type> <name>legEndTimeLong</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>legEndTimeLong</name> <operator>&gt;</operator> <name>lastLegTime</name></expr>)</condition><block>{<block_content>
                                <expr_stmt><expr><name>lastLegTime</name> <operator>=</operator> <name>legEndTimeLong</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>lastLeg</name> <operator>=</operator> <name>leg</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></type> <name>tripsTimesUpdates</name></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tripsTimesUpdates</name>
                                    <operator>=</operator> <call><name><name>timesUpdatesForTrips</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>agencyId</name></name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                                    <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                                <decl_stmt><decl><type><name>TripTimeShort</name></type> <name>firstStopUpdate</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>TripTimeShort</name></type> <name>lastStopUpdate</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                                <for>for <control>(<init><decl><type><name>TripTimeShort</name></type> <name>tripTimeUdapteForStop</name> <range>: <expr><name>tripsTimesUpdates</name></expr></range></decl></init>)</control><block>{<block_content>
                                    <if_stmt><if>if <condition>(<expr><call><name><name>tripTimeUdapteForStop</name><operator>.</operator><name>stopId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>agencyId</name></name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>from</name><operator>.</operator><name>stopCode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                                        <expr_stmt><expr><name>firstStopUpdate</name> <operator>=</operator> <name>tripTimeUdapteForStop</name></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                    <if_stmt><if>if <condition>(<expr><call><name><name>tripTimeUdapteForStop</name><operator>.</operator><name>stopId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>agencyId</name></name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>stopCode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                                        <expr_stmt><expr><name>lastStopUpdate</name> <operator>=</operator> <name>tripTimeUdapteForStop</name></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></for>
                                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>firstStopUpdate</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lastStopUpdate</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><block>{<block_content>
                                    <decl_stmt><decl><type><name>int</name></type> <name>legsUpdated</name> <init>= <expr><call><name>updateLeg</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><name>firstStopUpdate</name></expr></argument>, <argument><expr><name>lastStopUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>legsUpdated</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                                        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mModeMarkers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                                            <if_stmt><if>if <condition>(<expr><call><name><name>leg</name><operator>.</operator><name>tripId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTripId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                                                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSnippet</name><argument_list>(<argument><expr><call><name>generateModeMarkerSnippet</name><argument_list>(<argument><expr><name>leg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDelayInSeconds</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                <if_stmt><if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isInfoWindowShown</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                                                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>showInfoWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                                </block_content>}</block></if></if_stmt>
                                            </block_content>}</block></if></if_stmt>
                                        </block_content>}</block></for>
                                        <expr_stmt><expr><call><name>showNotification</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><name>legsUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><call><name>isTripOver</name><argument_list>(<argument><expr><name>lastLeg</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><call><name>listenForTripTimeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                            <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_realtime_updates_fail</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>listenForTripTimeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isTripOver</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calTimeToStopUpdates</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calTimeToStopUpdates</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calTimeToStopUpdates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Calendar</name></type> <name>actualTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>actualTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actualTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>actualTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>calTimeToStopUpdates</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Updates leg fields with departure and arrival new trip times.
     *
     * @param leg the leg to update
     * @param departureTripTimesUpdate departure new trip times
     * @param arrivalTripTimesUpdate arrival new trip times
     * @return 0 if none are updated, 1 if departure is updated, 2 if arrival is updated, 3 if both
     * are updated
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>updateLeg</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>, <parameter><decl><type><name>TripTimeShort</name></type> <name>departureTripTimesUpdate</name></decl></parameter>,
                              <parameter><decl><type><name>TripTimeShort</name></type> <name>arrivalTripTimesUpdate</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>updatedLegs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name> <operator>!=</operator> <name><name>departureTripTimesUpdate</name><operator>.</operator><name>departureDelay</name></name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>oldDepartureTime</name> <init>= <expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Long</name></type> <name>scheduledStartTime</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>leg</name><operator>.</operator><name>departureDelay</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name> <operator>=</operator> <name><name>departureTripTimesUpdate</name><operator>.</operator><name>departureDelay</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><name>scheduledStartTime</name> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>departureDelay</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>newDepartureTime</name> <init>= <expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oldDepartureTime</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newDepartureTime</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>updatedLegs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name> <operator>!=</operator> <name><name>arrivalTripTimesUpdate</name><operator>.</operator><name>arrivalDelay</name></name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>oldArrivalTime</name> <init>= <expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Long</name></type> <name>scheduledEndTime</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name> <operator>=</operator> <name><name>arrivalTripTimesUpdate</name><operator>.</operator><name>arrivalDelay</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><name>scheduledEndTime</name> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>newArrivalTime</name> <init>= <expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>oldArrivalTime</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newArrivalTime</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>updatedLegs</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>updatedLegs</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><name>updatedLegs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>updatedLegs</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>generateDelayText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>longFormat</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>delayText</name> <init>= <expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>delay</name></expr></argument>, <argument><expr><name>longFormat</name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>delayText</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_on_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>delayText</name> <operator>+=</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_late_arrival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><name>delayText</name> <operator>=</operator> <call><name><name>delayText</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>delayText</name> <operator>+=</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_early_arrival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>delayText</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>showNotification</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>legsUpdated</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentItinerary</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>leg</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>delayText</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>InboxStyle</name></name></type> <name>inboxStyle</name> <init>=
                <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>InboxStyle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>legsUpdated</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>delayText</name> <operator>=</operator> <call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                    <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_origin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                    <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_origin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal>
                    <operator>+</operator> <name><name>leg</name><operator>.</operator><name>from</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>legsUpdated</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>delayText</name> <operator>=</operator> <call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                    <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                    <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_destination</name></name></expr></argument>)</argument_list></call> <operator>+</operator><literal type="string">", "</literal>
                    <operator>+</operator> <name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>legsUpdated</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name> <operator>==</operator> <name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>delayText</name> <operator>=</operator> <call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_origin</name></name></expr></argument>)</argument_list></call>  <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_two_delays_connector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_origin</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>from</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_destination</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>delayText</name> <operator>=</operator>  <call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_origin</name></name></expr></argument>)</argument_list></call>  <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_two_delays_connector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator>
                        <call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>(<argument><expr><call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <name><name>leg</name><operator>.</operator><name>from</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>inboxStyle</name><operator>.</operator><name>addLine</name></name><argument_list>( <argument><expr><call><name>generateDelayText</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                        <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_stop_name_conector</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <name><name>leg</name><operator>.</operator><name>to</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <return>return;</return>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>notificationIntentOpenApp</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_OPEN_APP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notificationIntentOpenApp</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>notificationOpenAppPendingIntent</name> <init>= <expr><call><name><name>PendingIntent</name>
                <operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><name>notificationIntentOpenApp</name></expr></argument>,
                        <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>notificationIntentDismissUpdates</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_DISMISS_UPDATES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notificationIntentDismissUpdates</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PendingIntent</name></type> <name>notificationPendingIntentDismissUpdates</name> <init>= <expr><call><name><name>PendingIntent</name>
                <operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                        <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><name>notificationIntentDismissUpdates</name></expr></argument>,
                        <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>mBuilder</name> <init>=
                <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>notification_opentripplanner</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getRouteShortNameSafe</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>routeShortName</name></name></expr></argument>,
                                <argument><expr><name><name>leg</name><operator>.</operator><name>routeLongName</name></name></expr></argument>, <argument><expr><name>mApplicationContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setContentText</name><argument_list>(<argument><expr><name>delayText</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setLargeIcon</name><argument_list>(<argument><expr><call><name><name>BitmapFactory</name>
                                <operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call>
                                                <operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>DirectionsGenerator</name>
                                                <operator>.</operator><name>getNotificationIcon</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TraverseModeSet</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setPriority</name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>PRIORITY_MAX</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><name>notificationOpenAppPendingIntent</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>addAction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_action_cancel</name></name></expr></argument>,
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_disable_updates_button</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>notificationPendingIntentDismissUpdates</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mBuilder</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name>inboxStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>NotificationManager</name></type> <name>notificationManager</name> <init>=
                <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name><name>mApplicationContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><call><name><name>mBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>notification</name><operator>.</operator><name>defaults</name></name> <operator>=</operator> <name><name>Notification</name><operator>.</operator><name>DEFAULT_ALL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>notification</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>Notification</name><operator>.</operator><name>FLAG_AUTO_CANCEL</name></name> <operator>|</operator> <name><name>Notification</name><operator>.</operator><name>FLAG_SHOW_LIGHTS</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>notificationID</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>notificationManager</name><operator>.</operator><name>notify</name></name><argument_list>(<argument><expr><name>notificationID</name></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Checks to see if this version of OTP Android is higher than the last executed version,
     * and perform any cleanup necessary.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkAppVersion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageManager</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>newVersionCode</name> <init>= <expr><name><name>packageInfo</name><operator>.</operator><name>versionCode</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>oldVersionCode</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_APP_VERSION</name></name></expr></argument>, <argument><expr><name>newVersionCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_APP_VERSION</name></name></expr></argument>, <argument><expr><name>newVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mNewAppVersion</name> <operator>=</operator> <name>newVersionCode</name> <operator>!=</operator> <name>oldVersionCode</name></expr>;</expr_stmt>

            <comment type="block" format="javadoc">/**
             * Special handling for introduction of PREFERENCE_KEY_APP_VERSION - see #309
             * Otherwise, mNewVersion will be false the first time we execute version_code 13
             * when installed as an update to version_code 12.
             */</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>executedVersion13</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_EXECUTED_VERSION_CODE_13</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>mNewAppVersion</name> <operator>||</operator> <operator>!</operator><name>executedVersion13</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Updating from app version "</literal> <operator>+</operator> <name>oldVersionCode</name> <operator>+</operator> <literal type="string">" to "</literal> <operator>+</operator>
                        <name>newVersionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Erase selected server, so server selection is run after an app update (#309)</comment>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// We've executed version_code 13 or higher once, so set the preference</comment>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_EXECUTED_VERSION_CODE_13</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>openModeMarker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tripId</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mModeMarkers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>tripId</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>mModeMarkers</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>tripId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTripId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>showInfoWindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onUpdateTripTimesFail</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>listenForTripTimeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <class><specifier>public</specifier> class <name>AlarmReceiver</name> <super_list><extends>extends <super><name>BroadcastReceiver</name></super></extends></super_list><block>{

        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>NotificationManager</name></type> <name>notificationManager</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_BIKE_RENTAL_ACTION</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>BikeRentalLoad</name></type> <name>bikeRentalLoad</name> <init>= <expr><operator>new</operator> <call><name>BikeRentalLoad</name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bikeRentalLoad</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBaseURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_UPDATE_TRIP_TIME_ACTION</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>RequestTimesForTrips</name></type> <name>requestTimesForTrips</name> <init>=
                        <expr><operator>new</operator> <call><name>RequestTimesForTrips</name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>MainFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>legsToUpdate</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>Itinerary</name></type> <name>itinerary</name> <range>: <expr><call><name>getFragmentListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCurrentItineraryList</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>
                    <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>itinerary</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control><block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>realTime</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isTransit</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                            <expr_stmt><expr><call><name><name>legsToUpdate</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>agencyId</name></name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>tripId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>legsToUpdate</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mOTPApp</name><operator>.</operator><name>getSelectedServer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBaseURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>legsToUpdateArray</name> <init>= <expr><call><name><name>legsToUpdate</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>legsToUpdate</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>requestTimesForTrips</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>legsToUpdateArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_OPEN_APP</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>Intent</name></type> <name>activityIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>, <argument><expr><name><name>MyActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>activityIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_RESUME_APP_WITH_TRIP_ID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>activityIntent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>activityIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>, <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mApplicationContext</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>activityIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>INTENT_NOTIFICATION_ACTION_DISMISS_UPDATES</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>notificationManager</name> <operator>=</operator>
                        <operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name><name>mApplicationContext</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>notificationManager</name><operator>.</operator><name>cancelAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name><name>notificationManager</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>
                            <operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_INTENT_TRIP_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mApplicationContext</name></expr></argument>,
                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>notification_disable_updates_info</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>listenForTripTimeUpdates</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onServerCheckerComplete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCustomServer</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isAutoDetected</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isWorking</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>updateSelectedServer</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>GraphMetadata</name></type> <name>getmCustomServerMetadata</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mCustomServerMetadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setmCustomServerMetadata</name><parameter_list>(<parameter><decl><type><name>GraphMetadata</name></type> <name>mCustomServerMetadata</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mCustomServerMetadata</name></name> <operator>=</operator> <name>mCustomServerMetadata</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/BikeRentalLoadCompleteListener.java" hash="dc9c50e704027e6b010d6065d0feb57f0b33946f"><comment type="block">/*
 * Copyright 2014 Vreixo Gonzalez on 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>bike_rental</name><operator>.</operator><name>BikeRentalStationList</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<interface><specifier>public</specifier> interface <name>BikeRentalLoadCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListLoad</name><parameter_list>(<parameter><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationCollection</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListUpdate</name><parameter_list>(<parameter><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationCollection</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onBikeRentalStationListFail</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/DateCompleteListener.java" hash="473294d6593fe3573573d22e2a4dbae0fbb6c450"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<interface><specifier>public</specifier> interface <name>DateCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onDateComplete</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>tripDate</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>arriveBy</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/MetadataRequestCompleteListener.java" hash="3df07d9e71aa5bae5b85c821cdbbd3902b9d2f77"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>GraphMetadata</name></name>;</import>

<interface><specifier>public</specifier> interface <name>MetadataRequestCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onMetadataRequestComplete</name><parameter_list>(<parameter><decl><type><name>GraphMetadata</name></type> <name>metadata</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateUI</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/OTPGeocodingListener.java" hash="743de66070253312747f9eac3ef0d1ccaa2acb37"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>CustomAddress</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<interface><specifier>public</specifier> interface <name>OTPGeocodingListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onOTPGeocodingComplete</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isStartTextbox</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addressesReturn</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/OtpFragment.java" hash="12cb7bb510b8e0beaf87f795366039b016b7ea49"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>OTPBundle</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An interface used to define callbacks and getter methods that are used by fragments in OTP
 * Android
 *
 * @author Khoa Tran
 */</comment>

<interface><specifier>public</specifier> interface <name>OtpFragment</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onItinerariesLoaded</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onItinerarySelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>animateCamera</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>getCurrentItinerary</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>getCurrentItineraryList</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentItineraryIndex</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onSwitchedToDirectionFragment</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onSwitchedToMainFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>f</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>OTPBundle</name></type> <name>getOTPBundle</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setOTPBundle</name><parameter_list>(<parameter><decl><type><name>OTPBundle</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentRequestString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>String</name></type> <name>getCurrentRequestString</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>zoomToLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>latLng</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>setButtonStartLocation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isButtonStartLocation</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/RequestTimesForTripsCompleteListener.java" hash="f2b6f1036d166b465c32758df60e5df96014994e"><comment type="block">/*
 * Copyright 2014 Vreixo Gonzalez on 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>index</name><operator>.</operator><name>model</name><operator>.</operator><name>TripTimeShort</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<interface><specifier>public</specifier> interface <name>RequestTimesForTripsCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onUpdateTripTimesComplete</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>timesUpdatesForTrips</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onUpdateTripTimesFail</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/ServerCheckerCompleteListener.java" hash="ae36b9ae5fd191ff333995bab18c1e25a9ca922a"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<interface><specifier>public</specifier> interface <name>ServerCheckerCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onServerCheckerComplete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCustomServer</name></decl></parameter>,
                                        <parameter><decl><type><name>boolean</name></type> <name>isAutoDetected</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isWorking</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/ServerSelectorCompleteListener.java" hash="bc12c365b553af9f2b69507ed31f427c84d51336"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Interface that is used to list for the event of an OTP
 * server being selected, either manually or automatically
 *
 * @author Khoa Tran
 */</comment>

<interface><specifier>public</specifier> interface <name>ServerSelectorCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onServerSelectorComplete</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>server</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/listeners/TripRequestCompleteListener.java" hash="7d70959b5d752cbfdab476b847091bd154fea794"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<interface><specifier>public</specifier> interface <name>TripRequestCompleteListener</name> <block>{

    <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onTripRequestComplete</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>currentRequestString</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/maps/CustomUrlTileProvider.java" hash="0974be4f896bf97054ce6c54cbc4357a55e4ba88"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>maps</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>UrlTileProvider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<class><specifier>public</specifier> class <name>CustomUrlTileProvider</name> <super_list><extends>extends <super><name>UrlTileProvider</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>baseUrl</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CustomUrlTileProvider</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseUrl</name></name> <operator>=</operator> <name>url</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>URL</name></type> <name>getTileUrl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zoom</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <try>try <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>baseUrl</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"{z}"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>zoom</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"{x}"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"{y}"</literal></expr></argument>, <argument><expr><literal type="string">""</literal> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/ArriveBySpinnerItem.java" hash="25ed98934019d056aa16be8e68677cce0aefd5df"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<class><specifier>public</specifier> class <name>ArriveBySpinnerItem</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>displayName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>arriveBy</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ArriveBySpinnerItem</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>ArriveBySpinnerItem</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>arriveBy</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arriveBy</name></name> <operator>=</operator> <name>arriveBy</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDisplayName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>arriveBy</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>arriveBy</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>arriveBy</name></name> <operator>=</operator> <name>arriveBy</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/Direction.java" hash="36c04929f04086324e149cc45c7f6c965004e9c2"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>Direction</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>icon</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>directionIndex</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>directionText</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>service</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>agency</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>placeAndHeadsign</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>extra</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>oldTime</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>CharSequence</name></type> <name>newTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isTransit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>realTimeInfo</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Direction</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Direction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>placeAndHeadsign</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>oldTime</name></decl></parameter>,
                     <parameter><decl><type><name>CharSequence</name></type> <name>newTime</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isTransit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>placeAndHeadsign</name></name> <operator>=</operator> <name>placeAndHeadsign</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldTime</name></name> <operator>=</operator> <name>oldTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newTime</name></name> <operator>=</operator> <name>newTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTransit</name></name> <operator>=</operator> <name>isTransit</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Direction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>directionText</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directionText</name></name> <operator>=</operator> <name>directionText</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the icon
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIcon</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>icon</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param icon the icon to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIcon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getService</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>service</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setService</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the subDirections
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>getSubDirections</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>subDirections</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param subDirections the subDirections to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubDirections</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subDirections</name></name> <operator>=</operator> <name>subDirections</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDirectionIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>directionIndex</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirectionIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>directionIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directionIndex</name></name> <operator>=</operator> <name>directionIndex</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getOldTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>oldTime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOldTime</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>oldTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>oldTime</name></name> <operator>=</operator> <name>oldTime</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getNewTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>newTime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNewTime</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>newTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newTime</name></name> <operator>=</operator> <name>newTime</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getPlaceAndHeadsign</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>placeAndHeadsign</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlaceAndHeadsign</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>placeAndHeadsign</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>placeAndHeadsign</name></name> <operator>=</operator> <name>placeAndHeadsign</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isTransit</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>isTransit</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTransit</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isTransit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isTransit</name></name> <operator>=</operator> <name>isTransit</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRealTimeInfo</name><parameter_list>()</parameter_list> <block>{<block_content>

        <return>return <expr><name>realTimeInfo</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRealTimeInfo</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>realTimeInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>realTimeInfo</name></name> <operator>=</operator> <name>realTimeInfo</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getDirectionText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>directionText</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirectionText</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>directionText</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directionText</name></name> <operator>=</operator> <name>directionText</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getAgency</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>agency</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAgency</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>agency</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>agency</name></name> <operator>=</operator> <name>agency</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getExtra</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>extra</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtra</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>extra</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/OTPBundle.java" hash="9343b4e4e774ddb7dbdf4a3c929b303fbca70b9a"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>OTPBundle</name> <super_list><implements>implements <super><name>Serializable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toText</name></decl>, <decl><type ref="prev"/><name>fromText</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>optimization</name></decl>, <decl><type ref="prev"/><name>travelMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>LatLng</name></type> <name>startLocation</name></decl>, <decl><type ref="prev"/><name>endLocation</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>currentItinerary</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraryList</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentItineraryIndex</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>currentStepIndex</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fromInfoWindow</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OTPBundle</name><parameter_list>()</parameter_list> <block>{<block_content>

    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the toText
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>toText</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param toText the toText to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>toText</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>toText</name></name> <operator>=</operator> <name>toText</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the fromText
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFromText</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fromText</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param fromText the fromText to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFromText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fromText</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromText</name></name> <operator>=</operator> <name>fromText</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the optimization
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getOptimization</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>optimization</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param optimization the optimization to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptimization</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>optimization</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optimization</name></name> <operator>=</operator> <name>optimization</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the travelMode
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTravelMode</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>travelMode</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param travelMode the travelMode to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTravelMode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>travelMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>travelMode</name></name> <operator>=</operator> <name>travelMode</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the startLocation
     */</comment>
    <function><type><specifier>public</specifier> <name>LatLng</name></type> <name>getStartLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>startLocation</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param startLocation the startLocation to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>startLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startLocation</name></name> <operator>=</operator> <name>startLocation</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the endLocation
     */</comment>
    <function><type><specifier>public</specifier> <name>LatLng</name></type> <name>getEndLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>endLocation</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param endLocation the endLocation to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>endLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endLocation</name></name> <operator>=</operator> <name>endLocation</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the currentItinerary
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>getCurrentItinerary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentItinerary</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param currentItinerary the currentItinerary to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentItinerary</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>currentItinerary</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentItinerary</name></name> <operator>=</operator> <name>currentItinerary</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the itineraryList
     */</comment>
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>getItineraryList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>itineraryList</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param itineraryList the itineraryList to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItineraryList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraryList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>itineraryList</name></name> <operator>=</operator> <name>itineraryList</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the currentItineraryIndex
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentItineraryIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentItineraryIndex</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param currentItineraryIndex the currentItineraryIndex to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentItineraryIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>currentItineraryIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentItineraryIndex</name></name> <operator>=</operator> <name>currentItineraryIndex</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCurrentStepIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>currentStepIndex</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentStepIndex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>currentStepIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentStepIndex</name></name> <operator>=</operator> <name>currentStepIndex</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isFromInfoWindow</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>fromInfoWindow</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFromInfoWindow</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>fromInfoWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromInfoWindow</name></name> <operator>=</operator> <name>fromInfoWindow</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/OptimizeSpinnerItem.java" hash="3c284f1db182810cc94b3aa34b3b34369de079a8"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>OptimizeType</name></name>;</import>

<class><specifier>public</specifier> class <name>OptimizeSpinnerItem</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>displayName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OptimizeType</name></type> <name>optimizeType</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OptimizeSpinnerItem</name><parameter_list>()</parameter_list> <block>{<block_content>

    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>OptimizeSpinnerItem</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>, <parameter><decl><type><name>OptimizeType</name></type> <name>optimizeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optimizeType</name></name> <operator>=</operator> <name>optimizeType</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDisplayName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>OptimizeType</name></type> <name>getOptimizeType</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>optimizeType</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOptimizeType</name><parameter_list>(<parameter><decl><type><name>OptimizeType</name></type> <name>optimizeType</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>optimizeType</name></name> <operator>=</operator> <name>optimizeType</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/Server.java" hash="1feca48761f23dcfa9050566ed38ad3ecbe32bd3"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Location</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ServerListParsingException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Modified by Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>Server</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>date</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>region</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>baseURL</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>bounds</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>center</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>zoom</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>contactName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>contactEmail</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerLeftLatitude</name></decl>, <decl><type ref="prev"/><name>lowerLeftLongitude</name></decl>, <decl><type ref="prev"/><name>upperRightLatitude</name></decl>, <decl><type ref="prev"/><name>upperRightLongitude</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>geometricalCenterLatitude</name></decl>, <decl><type ref="prev"/><name>geometricalCenterLongitude</name></decl>;</decl_stmt>  <comment type="line">//for Google Places</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>centerLatitude</name></decl>, <decl><type ref="prev"/><name>centerLongitude</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>initialZoom</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>boundsSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>offersBikeRental</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>areBoundsSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>boundsSet</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>centerSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCenterSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>centerSet</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>zoomSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isZoomSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>zoomSet</name></expr>;</return>
    </block_content>}</block></function>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>s</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setId</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDate</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRegion</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseURL</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// do extra string processing to set lowerleft and upperright</comment>
        <expr_stmt><expr><call><name>setCenter</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setZoom</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getZoom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLanguage</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getLanguage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactName</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getContactName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactEmail</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getContactEmail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOffersBikeRental</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseURL</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>bounds</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contactName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contactEmail</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zoom</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>offersBikeRental</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDate</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRegion</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseURL</name><argument_list>(<argument><expr><name>baseURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// do extra string processing to set lowerleft and upperright</comment>
        <expr_stmt><expr><call><name>setCenter</name><argument_list>(<argument><expr><name>center</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setZoom</name><argument_list>(<argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLanguage</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactName</name><argument_list>(<argument><expr><name>contactName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactEmail</name><argument_list>(<argument><expr><name>contactEmail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBikeRental</name><argument_list>(<argument><expr><name>offersBikeRental</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>region</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseURL</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>bounds</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contactName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contactEmail</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>center</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>zoom</name></decl></parameter>,
            <parameter><decl><type><name>String</name></type> <name>offersBikeRental</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRegion</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseURL</name><argument_list>(<argument><expr><name>baseURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBounds</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// do extra string processing to set lowerleft and upperright</comment>
        <expr_stmt><expr><call><name>setCenter</name><argument_list>(<argument><expr><name>center</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setZoom</name><argument_list>(<argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLanguage</name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactName</name><argument_list>(<argument><expr><name>contactName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContactEmail</name><argument_list>(<argument><expr><name>contactEmail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBikeRental</name><argument_list>(<argument><expr><name>offersBikeRental</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block">/*
     * Constructor for server with a custom URL
     */</comment>
    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>baseURL</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseURL</name></name> <operator>=</operator> <name>baseURL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>region</name></name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_unknown_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_unknown_bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>language</name></name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_unknown_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactName</name></name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_unknown_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactEmail</name></name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_unknown_email</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offersBikeRental</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRegion</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>region</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRegion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>region</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>region</name></name> <operator>=</operator> <name>region</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBaseURL</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>baseURL</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseURL</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>baseURL</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseURL</name></name> <operator>=</operator> <name>baseURL</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getZoom</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>zoom</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setZoom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>zoom</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>Float</name></type> <name>zoomFloat</name> <init>= <expr><call><name><name>Float</name><operator>.</operator><name>parseFloat</name></name><argument_list>(<argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setInitialZoom</name><argument_list>(<argument><expr><name>zoomFloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>zoomSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>zoom</name></name> <operator>=</operator> <name>zoom</name></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ServerListParsingException</name><argument_list>(<argument><expr><literal type="string">"Incorrect zoom value: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCenter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>center</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCenter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>center</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>tokens</name> <init>= <expr><call><name><name>center</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>centerSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>center</name></name> <operator>=</operator> <name>center</name></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>setCenterLatitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setCenterLongitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ServerListParsingException</name><argument_list>(
                        <argument><expr><literal type="string">"Incorrect center coordinates: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ServerListParsingException</name><argument_list>(<argument><expr><literal type="string">"Incorrect center coordinates"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getBounds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>bounds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBounds</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>bounds</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ServerListParsingException</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>tokens</name> <init>= <expr><call><name><name>bounds</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>boundsSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bounds</name></name> <operator>=</operator> <name>bounds</name></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name>setLowerLeftLatitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setLowerLeftLongitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setUpperRightLatitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setUpperRightLongitude</name><argument_list>(<argument><expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <throw>throw <expr><operator>new</operator> <call><name>ServerListParsingException</name><argument_list>(
                        <argument><expr><literal type="string">"Incorrect bound coordinates: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>ServerListParsingException</name><argument_list>(<argument><expr><literal type="string">"Incorrect bound coordinates"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLanguage</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>language</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLanguage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>language</name></name> <operator>=</operator> <name>language</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getContactEmail</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>contactEmail</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setContactEmail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contactEmail</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactEmail</name></name> <operator>=</operator> <name>contactEmail</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>region</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the id
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>id</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param id the id to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the date
     */</comment>
    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>date</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param date the date to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDate</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>date</name></name> <operator>=</operator> <name>date</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the lowerLeftLatitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerLeftLatitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lowerLeftLatitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param lowerLeftLatitude the lowerLeftLatitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowerLeftLatitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>lowerLeftLatitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerLeftLatitude</name></name> <operator>=</operator> <name>lowerLeftLatitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the lowerLeftLongitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerLeftLongitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>lowerLeftLongitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param lowerLeftLongitude the lowerLeftLongitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowerLeftLongitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>lowerLeftLongitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lowerLeftLongitude</name></name> <operator>=</operator> <name>lowerLeftLongitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the upperRightLatitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperRightLatitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>upperRightLatitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param upperRightLatitude the upperRightLatitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpperRightLatitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>upperRightLatitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperRightLatitude</name></name> <operator>=</operator> <name>upperRightLatitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the upperRightLongitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperRightLongitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>upperRightLongitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param upperRightLongitude the upperRightLongitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpperRightLongitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>upperRightLongitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upperRightLongitude</name></name> <operator>=</operator> <name>upperRightLongitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the radius
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRadius</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>float</name><index>[]</index></name></type> <name>results</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Location</name><operator>.</operator><name>distanceBetween</name></name><argument_list>(<argument><expr><name>geometricalCenterLatitude</name></expr></argument>, <argument><expr><name>geometricalCenterLongitude</name></expr></argument>,
                <argument><expr><name>lowerLeftLatitude</name></expr></argument>, <argument><expr><name>lowerLeftLongitude</name></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the geometricalCenterLatitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getGeometricalCenterLatitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>geometricalCenterLatitude</name> <operator>=</operator> <operator>(</operator><name>lowerLeftLatitude</name> <operator>+</operator> <name>upperRightLatitude</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <return>return <expr><name>geometricalCenterLatitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the geometricalCenterLongitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getGeometricalCenterLongitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>geometricalCenterLongitude</name> <operator>=</operator> <operator>(</operator><name>lowerLeftLongitude</name> <operator>+</operator> <name>upperRightLongitude</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <return>return <expr><name>geometricalCenterLongitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the geometricalCenterLatitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCenterLatitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>centerLatitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the geometricalCenterLongitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCenterLongitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>centerLongitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the contactName
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getContactName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>contactName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param contactName the contactName to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setContactName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contactName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactName</name></name> <operator>=</operator> <name>contactName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCenterLatitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>centerLatitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>centerLatitude</name></name> <operator>=</operator> <name>centerLatitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCenterLongitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>centerLongitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>centerLongitude</name></name> <operator>=</operator> <name>centerLongitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>float</name></type> <name>getInitialZoom</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>initialZoom</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInitialZoom</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>initialZoom</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialZoom</name></name> <operator>=</operator> <name>initialZoom</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getOffersBikeRental</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>offersBikeRental</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOffersBikeRental</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>offersBikeRental</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offersBikeRental</name></name> <operator>=</operator> <name>offersBikeRental</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBikeRental</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>bikeRental</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>offersBikeRental</name></name> <operator>=</operator> <call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>bikeRental</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/model/TraverseModeSpinnerItem.java" hash="db9bb6348a0a31bfaca47a407c4aff94cd9d3241"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseModeSet</name></name>;</import>

<class><specifier>public</specifier> class <name>TraverseModeSpinnerItem</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>displayName</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TraverseModeSet</name></type> <name>traverseModeSet</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TraverseModeSpinnerItem</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>TraverseModeSpinnerItem</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>,
            <parameter><decl><type><name>TraverseModeSet</name></type> <name>traverseModeSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traverseModeSet</name></name> <operator>=</operator> <name>traverseModeSet</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDisplayName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>displayName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayName</name></name> <operator>=</operator> <name>displayName</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>TraverseModeSet</name></type> <name>getTraverseModeSet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>traverseModeSet</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTraverseModeSet</name><parameter_list>(<parameter><decl><type><name>TraverseModeSet</name></type> <name>traverseModeSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>traverseModeSet</name></name> <operator>=</operator> <name>traverseModeSet</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/pois/GooglePlaces.java" hash="fa2b99988a98cb40db35ef09d361c2926b17325d"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A list of places obtained from Google's Places API
 * https://developers.google.com/places/documentation/
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>GooglePlaces</name> <super_list><implements>implements <super><name>Places</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>request</name> <init>= <expr><literal type="string">"https://maps.googleapis.com/maps/api/place/textsearch/json?"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>apiKey</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_LOCATION</name> <init>= <expr><literal type="string">"location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_RADIUS</name> <init>= <expr><literal type="string">"radius"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_NAME</name> <init>= <expr><literal type="string">"query"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// JSON Node names</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_RESULTS</name> <init>= <expr><literal type="string">"results"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_GEOMETRY</name> <init>= <expr><literal type="string">"geometry"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_LOCATION</name> <init>= <expr><literal type="string">"location"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_LATITUDE</name> <init>= <expr><literal type="string">"lat"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_LONGITUDE</name> <init>= <expr><literal type="string">"lng"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_NAME</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_FORMATTED_ADDRESS</name> <init>= <expr><literal type="string">"formatted_address"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>JSONArray</name></type> <name>results</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GooglePlaces</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>apiKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setApiKey</name></name><argument_list>(<argument><expr><name>apiKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>JSONObject</name></type> <name>requestPlaces</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>paramLocation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>paramRadius</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>paramName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamLocation</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamRadius</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamName</name></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>paramLocation</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>paramRadius</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>encodedParamLocation</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>paramLocation</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>encodedParamRadius</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>paramRadius</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>encodedParamName</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error encoding Google Places request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>paramLocation</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>paramRadius</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"location="</literal> <operator>+</operator> <name>encodedParamLocation</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;radius="</literal> <operator>+</operator> <name>encodedParamRadius</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;query="</literal> <operator>+</operator> <name>encodedParamName</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"query="</literal> <operator>+</operator> <name>encodedParamName</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;sensor=false"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;key="</literal> <operator>+</operator> <call><name>getApiKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name><name>urlConnection</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>HttpURLConnection</name><operator>.</operator><name>HTTP_OK</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                        <argument><expr><literal type="string">"Error obtaining Google Places response, status code: \" + status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error obtaining Google Places response"</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JSONObject</name></type> <name>json</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>json</name> <operator>=</operator> <operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing Google Places data "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>json</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>getPlaces</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>pois</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>paramLocation</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_LOCATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramRadius</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_RADIUS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramName</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get JSON</comment>
        <decl_stmt><decl><type><name>JSONObject</name></type> <name>json</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>requestPlaces</name></name><argument_list>(<argument><expr><name>paramLocation</name></expr></argument>, <argument><expr><name>paramRadius</name></expr></argument>, <argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>json</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Decrypt JSON</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><name>results</name> <operator>=</operator> <call><name><name>json</name><operator>.</operator><name>getJSONArray</name></name><argument_list>(<argument><expr><name>TAG_RESULTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>results</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>JSONObject</name></type> <name>r</name> <init>= <expr><call><name><name>results</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_FORMATTED_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>JSONObject</name></type> <name>geometry</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>TAG_GEOMETRY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>JSONObject</name></type> <name>location</name> <init>= <expr><call><name><name>geometry</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>TAG_LOCATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>lat</name> <init>= <expr><call><name><name>location</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>TAG_LATITUDE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>lon</name> <init>= <expr><call><name><name>location</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>TAG_LONGITUDE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>POI</name></type> <name>point</name> <init>= <expr><operator>new</operator> <call><name>POI</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>lat</name></expr></argument>, <argument><expr><name>lon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>pois</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing Google Places data "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>pois</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the apiKey
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getApiKey</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>apiKey</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param apiKey the apiKey to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setApiKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>apiKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>apiKey</name></name> <operator>=</operator> <name>apiKey</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/pois/Nominatim.java" hash="bff9e8d94bc7ef0213dfc7c36c89c6a83b17dd3c"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A list of places obtained from MapQuest's Nominatim API
 * http://developer.mapquest.com/web/products/open/nominatim
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>Nominatim</name> <super_list><implements>implements <super><name>Places</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>request</name> <init>= <expr><literal type="string">"http://open.mapquestapi.com/nominatim/v1/search?format=json"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_NAME</name> <init>= <expr><literal type="string">"q"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_LEFT</name> <init>= <expr><literal type="string">"left"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_TOP</name> <init>= <expr><literal type="string">"top"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_RIGHT</name> <init>= <expr><literal type="string">"right"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PARAM_BOTTOM</name> <init>= <expr><literal type="string">"bottom"</literal></expr></init></decl>;</decl_stmt>


    <comment type="line">// JSON Node names</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_LATITUDE</name> <init>= <expr><literal type="string">"lat"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_LONGITUDE</name> <init>= <expr><literal type="string">"lon"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TAG_NAME</name> <init>= <expr><literal type="string">"display_name"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>mApiKey</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Nominatim</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>apiKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>mApiKey</name> <operator>=</operator> <name>apiKey</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="line">//	http://open.mapquestapi.com/nominatim/v1/search?format=json&amp;q=Walmart&amp;viewbox=-82.8511308,27.6236434,-82.0559399,28.3251809&amp;bounded=1</comment>

    <function><type><specifier>public</specifier> <name>JSONArray</name></type> <name>requestPlaces</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>paramName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>right</name></decl></parameter>,
                                   <parameter><decl><type><name>String</name></type> <name>bottom</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamLeft</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamTop</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamRight</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedParamBottom</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>encodedParamName</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>left</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>top</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>right</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bottom</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>encodedParamLeft</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>encodedParamTop</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>encodedParamRight</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>encodedParamBottom</name> <operator>=</operator> <call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>URL_ENCODING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error encoding Nominatim request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;q="</literal> <operator>+</operator> <name>encodedParamName</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>left</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>top</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>right</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>bottom</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;viewbox="</literal> <operator>+</operator> <name>encodedParamLeft</name>
                    <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>encodedParamTop</name>
                    <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>encodedParamRight</name>
                    <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>encodedParamBottom</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;bounded=1"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>request</name> <operator>+=</operator> <literal type="string">"&amp;key="</literal> <operator>+</operator> <name>mApiKey</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name><name>urlConnection</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>HttpURLConnection</name><operator>.</operator><name>HTTP_OK</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>BufferedReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error obtaining Nominatim response, status code: "</literal> <operator>+</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error obtaining Nominatim response"</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>JSONArray</name></type> <name>json</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>json</name> <operator>=</operator> <operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing Nominatim data "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>json</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>getPlaces</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>pois</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>paramName</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramLeft</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_LEFT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramTop</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_TOP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramRight</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_RIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>paramBottom</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>PARAM_BOTTOM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get JSON</comment>
        <decl_stmt><decl><type><name>JSONArray</name></type> <name>json</name> <init>= <expr><call><name><name>this</name>
                <operator>.</operator><name>requestPlaces</name></name><argument_list>(<argument><expr><name>paramName</name></expr></argument>, <argument><expr><name>paramLeft</name></expr></argument>, <argument><expr><name>paramTop</name></expr></argument>, <argument><expr><name>paramRight</name></expr></argument>, <argument><expr><name>paramBottom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>json</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// Decrypt JSON</comment>
            <try>try <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>json</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>JSONObject</name></type> <name>r</name> <init>= <expr><call><name><name>json</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>lat</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_LATITUDE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>lon</name> <init>= <expr><call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>TAG_LONGITUDE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>POI</name></type> <name>point</name> <init>= <expr><operator>new</operator> <call><name>POI</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>lat</name></expr></argument>, <argument><expr><name>lon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>pois</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error parsing Google Places data "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>pois</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/pois/POI.java" hash="5da251120acad34f87eec04f3bed26add434a9ec"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name></name>;</package>

<comment type="block" format="javadoc">/**
 * A container class for simple Point-of-interest information
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>POI</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>address</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>latitude</name></decl>, <decl><type ref="prev"/><name>longitude</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>POI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>POI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>latitude</name></name> <operator>=</operator> <name>latitude</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>longitude</name></name> <operator>=</operator> <name>longitude</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>POI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>latitude</name></name> <operator>=</operator> <name>latitude</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>longitude</name></name> <operator>=</operator> <name>longitude</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>POI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>POI</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>latitude</name></name> <operator>=</operator> <name>latitude</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>longitude</name></name> <operator>=</operator> <name>longitude</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the name
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param name the name to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the address
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>address</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param address the address to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the latitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLatitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>latitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param latitude the latitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLatitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>latitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>latitude</name></name> <operator>=</operator> <name>latitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the longitude
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLongitude</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>longitude</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param longitude the longitude to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLongitude</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>longitude</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>longitude</name></name> <operator>=</operator> <name>longitude</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/pois/Places.java" hash="6bbb5dac2aa09dcae7addde030a8cf5f5d44469c"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Interface used to abstract Point-of-Interest implementation details for various Point-of-Interest
 * providers
 *
 * @author Khoa Tran
 */</comment>

<interface><specifier>public</specifier> interface <name>Places</name> <block>{

    <function_decl><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>getPlaces</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/sqlite/OtpSQLiteHelper.java" hash="9c2dd40848404cd2cf679735d11d2338901bebb5"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helper class for MySQLite
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>OtpSQLiteHelper</name> <super_list><extends>extends <super><name>SQLiteOpenHelper</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>TABLE_SERVERS</name> <init>= <expr><literal type="string">"Servers"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_ID</name> <init>= <expr><literal type="string">"ID"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_DATE</name> <init>= <expr><literal type="string">"DateAdded"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_REGION</name> <init>= <expr><literal type="string">"Region"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_BASEURL</name> <init>= <expr><literal type="string">"BaseURL"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_BOUNDS</name> <init>= <expr><literal type="string">"Bounds"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_CENTER</name> <init>= <expr><literal type="string">"Center"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_ZOOM</name> <init>= <expr><literal type="string">"Zoom"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_LANGUAGE</name> <init>= <expr><literal type="string">"Language"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_CONTACT_NAME</name> <init>= <expr><literal type="string">"ContactName"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_CONTACT_EMAIL</name> <init>= <expr><literal type="string">"ContactEmail"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>COLUMN_OFFERS_BIKE_RENTAL</name> <init>= <expr><literal type="string">"OffersBikeRental"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATABASE_NAME</name> <init>= <expr><literal type="string">"OTPServers.db"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DATABASE_VERSION</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>OtpSQLiteHelper</name></type> <name>mInstance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Database creation sql statement</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DATABASE_CREATE</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal>
            <operator>+</operator> <name>TABLE_SERVERS</name> <operator>+</operator> <literal type="string">"( "</literal>
            <operator>+</operator> <name>COLUMN_ID</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY AUTOINCREMENT, "</literal>
            <operator>+</operator> <name>COLUMN_DATE</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT CURRENT_TIMESTAMP, "</literal>
            <operator>+</operator> <name>COLUMN_REGION</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_BASEURL</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_BOUNDS</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_LANGUAGE</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_CONTACT_NAME</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_CONTACT_EMAIL</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_CENTER</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_ZOOM</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL, "</literal>
            <operator>+</operator> <name>COLUMN_OFFERS_BIKE_RENTAL</name> <operator>+</operator> <literal type="string">" INTEGER"</literal>
            <operator>+</operator> <literal type="string">");"</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>OtpSQLiteHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>


    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>OtpSQLiteHelper</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <comment type="line">// Use the application context, which will ensure that you</comment>
        <comment type="line">// don't accidentally leak an Activity's context.</comment>
        <comment type="line">// See this article for more information: http://bit.ly/6LRzfx</comment>
        <if_stmt><if>if <condition>(<expr><name>mInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mInstance</name> <operator>=</operator> <operator>new</operator> <call><name>OtpSQLiteHelper</name><argument_list>(<argument><expr><call><name><name>ctx</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>mInstance</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>DATABASE_CREATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><call><name><name>OtpSQLiteHelper</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"Upgrading database from version "</literal> <operator>+</operator> <name>oldVersion</name> <operator>+</operator> <literal type="string">" to "</literal>
                        <operator>+</operator> <name>newVersion</name> <operator>+</operator> <literal type="string">", which will destroy all old data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE IF EXISTS "</literal> <operator>+</operator> <name>TABLE_SERVERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onCreate</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/sqlite/ServersDataSource.java" hash="9f31aae119e75199bfa70cd38757e048f9a15eaa"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Local data storage for servers from the OTP Server Directory
 * https://docs.google.com/spreadsheet/ccc?key=0AgWy8ujaGosCdDhxTC04cUZNeHo0eGFBQTBpU2dxN0E&amp;usp=sharing&amp;authkey=CK-H__IP
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>ServersDataSource</name> <block>{

    <comment type="line">// Database fields</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SQLiteDatabase</name></type> <name>database</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OtpSQLiteHelper</name></type> <name>dbHelper</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ServersDataSource</name></type> <name>mInstance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>allColumns</name> <init>= <expr><block>{<expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ID</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_REGION</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_BASEURL</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_BOUNDS</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_LANGUAGE</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CONTACT_NAME</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CONTACT_EMAIL</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CENTER</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ZOOM</name></name></expr>,
            <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_OFFERS_BIKE_RENTAL</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ServersDataSource</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>dbHelper</name> <operator>=</operator> <call><name><name>OtpSQLiteHelper</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>ServersDataSource</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mInstance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mInstance</name> <operator>=</operator> <operator>new</operator> <call><name>ServersDataSource</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>mInstance</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>open</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><name>database</name> <operator>=</operator> <call><name><name>dbHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dbHelper</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Server</name></type> <name>createServer</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getCenter</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getZoom</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getLanguage</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getContactName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getContactEmail</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator>
                <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                        <argument><expr><literal type="string">"Wrote '"</literal> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' server date to SQLLite - "</literal> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_REGION</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_BASEURL</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_BOUNDS</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CENTER</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getCenter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ZOOM</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getZoom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_LANGUAGE</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getLanguage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CONTACT_NAME</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getContactName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_CONTACT_EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getContactEmail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_OFFERS_BIKE_RENTAL</name></name></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>insertId</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                    <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>,
                    <argument><expr><name>allColumns</name></expr></argument>, <argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ID</name></name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>insertId</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                    <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Server</name></type> <name>newServer</name> <init>= <expr><call><name>cursorToServer</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>newServer</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>deleteServer</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>id</name> <init>= <expr><call><name><name>server</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server deleted with id: "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>, <argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ID</name></name>
                <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Server</name></type> <name>getServer</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Server</name></type> <name>newServer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>, <argument><expr><name>allColumns</name></expr></argument>,
                <argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_ID</name></name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newServer</name> <operator>=</operator> <call><name>cursorToServer</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>newServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Found server with id: "</literal> <operator>+</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server with id "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" does not exist in database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>newServer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>getAllServers</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>servers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>,
                <argument><expr><name>allColumns</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>isAfterLast</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Server</name></type> <name>comment</name> <init>= <expr><call><name>cursorToServer</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>servers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>servers</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>getMostRecentServers</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>servers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>whereClause</name> <init>= <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name> <operator>+</operator> <literal type="string">" = (SELECT max("</literal> <operator>+</operator>
                <name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name> <operator>+</operator> <literal type="string">") FROM "</literal> <operator>+</operator> <name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>,
                <argument><expr><name>allColumns</name></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Server</name></type> <name>s</name> <init>= <expr><call><name>cursorToServer</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>servers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>servers</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Long</name></type> <name>getMostRecentDate</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>whereClause</name> <init>= <expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name> <operator>+</operator> <literal type="string">" = (SELECT max("</literal> <operator>+</operator>
                <name><name>OtpSQLiteHelper</name><operator>.</operator><name>COLUMN_DATE</name></name> <operator>+</operator> <literal type="string">") FROM "</literal> <operator>+</operator> <name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>OtpSQLiteHelper</name><operator>.</operator><name>TABLE_SERVERS</name></name></expr></argument>,
                <argument><expr><name>allColumns</name></expr></argument>, <argument><expr><name>whereClause</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Server</name></type> <name>s</name> <init>= <expr><call><name>cursorToServer</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Make sure to close the cursor</comment>
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Server</name></type> <name>cursorToServer</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Server</name></type> <name>server</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Long</name></type> <name>addedOn</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setDate</name></name><argument_list>(<argument><expr><name>addedOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setRegion</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setBaseURL</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setLanguage</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setContactName</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setContactEmail</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setCenter</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setZoom</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>server</name><operator>.</operator><name>setOffersBikeRental</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                <argument><expr><literal type="string">"Retrieved '"</literal> <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' server date from SQLLite - "</literal> <operator>+</operator> <name>addedOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>server</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/BikeRentalLoad.java" hash="46c064f99d7210fad1ecddc0ea7f5ef3ecc4871b"><comment type="block">/*
 * Copyright 2014 Vreixo Gonzalez on 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JavaType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>bike_rental</name><operator>.</operator><name>BikeRentalStationList</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>BikeRentalLoadCompleteListener</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Vreixo GonzÃ¡lez
 */</comment>

<class><specifier>public</specifier> class <name>BikeRentalLoad</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>, <argument><name>BikeRentalStationList</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>BikeRentalLoadCompleteListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>firstLoad</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BikeRentalLoad</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>firstLoad</name></decl></parameter>,
                          <parameter><decl><type><name>BikeRentalLoadCompleteListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>firstLoad</name></name> <operator>=</operator> <name>firstLoad</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Do nothing</comment>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>BikeRentalStationList</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>
                        , <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>u</name> <init>= <expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>prefix</name> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>BIKE_RENTAL_LOCATION</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"URL: "</literal> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setRequestProperty</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bikeRentalStationList</name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>BikeRentalStationList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error fetching JSON or XML: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><name>bikeRentalStationList</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>BikeRentalStationList</name></type> <name>bikeRentalStationList</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>bikeRentalStationList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>firstLoad</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_bike_rental_load_request_successful</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onBikeRentalStationListLoad</name></name><argument_list>(<argument><expr><name>bikeRentalStationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onBikeRentalStationListUpdate</name></name><argument_list>(<argument><expr><name>bikeRentalStationList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_bike_rental_load_request_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No bike rental stations!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onBikeRentalStationListFail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/MetadataRequest.java" hash="a3110d4f6a979906faf8f9e4c5031284a3b80a39"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>GraphMetadata</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>MetadataRequestCompleteListener</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>MetadataRequest</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>, <argument><name>GraphMetadata</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>progressDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>MetadataRequestCompleteListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MetadataRequest</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
            <parameter><decl><type><name>MetadataRequestCompleteListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>task_progress_metadata_progress</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>GraphMetadata</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>prefs</name>
                <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>
                        , <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>u</name> <init>= <expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>prefix</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_API_VERSION</name></name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V2</name></name></expr></argument>)</argument_list></call>
                <operator>&lt;</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V2</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>u</name> <operator>+=</operator> <name><name>OTPApp</name><operator>.</operator><name>METADATA_LOCATION</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"URL: "</literal> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GraphMetadata</name></type> <name>metadata</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setRequestProperty</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>metadata</name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>GraphMetadata</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error fetching JSON or XML: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><name>metadata</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>GraphMetadata</name></type> <name>metadata</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>progressDialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in Metadata Request PostExecute dismissing dialog: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>metadata</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_metadata_request_successful</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onMetadataRequestComplete</name></name><argument_list>(<argument><expr><name>metadata</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_checker_info_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No metadata!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/OTPGeocoding.java" hash="dc0a0177b7ac3bf7f43ce152d7aae7dc5a700170"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>OTPGeocodingListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>LocationUtil</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>CustomAddress</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>OTPGeocoding</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isStartTextbox</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>OTPGeocodingListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>geocodingForMarker</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addressesReturn</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Server</name></type> <name>selectedServer</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OTPGeocoding</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStartTextbox</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>, <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>,
                        <parameter><decl><type><name>OTPGeocodingListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isStartTextbox</name></name> <operator>=</operator> <name>isStartTextbox</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedServer</name></name> <operator>=</operator> <name>selectedServer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>geocodingForMarker</name></name> <operator>=</operator> <name>geocodingForMarker</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Do nothing</comment>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Long</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>count</name> <init>= <expr><name><name>reqs</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>addressesReturn</name> <operator>=</operator> <call><name><name>LocationUtil</name><operator>.</operator><name>processGeocoding</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>, <argument><expr><name>geocodingForMarker</name></expr></argument>, <argument><expr><name>reqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onCancelled</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>geocoderAlert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>geocoderAlert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_results_title</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_results_no_results_message</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                                <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                </block_content>}</block></function>
                            }</block></class></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>geocoderAlert</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No geocoding processed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onOTPGeocodingComplete</name></name><argument_list>(<argument><expr><name>isStartTextbox</name></expr></argument>, <argument><expr><name>addressesReturn</name></expr></argument>, <argument><expr><name>geocodingForMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/RequestTimesForTrips.java" hash="cc3c61080c0a3002f4e33a8727d113d6af23093c"><comment type="block">/*
 * Copyright 2014 Vreixo Gonzalez on 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>JavaType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>index</name><operator>.</operator><name>model</name><operator>.</operator><name>TripTimeShort</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URLEncoder</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>RequestTimesForTripsCompleteListener</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Vreixo GonzÃ¡lez
 */</comment>

<class><specifier>public</specifier> class <name>RequestTimesForTrips</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>, <argument><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>RequestTimesForTripsCompleteListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RequestTimesForTrips</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>RequestTimesForTripsCompleteListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Do nothing</comment>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>
                        , <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>reqs</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>timesUpdatesForTrips</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,
                <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>reqs</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></type> <name>updatedTripTimesList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>JavaType</name></type> <name>bikeRentalStationListType</name> <init>= <expr><call><name><name>mapper</name><operator>.</operator><name>getTypeFactory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>constructCollectionType</name><argument_list>(<argument><expr><name><name>List</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>TripTimeShort</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>tripId</name> <range>: <expr><name>reqs</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>tripId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>encodedTripId</name> <init>= <expr><call><name><name>URLEncoder</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>tripId</name></expr></argument>, <argument><expr><call><name><name>Charset</name><operator>.</operator><name>defaultCharset</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>u</name> <init>= <expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>prefix</name> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>TRIP_TIMES_UPDATES_LOCATION_BEFORE_ID</name></name>
                        <operator>+</operator> <name>encodedTripId</name> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>TRIP_TIMES_UPDATES_LOCATION_AFTER_ID</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"URL: "</literal> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setRequestProperty</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>updatedTripTimesList</name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bikeRentalStationListType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>timesUpdatesForTrips</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tripId</name></expr></argument>, <argument><expr><name>updatedTripTimesList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error fetching JSON or XML: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>

        <return>return <expr><name>timesUpdatesForTrips</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>TripTimeShort</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>timesUpdatesForTrips</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>timesUpdatesForTrips</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onUpdateTripTimesComplete</name></name><argument_list>(<argument><expr><name>timesUpdatesForTrips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_realtime_updates_fail</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No bike rental stations!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onUpdateTripTimesFail</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/ServerChecker.java" hash="a09aff063a0db7d46db353205eb7a3f1ab26e572"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>resource</name><operator>.</operator><name>ServerInfo</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerCheckerCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>

<class><specifier>public</specifier> class <name>ServerChecker</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>, <argument><name>Long</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>progressDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ServerCheckerCompleteListener</name></type> <name>callback</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showMessage</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isWorking</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isCustomServer</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isAutoDetected</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showToast</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new ServerChecker
     */</comment>
    <constructor><specifier>public</specifier> <name>ServerChecker</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showMessage</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showMessage</name></name> <operator>=</operator> <name>showMessage</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Constructs a new ServerChecker
     */</comment>
    <constructor><specifier>public</specifier> <name>ServerChecker</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
            <parameter><decl><type><name>ServerCheckerCompleteListener</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCustomServer</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showToast</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>isAutoDetected</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isCustomServer</name></name> <operator>=</operator> <name>isCustomServer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isAutoDetected</name></name> <operator>=</operator> <name>isAutoDetected</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showToast</name></name> <operator>=</operator> <name>showToast</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <call><name><name>ProgressDialog</name>
                        <operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                                <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>task_progress_server_checker_progress</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>String</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Server</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Server</name></type> <name>server</name> <init>= <expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ServerInfo</name></type> <name>serverInfo</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>server</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                    <argument><expr><literal type="string">"Tried to get server info when no server was selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>=
                    <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_region</name></name></expr></argument>)</argument_list></call>
                            <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_language</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>server</name>
                            <operator>.</operator><name>getLanguage</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_contact</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>server</name>
                            <operator>.</operator><name>getContactName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ("</literal>
                            <operator>+</operator> <call><name><name>server</name><operator>.</operator><name>getContactEmail</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_url</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>server</name>
                            <operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call>
                            <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_bounds</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>server</name>
                            <operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_bike_rental</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>server</name><operator>.</operator><name>getOffersBikeRental</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>message</name> <operator>+=</operator>  <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>yes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>message</name> <operator>+=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>message</name> <operator>+=</operator> <literal type="string">"\n"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_reachable</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(
                    <argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>SERVER_INFO_LOCATION_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>urlConnection</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>serverInfo</name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ServerInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server not working with API V1, trying again this time with"</literal> <operator>+</operator>
                        <literal type="string">" old version: "</literal>
                        <operator>+</operator> <call><name><name>e1</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>SERVER_INFO_LOCATION_OLD</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>urlConnection</name><operator>.</operator><name>getResponseCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>serverInfo</name> <operator>=</operator> <call><name><name>mapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ServerInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_OLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to reach server: "</literal> <operator>+</operator> <call><name><name>e2</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_checker_error_unreachable</name></name></expr></argument>)</argument_list></call>
                            <operator>+</operator> <literal type="string">" "</literal>
                            <operator>+</operator> <call><name><name>e2</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>message</name></expr>;</return>
                </block_content>}</block></catch> <finally>finally <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></finally></try>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></finally></try>

            <if_stmt><if>if <condition>(<expr><name>serverInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>api_version</name> <init>= <expr><name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V3</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>serverInfo</name><operator>.</operator><name>serverVersion</name><operator>.</operator><name>major</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>serverInfo</name><operator>.</operator><name>serverVersion</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_MINOR_019</name></name></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><name>api_version</name> <operator>=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V2</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>serverInfo</name><operator>.</operator><name>serverVersion</name><operator>.</operator><name>minor</name></name> <operator>&gt;=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_MINOR_011</name></name></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><name>api_version</name> <operator>=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V1</name></name></expr>;</expr_stmt>
                    </block_content>}</block></if><else>else <block>{<block_content>
                        <expr_stmt><expr><name>api_version</name> <operator>=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_PRE_V1</name></name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_API_VERSION</name></name></expr></argument>,
                        <argument><expr><name>api_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>


            <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name><name>HttpURLConnection</name><operator>.</operator><name>HTTP_OK</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>message</name> <operator>+=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>yes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isWorking</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>message</name> <operator>+=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><name>message</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onCancelled</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCancelled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_checker_info_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>progressDialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in Server Checker PostExecute dismissing dialog: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>showMessage</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isCustomServer</name> <operator>&amp;&amp;</operator> <name>showToast</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isWorking</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                            <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_checker_successful</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                            <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_unreachable</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onServerCheckerComplete</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>isCustomServer</name></expr></argument>, <argument><expr><name>isAutoDetected</name></expr></argument>, <argument><expr><name>isWorking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/ServerSelector.java" hash="73ae766405c4cfb56e293fd83a6552b0e7228ef1"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>URLUtil</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>au</name><operator>.</operator><name>com</name><operator>.</operator><name>bytecode</name><operator>.</operator><name>opencsv</name><operator>.</operator><name>CSVReader</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>ServerListParsingException</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerCheckerCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>ServerSelectorCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>ServersDataSource</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>LocationUtil</name></name>;</import>

<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name></name>;</import>
<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></name>;</import>
<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></name>;</import>
<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></name>;</import>
<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A task that retrieves the list of OTP servers from the Google Docs directory,
 * and if specified, automatically chooses the server based on the geographic bounds
 * and user current location
 *
 * @author Marcy Gordon
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>ServerSelector</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>, <argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></super></extends>
        <implements>implements <super><name>ServerCheckerCompleteListener</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Server</name></type> <name>selectedServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>progressDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>knownServers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mustRefreshList</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>isAutoDetectEnabled</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ServerSelectorCompleteListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>selectedCustomServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>ServersDataSource</name></type> <name>dataSource</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructs a new ServerSelector
     *
     * @param mustRefreshList true if we should download a new list of servers from the Google
     *                        Doc, false if we should use cached list of servers
     * @param showDialog      true if a progress dialog is requested
     */</comment>
    <constructor><specifier>public</specifier> <name>ServerSelector</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
            <parameter><decl><type><name>ServersDataSource</name></type> <name>dataSource</name></decl></parameter>, <parameter><decl><type><name>ServerSelectorCompleteListener</name></type> <name>callback</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>mustRefreshList</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showDialog</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataSource</name></name> <operator>=</operator> <name>dataSource</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mustRefreshList</name></name> <operator>=</operator> <name>mustRefreshList</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showDialog</name></name> <operator>=</operator> <name>showDialog</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>showDialog</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>showDialog</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>task_progress_server_selector_progress</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>isAutoDetectEnabled</name> <operator>=</operator> <call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name></name></expr></argument>,
                <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


    <function><type><specifier>protected</specifier> <name>Integer</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>LatLng</name><modifier>...</modifier></type> <name>latLng</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>currentLocation</name> <init>= <expr><name><name>latLng</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>serverList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If not forced to refresh list</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mustRefreshList</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Check if servers are stored in SQLite?</comment>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Attempt retrieving servers from sqlite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>serverList</name> <operator>=</operator> <call><name>getServersFromSQLite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If forced to refresh list OR</comment>
        <comment type="line">// If severs are not stored, download list from the Google Spreadsheet and Insert to database</comment>
        <if_stmt><if>if <condition>(<expr><name>serverList</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>serverList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>mustRefreshList</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                    <argument><expr><literal type="string">"No data from sqlite. Attempt retrieving servers from google spreadsheet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>serverList</name> <operator>=</operator> <call><name>downloadServerList</name><argument_list>(
                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>servers_spreadsheet_url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Insert new list to database</comment>
            <if_stmt><if>if <condition>(<expr><name>serverList</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>serverList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>insertServerListToDatabase</name><argument_list>(<argument><expr><name>serverList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>serverList</name> <operator>=</operator> <call><name>getServersFromSQLite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// If still null</comment>
            <if_stmt><if>if <condition>(<expr><name>serverList</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>serverList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>knownServers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>knownServers</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>serverList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//If we're autodetecting a server, get the location find the optimal server</comment>
        <if_stmt><if>if <condition>(<expr><name>isAutoDetectEnabled</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>currentLocation</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>selectedServer</name> <operator>=</operator> <call><name>findOptimalSever</name><argument_list>(<argument><expr><name>currentLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><call><name><name>serverList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>getServersFromSQLite</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>servers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>dataSource</name><operator>.</operator><name>getMostRecentServers</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>shown</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Server</name></type> <name>s</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>shown</name> <operator>+=</operator> <call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>s</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>servers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>shown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>someDaysBefore</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>someDaysBefore</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><operator>-</operator><name><name>OTPApp</name><operator>.</operator><name>EXPIRATION_DAYS_FOR_SERVER_LIST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Long</name></type> <name>serversUpdateDate</name> <init>= <expr><call><name><name>dataSource</name><operator>.</operator><name>getMostRecentDate</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>serversUpdateDate</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>someDaysBefore</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call>
                <operator>&gt;</operator> <name>serversUpdateDate</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>servers</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//		Toast.makeText(activity.getApplicationContext(), shown, Toast.LENGTH_SHORT).show();</comment>

        <return>return <expr><name>servers</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Downloads the list of OTP servers from the Google Doc directory
     *
     * @param urlString URL address of the Google Doc
     * @return Server a list of OTP servers contained in the Google Doc
     */</comment>
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>downloadServerList</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>urlString</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>serverList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>urlString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>bufferedReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name>
                    <argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CSVReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>CSVReader</name><argument_list>(<argument><expr><name>bufferedReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>Long</name></type> <name>currentTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>serversStrings</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readAll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name><name>String</name><index>[]</index></name></type> <name>serverString</name> <range>: <expr><name>serversStrings</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>serverString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><literal type="string">"Region"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <continue>continue;</continue> <comment type="line">//Ignore the first line of the file</comment>
                    </block_content>}</block></if></if_stmt>
                    <for>for <control>(<init><decl><type><name>String</name></type> <name>stringEntry</name> <range>: <expr><name>serverString</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><name>stringEntry</name> <operator>=</operator> <call><name><name>stringEntry</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>allFieldsNotNull</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>String</name></type> <name>serverField</name> <range>: <expr><name>serverString</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><name>serverField</name> <operator>=</operator> <call><name><name>serverField</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name><name>serverField</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Some necessary fields are null, server not added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>allFieldsNotNull</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>allFieldsNotNull</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>serverString</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <try>try <block>{<block_content>
                            <decl_stmt><decl><type><name>Server</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>currentTime</name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                                    <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
                                    <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,
                                    <argument><expr><name><name>serverString</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name><name>serverList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ServerListParsingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                    <argument><expr><literal type="string">"Error parsing necessary fields, server not added: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                                <argument><expr><literal type="string">"Server does not provide necessary fields, server not added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Problem reading CSV server file: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error closing CSVReader file: "</literal> <operator>+</operator> <name>e2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <try>try <block>{<block_content>
                    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error closing CSVReader file: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></finally></try>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Servers: "</literal> <operator>+</operator> <call><name><name>serverList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>serverList</name></expr>;</return>

        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Unable to download spreadsheet with server list: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>


    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>insertServerListToDatabase</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Server</name></argument>&gt;</argument_list></name></type> <name>servers</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Server</name></type> <name>server</name> <range>: <expr><name>servers</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dataSource</name><operator>.</operator><name>createServer</name></name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Some server fields are incorrect, server not added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Automatically detects the correct OTP server based on the location of the device
     *
     * @param currentLocation location of the device
     * @return Server the OTP server that the location is within
     */</comment>
    <function><type><specifier>private</specifier> <name>Server</name></type> <name>findOptimalSever</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>currentLocation</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>currentLocation</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//If we've already selected a server, just return the one we selected</comment>
        <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>selectedServer</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>isInBoundingBox</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Server</name></type> <name>server</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Server</name></type> <name>knownServer</name> <range>: <expr><name>knownServers</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>isInBoundingBox</name> <operator>=</operator> <call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(<argument><expr><name>currentLocation</name></expr></argument>, <argument><expr><name>knownServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>isInBoundingBox</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>server</name> <operator>=</operator> <name>knownServer</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>server</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>showDialog</name></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>progressDialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in Server Selector PostExecute dismissing dialog: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">//We've already auto-selected a server</comment>
            <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name> <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                    <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ServerSelector</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>knownServers</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>knownServers</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>,
                    <argument><expr><literal type="string">"No server automatically selected.  User will need to choose the OTP server."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create dialog for user to choose</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>serverNames</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Server</name></type> <name>server</name> <range>: <expr><name>knownServers</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>serverNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>server</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>serverNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>serverNames</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>CharSequence</name><index>[]</index></name></type> <name>items</name> <init>= <expr><call><name><name>serverNames</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>serverNames</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

                    <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{<block_content>

                        <comment type="line">//If the user selected to enter a custom URL, they are shown this EditText box to enter it</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_checker_info_custom_server_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name>
                                    <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>tbBaseURL</name> <init>= <expr><operator>new</operator> <call><name>EditText</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>String</name></type> <name>actualCustomServer</name> <init>= <expr><call><name><name>prefs</name>
                                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>tbBaseURL</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>actualCustomServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>urlAlert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(
                                        <argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>urlAlert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(
                                                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>server_selector_custom_server_alert_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>urlAlert</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>tbBaseURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>urlAlert</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(
                                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                                            <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>,
                                                    <parameter><decl><type><name>int</name></type> <name>whichButton</name></decl></parameter>)</parameter_list> <block>{<block_content>
                                                <decl_stmt><decl><type><name>Editable</name></type> <name>tbEditable</name> <init>= <expr><call><name><name>tbBaseURL</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <if_stmt><if>if <condition>(<expr><name>tbEditable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                                    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>tbEditable</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                    <if_stmt><if>if <condition>(<expr><call><name><name>URLUtil</name><operator>.</operator><name>isValidUrl</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                                        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name>
                                                                <init>= <expr><call><name><name>PreferenceManager</name>
                                                                <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(
                                                                        <argument><expr><name>context</name></expr></argument>)</argument_list></call>
                                                                <operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                        <expr_stmt><expr><call><name><name>prefsEditor</name>
                                                                <operator>.</operator><name>putString</name></name><argument_list>(
                                                                        <argument><expr><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></expr></argument>,
                                                                        <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                        <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name>
                                                                <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                                                                <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ServerSelector</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                                                <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                        <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(
                                                                <argument><expr><operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                        <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                                    </block_content>}</block></if> <else>else <block>{<block_content>
                                                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                                                <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                                                        <operator>.</operator><call><name>getString</name><argument_list>(
                                                                                <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>settings_menu_custom_server_url_description_error_url</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                                    </block_content>}</block></else></if_stmt>
                                                </block_content>}</block></if></if_stmt>

                                            </block_content>}</block></function>
                                        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>selectedCustomServer</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name><name>urlAlert</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <comment type="line">//User picked server from the list</comment>
                            <for>for <control>(<init><decl><type><name>Server</name></type> <name>server</name> <range>: <expr><name>knownServers</name></expr></range></decl></init>)</control> <block>{<block_content>
                                <comment type="line">//If this server region matches what the user picked, then set the server as the selected server</comment>
                                <if_stmt><if>if <condition>(<expr><call><name><name>server</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>item</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><name>selectedServer</name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
                                    <decl_stmt><decl><type><name>ServerChecker</name></type> <name>serverChecker</name> <init>= <expr><operator>new</operator> <call><name>ServerChecker</name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                                            <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ServerSelector</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><call><name><name>serverChecker</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <break>break;</break>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Chosen: "</literal> <operator>+</operator> <name><name>items</name><index>[<expr><name>item</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Server list could not be downloaded!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_selector_refresh_server_list_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onServerCheckerComplete</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isCustomServer</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>isAutoDetected</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isWorking</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name>
                <operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>prefsEditor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>isCustomServer</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isWorking</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_AUTO_DETECT_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>selectedCustomServer</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>baseURL</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_CUSTOM_SERVER_URL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>selectedServer</name> <operator>=</operator> <operator>new</operator> <call><name>Server</name><argument_list>(<argument><expr><name>baseURL</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onServerSelectorComplete</name></name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_CUSTOM_SERVER_URL_IS_VALID</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_checker_error_bad_url</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>isWorking</name></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>isAutoDetected</name></expr>)</condition><block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>serverId</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Server</name></type> <name>s</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>serverIsChanged</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>serverId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>open</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>dataSource</name><operator>.</operator><name>getServer</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_SELECTED_SERVER</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>dataSource</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>serverIsChanged</name> <operator>=</operator> <operator>!</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>showDialog</name> <operator>||</operator> <name>serverIsChanged</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_selector_detected</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                                        <operator>+</operator> <call><name><name>selectedServer</name><operator>.</operator><name>getRegion</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_server_selector_server_change_info</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_SELECTED_SERVER</name></expr></argument>,
                        <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PREFERENCE_KEY_SELECTED_CUSTOM_SERVER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>prefsEditor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onServerSelectorComplete</name></name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator>
                                        <name>toast_server_checker_error_unreachable_detected_server</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/tasks/TripRequest.java" hash="b6fd80429374d156410e9e145b49f52bdb1e6e60"><comment type="block">/*
 * Copyright 2011 Marcy Gordon
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>tasks</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>error</name><operator>.</operator><name>PlannerError</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>HttpURLConnection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>listeners</name><operator>.</operator><name>TripRequestCompleteListener</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>JacksonConfig</name></name>;</import>

<comment type="block" format="javadoc">/**
 * AsyncTask that invokes a trip planning request to the OTP Server
 *
 * @author Khoa Tran
 * @author Sean Barbeau (conversion to Jackson)
 */</comment>

<class><specifier>public</specifier> class <name>TripRequest</name> <super_list><extends>extends <super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Request</name></argument>, <argument><name>Integer</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Response</name></type> <name>response</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>ProgressDialog</name></type> <name>progressDialog</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Resources</name></type> <name>resources</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>currentRequestString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Server</name></type> <name>selectedServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TripRequestCompleteListener</name></type> <name>callback</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TripRequest</name><parameter_list>(<parameter><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>,
                       <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>, <parameter><decl><type><name>TripRequestCompleteListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedServer</name></name> <operator>=</operator> <name>selectedServer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resources</name></name> <operator>=</operator> <name>resources</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>activity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <operator>new</operator> <call><name>ProgressDialog</name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                        <argument><expr><call><name><name>resources</name><operator>.</operator><name>getText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>task_progress_tripplanner_progress</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Long</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Request</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>totalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                    <argument><expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>toast_no_server_selected_error</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_FOLDER_STRUCTURE_PREFIX</name></name></expr></argument>
                            , <argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>baseURL</name> <init>= <expr><call><name><name>selectedServer</name><operator>.</operator><name>getBaseURL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Request</name></type> <name>req</name> <range>: <expr><name>reqs</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>requestPlan</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>baseURL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>totalSize</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onCancelled</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <try>try <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>progressDialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in TripRequest Cancelled dismissing dialog: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>geocoderAlert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>geocoderAlert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_results_title</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_request_timeout</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                        <function><type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        </block_content>}</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>AlertDialog</name></type> <name>alert</name> <init>= <expr><call><name><name>geocoderAlert</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No route to display!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>progressDialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error in TripRequest PostExecute dismissing dialog: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>response</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>response</name><operator>.</operator><name>getPlan</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>response</name><operator>.</operator><name>getPlan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItinerary</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>getPlan</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItinerary</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onTripRequestComplete</name></name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>, <argument><expr><name>currentRequestString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>Activity</name></type> <name>activityRetrieved</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>activityRetrieved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>feedback</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activityRetrieved</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>feedback</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>resources</name>
                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_dialog_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>feedback</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name><name>resources</name>
                        <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_not_defined</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>PlannerError</name></type> <name>error</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>errorCode</name> <init>= <expr><call><name><name>error</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>response</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>response</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                            <operator>&amp;&amp;</operator> <name>errorCode</name> <operator>!=</operator> <call><name><name>Message</name><operator>.</operator><name>PLAN_OK</name>
                            <operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

                        <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>getErrorMessage</name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name><name>response</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMsg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>feedback</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>feedback</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"No route to display!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>String</name></type> <name>getErrorMessage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>SYSTEM_ERROR</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_system</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>OUTSIDE_BOUNDS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_outside_bounds</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>PATH_NOT_FOUND</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_path_not_found</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>NO_TRANSIT_TIMES</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_no_transit_times</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>REQUEST_TIMEOUT</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_request_timeout</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>BOGUS_PARAMETER</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_bogus_parameter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_FROM_NOT_FOUND</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_from_not_found</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_TO_NOT_FOUND</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_to_not_found</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_FROM_TO_NOT_FOUND</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_from_to_not_found</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>TOO_CLOSE</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_too_close</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>LOCATION_NOT_ACCESSIBLE</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_location_not_accessible</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_FROM_AMBIGUOUS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_from_ambiguous</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_TO_AMBIGUOUS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_to_ambiguous</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>GEOCODE_FROM_TO_AMBIGUOUS</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name>
                    <operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_geocode_from_to_ambiguous</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>UNDERSPECIFIED_TRIANGLE</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>TRIANGLE_NOT_AFFINE</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>TRIANGLE_OPTIMIZE_TYPE_NOT_SET</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call>
                <operator>||</operator> <name>errorCode</name> <operator>==</operator> <call><name><name>Message</name><operator>.</operator><name>TRIANGLE_VALUES_NOT_SET</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>(</operator><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>tripplanner_error_triangle</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>protected</specifier> <name>Response</name></type> <name>requestPlan</name><parameter_list>(<parameter><decl><type><name>Request</name></type> <name>requestParams</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>baseURL</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tmp</name> <init>= <expr><call><name><name>requestParams</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Collection</name></type> <name>c</name> <init>= <expr><call><name><name>tmp</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>itr</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>params</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>itr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>params</name> <operator>+=</operator> <literal type="string">"?"</literal> <operator>+</operator> <call><name><name>itr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>params</name> <operator>+=</operator> <literal type="string">"&amp;"</literal> <operator>+</operator> <call><name><name>itr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><call><name><name>requestParams</name><operator>.</operator><name>getBikeRental</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>updatedString</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>prefix</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FOLDER_STRUCTURE_PREFIX_NEW</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>updatedString</name> <operator>=</operator> <call><name><name>params</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>OTP_RENTAL_QUALIFIER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>updatedString</name> <operator>=</operator> <call><name><name>params</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>TraverseMode</name><operator>.</operator><name>WALK</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>params</name> <operator>=</operator> <name>updatedString</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>


        <if_stmt><if>if <condition>(<expr><call><name><name>requestParams</name><operator>.</operator><name>getModes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTrainish</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// TraverseModeSet.toString() enumerates activated modes, which might not be supported by server</comment>
            <comment type="line">// so we filter them out. Should be solved differently, e.g. by  decoupling and introducing</comment>
            <comment type="line">// an interface with version dependent implementations</comment>
            <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_API_VERSION</name></name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V3</name></name></expr></argument>)</argument_list></call>
                    <operator>&gt;=</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V3</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>updatedString</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>updatedString</name> <operator>=</operator> <call><name><name>params</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>updatedString</name> <operator>=</operator> <call><name><name>updatedString</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>params</name> <operator>=</operator> <name>updatedString</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>u</name> <init>= <expr><name>baseURL</name> <operator>+</operator> <name>prefix</name> <operator>+</operator> <name><name>OTPApp</name><operator>.</operator><name>PLAN_LOCATION</name></name> <operator>+</operator> <name>params</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"URL: "</literal> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currentRequestString</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpURLConnection</name></type> <name>urlConnection</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>URL</name></type> <name>url</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Response</name></type> <name>plan</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <expr_stmt><expr><name>url</name> <operator>=</operator> <operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>disableConnectionReuseIfNecessary</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// For bugs in HttpURLConnection pre-Froyo</comment>

            <expr_stmt><expr><name>urlConnection</name> <operator>=</operator> <operator>(</operator><name>HttpURLConnection</name><operator>)</operator> <call><name><name>url</name><operator>.</operator><name>openConnection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setRequestProperty</name></name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setConnectTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_CONNECTION_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>setReadTimeout</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>HTTP_SOCKET_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>plan</name> <operator>=</operator> <call><name><name>JacksonConfig</name><operator>.</operator><name>getObjectReaderInstance</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>readValue</name><argument_list>(<argument><expr><call><name><name>urlConnection</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>SocketTimeoutException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Timeout fetching JSON or XML: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error fetching JSON or XML: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Reset timestamps to show there was an error</comment>
            <comment type="line">// requestStartTime = 0;</comment>
            <comment type="line">// requestEndTime = 0;</comment>
        </block_content>}</block></catch> <finally>finally <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>urlConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>urlConnection</name><operator>.</operator><name>disconnect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></finally></try>
        <return>return <expr><name>plan</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Disable HTTP connection reuse which was buggy pre-froyo
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>disableConnectionReuseIfNecessary</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>FROYO</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>setProperty</name></name><argument_list>(<argument><expr><literal type="string">"http.keepAlive"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/BikeRentalStationInfo.java" hash="aa56d33f539a96167d23f47ca23e077d230b53cb"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by foucelhas on 15/07/14.
 */</comment>
<class><specifier>public</specifier> class <name>BikeRentalStationInfo</name> <block>{

    <decl_stmt><decl><type><name>LatLng</name></type> <name>location</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BikeRentalStationInfo</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>LatLng</name></type> <name>getLocation</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>location</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>name</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/ConversionUtils.java" hash="cea58d79410e6d797fca8b5597cbc40c39547709"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Itinerary</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ForegroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StrikethroughSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TimeZone</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>ConversionUtils</name> <block>{

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>double</name></type> <name>getDuration</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>startTimeText</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endTimeText</name></decl></parameter>,
                                     <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>formatter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>startTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>, <decl><type ref="prev"/><name>endTime</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//		2012-03-09T22:46:00-05:00</comment>
        <expr_stmt><expr><name>formatter</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_OTP_SERVER_DATE_RESPONSE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{<block_content>
            <expr_stmt><expr><name>startTime</name> <operator>=</operator> <operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>formatter</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>startTimeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>endTime</name> <operator>=</operator> <operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>formatter</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>endTimeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <expr_stmt><expr><name>duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>startTime</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>endTime</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>normalizeDuration</name><argument_list>(<argument><expr><call><name><name>endTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>startTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>duration</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *
     * @param meters
     * @param applicationContext
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFormattedDistance</name><parameter_list>(<parameter><decl><type><name>Double</name></type> <name>meters</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>meters</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_DISTANCE_METERS</name></name></expr></argument>, <argument><expr><name>meters</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>applicationContext</name>
                    <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>distance_meters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>meters</name> <operator>=</operator> <name>meters</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>FORMAT_DISTANCE_KILOMETERS</name></name></expr></argument>, <argument><expr><name>meters</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>distance_kilometers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *
     * @param sec
     * @param applicationContext
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFormattedDurationText</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>h</name> <init>= <expr><name>sec</name> <operator>/</operator> <literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>sec</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>sec</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_short_hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_short_minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_short_seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     *
     * @param sec
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getFormattedDurationTextNoSeconds</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>longFormat</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>h</name> <init>= <expr><name>sec</name> <operator>/</operator> <literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>sec</name> <operator>%</operator> <literal type="number">3600</literal><operator>)</operator> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>longMinutes</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_long_minutes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>longMinutesSingular</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_long_minutes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>shortMinutes</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_short_minutes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>longFormat</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>longMinutes</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_full_minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>longMinutesSingular</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_full_minutes_singular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>shortHours</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_short_hours</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>shortHours</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>text</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>shortMinutes</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>+=</operator> <literal type="string">"&lt; 1 "</literal> <operator>+</operator> <name>longMinutes</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>m</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>longMinutesSingular</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>+=</operator> <call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>longMinutes</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><name>text</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>fixTimezoneOffsets</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itineraries</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>useDeviceTimezone</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>agencyTimeZoneOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>containsTransitLegs</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>itineraries</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>itineraries</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name></type> <name>itinerariesFixed</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Itinerary</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>itineraries</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>Itinerary</name></type> <name>it</name> <range>: <expr><name>itinerariesFixed</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>it</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>isTransit</name><argument_list>()</argument_list></call>
                            <operator>&amp;&amp;</operator> <operator>!</operator><name>containsTransitLegs</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>containsTransitLegs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>agencyTimeZoneOffset</name> <operator>=</operator> <name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr>;</expr_stmt>
                        <comment type="line">//If agencyTimeZoneOffset is different from 0, route contains transit legs</comment>
                        <expr_stmt><expr><name>containsTransitLegs</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><name>useDeviceTimezone</name> <operator>||</operator> <operator>!</operator><name>containsTransitLegs</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>agencyTimeZoneOffset</name> <operator>=</operator> <call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getOffset</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>itinerariesFixed</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>startTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>agencyTimeZoneOffset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>Itinerary</name></type> <name>it</name> <range>: <expr><name>itinerariesFixed</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name><name>it</name><operator>.</operator><name>legs</name></name></expr></range></decl></init>)</control> <block>{<block_content>
                        <expr_stmt><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name> <operator>=</operator> <name>agencyTimeZoneOffset</name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>itinerariesFixed</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>itineraries</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CharSequence</name></type> <name>getTimeWithContext</name> <parameter_list>(<parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetGMT</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>inLine</name></decl></parameter>)</parameter_list><block>{<block_content>
        <return>return <expr><call><name>getTimeWithContext</name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>, <argument><expr><name>offsetGMT</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>inLine</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CharSequence</name></type> <name>getTimeWithContext</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetGMT</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>inLine</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>timeFormat</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getTimeFormat</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>dateFormat</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getDateFormat</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>timeFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dateFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>noDeviceTimezoneNote</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetGMT</name> <operator>!=</operator> <call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>noDeviceTimezoneNote</name> <operator>=</operator> <literal type="string">"GMT"</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>offsetGMT</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>noDeviceTimezoneNote</name> <operator>+=</operator> <name>offsetGMT</name> <operator>/</operator> <literal type="number">3600000</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>offsetGMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">30</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>SpannableString</name></type> <name>spannableTime</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>timeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>spannableTime</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><call><name><name>spannableTime</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>inLine</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ConversionUtils</name><operator>.</operator><name>isToday</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name>
                            <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>spannableTime</name></expr></argument>,
                        <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ConversionUtils</name><operator>.</operator><name>isTomorrow</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name>
                            <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_next_day</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>spannableTime</name></expr></argument>,
                        <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><call><name><name>applicationContext</name>
                        <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_date</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_time</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>spannableTime</name></expr></argument>,
                        <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ConversionUtils</name><operator>.</operator><name>isToday</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>spannableTime</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>ConversionUtils</name><operator>.</operator><name>isTomorrow</name></name><argument_list>(<argument><expr><name>cal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>spannableTime</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name>
                            <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_next_day</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>spannableTime</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>,
                        <argument><expr><name>noDeviceTimezoneNote</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CharSequence</name></type> <name>getTimeUpdated</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offsetGMT</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>oldTime</name></decl></parameter>,
                                        <parameter><decl><type><name>long</name></type> <name>newTime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calOldTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calNewTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>timeFormat</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getTimeFormat</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>dateFormat</name> <init>= <expr><call><name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name><operator>.</operator><name>getDateFormat</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>timeFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dateFormat</name><operator>.</operator><name>setTimeZone</name></name><argument_list>(<argument><expr><call><name><name>TimeZone</name><operator>.</operator><name>getTimeZone</name></name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>timeUpdatedString</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>beforeDateString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>beforeTimeString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>newDateString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>, <decl><type ref="prev"/><name>timezone</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SpannableString</name></type> <name>oldTimeString</name></decl>,<decl><type ref="prev"/><name>oldDateString</name></decl>, <decl><type ref="prev"/><name>newTimeString</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calOldTime</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>oldTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calNewTime</name><operator>.</operator><name>setTimeInMillis</name></name><argument_list>(<argument><expr><name>newTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>noDeviceTimezoneNote</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>offsetGMT</name> <operator>!=</operator> <call><name><name>TimeZone</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getOffset</name><argument_list>(<argument><expr><name>oldTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>noDeviceTimezoneNote</name> <operator>=</operator> <literal type="string">"GMT"</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>offsetGMT</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>noDeviceTimezoneNote</name> <operator>+=</operator> <name>offsetGMT</name> <operator>/</operator> <literal type="number">3600000</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>calOldTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>offsetGMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calNewTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><name>offsetGMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>ConversionUtils</name><operator>.</operator><name>isTomorrow</name></name><argument_list>(<argument><expr><name>calNewTime</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldDateString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_next_day</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>beforeDateString</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_date</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>oldDateString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>calNewTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>calNewTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>calOldTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>beforeDateString</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_date</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>newDateString</name> <operator>=</operator> <call><name><name>dateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>calNewTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldDateString</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StrikethroughSpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>oldDateString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>beforeTimeString</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>time_connector_before_time</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>timezone</name> <operator>=</operator> <name>noDeviceTimezoneNote</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>getDelayColor</name><argument_list>(<argument><expr><call><name><name>calNewTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>calOldTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>newTimeString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>timeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>calNewTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>newTimeString</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>newTimeString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>calOldTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>calNewTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name><name>calOldTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>calNewTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>oldTimeString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>timeFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>calOldTime</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldTimeString</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StrikethroughSpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>oldTimeString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><name>oldTimeString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>timeUpdatedString</name> <operator>=</operator> <call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>beforeDateString</name></expr></argument>, <argument><expr><name>newDateString</name></expr></argument>, <argument><expr><name>oldDateString</name></expr></argument>,
                <argument><expr><name>beforeTimeString</name></expr></argument>, <argument><expr><name>oldTimeString</name></expr></argument>, <argument><expr><name>newTimeString</name></expr></argument>, <argument><expr><name>timezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>timeUpdatedString</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getDelayColor</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>delay</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysDarkGreen</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysDarkBlue</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <return>return <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sysDarkRed</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isToday</name><parameter_list>(<parameter><decl><type><name>Calendar</name></type> <name>cal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>actualTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>(</operator><call><name><name>actualTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>ERA</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>ERA</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>actualTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>actualTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isTomorrow</name><parameter_list>(<parameter><decl><type><name>Calendar</name></type> <name>cal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>tomorrowTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tomorrowTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>(</operator><call><name><name>tomorrowTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>ERA</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>ERA</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>tomorrowTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>tomorrowTime</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_YEAR</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Shows only the last n words of a sentence, being n the number of words to make the longer
     * sentence that still is smaller than maxLength.
     *
     * @param sentence phrase to shrink
     * @param maxLength max length of the new sentence
     * @return the reduced sentence
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>tailAndTruncateSentence</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sentence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name> <init>= <expr><call><name><name>sentence</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>reversedWords</name> <init>= <expr><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>modifiedSentence</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>word</name> <range>: <expr><name>reversedWords</name></expr></range></decl></init>)</control><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>modifiedSentence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>maxLength</name></expr>)</condition><block>{<block_content>
                <return>return <expr><name>modifiedSentence</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>modifiedSentence</name> <operator>=</operator> <name>word</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>modifiedSentence</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>modifiedSentence</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Always creates a correct value for the short name of the route. Using the routeShortName,
     * processing the long name if the short is null or returning an empty string if both names are
     * null.
     *
     * Route short name will be preceded by adequate connector.
     *
     * @param routeLongName to convert it to a route short name if necessary
     * @param routeShortName to be returned if is not null
     * @return a valid route short name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRouteShortNameSafe</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>routeShortName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>routeLongName</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>routeName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>routeShortName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>routeLongName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>routeName</name> <operator>+=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>connector_before_route</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>routeShortName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>routeName</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>routeShortName</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>routeLongName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>routeName</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>tailAndTruncateSentence</name><argument_list>(<argument><expr><name>routeLongName</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>route_short_name_max_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>routeName</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Always creates a correct value for the long name of the route. Using the routeLongName,
     * returning the short name if the long is null or returning an empty string if both names are
     * null.
     *
     * @param routeLongName to be returned if is not null
     * @param routeShortName to use if necessary
     * @return a valid route long name
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getRouteLongNameSafe</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>routeLongName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>routeShortName</name></decl></parameter>,
                                              <parameter><decl><type><name>boolean</name></type> <name>includeShortName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>routeName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>routeShortName</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>routeLongName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>routeLongName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>includeShortName</name> <operator>&amp;&amp;</operator> <name>routeShortName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>routeName</name> <operator>=</operator> <name>routeShortName</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>routeLongName</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><name>routeName</name> <operator>+=</operator> <name>routeLongName</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>routeShortName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>routeName</name> <operator>+=</operator> <name>routeShortName</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><name>routeName</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOverlayString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>defaultOverlay</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_tiles_default_server_high_res</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>densityDpi</name> <operator>&lt;</operator> <name><name>DisplayMetrics</name><operator>.</operator><name>DENSITY_HIGH</name></name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>defaultOverlay</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_tiles_default_server_low_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_MAP_TILE_SOURCE</name></name></expr></argument>, <argument><expr><name>defaultOverlay</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>normalizeDuration</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>normalizeDuration</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>normalizeDuration</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>SharedPreferences</name></type> <name>prefs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_API_VERSION</name></name></expr></argument>, <argument><expr><name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V1</name></name></expr></argument>)</argument_list></call>
                <operator>&lt;</operator> <name><name>OTPApp</name><operator>.</operator><name>API_VERSION_V1</name></name></expr>)</condition><block>{<block_content>
            <return>return <expr><name>duration</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>duration</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/CustomAddress.java" hash="77e3a7fc95a816d89e97eb97a5537537dbf60035"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by foucelhas on 18/08/14.
 */</comment>
<class><specifier>public</specifier> class <name>CustomAddress</name> <super_list><extends>extends <super><name>Address</name></super></extends></super_list> <block>{

    <constructor><specifier>public</specifier> <name>CustomAddress</name><parameter_list>(<parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><specifier>public</specifier> <name>CustomAddress</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLocale</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name><name>address</name><operator>.</operator><name>getMaxAddressLineIndex</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAddressLine</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setFeatureName</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getFeatureName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAdminArea</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getAdminArea</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setSubAdminArea</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getSubAdminArea</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setLocality</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLocality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setSubLocality</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getSubLocality</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setThoroughfare</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getThoroughfare</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setSubThoroughfare</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getSubThoroughfare</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setPostalCode</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getPostalCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setCountryCode</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getCountryCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setCountryName</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getCountryName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setPhone</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getPhone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setUrl</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setExtras</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getExtras</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getFeatureName</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getThoroughfare</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getThoroughfare</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getThoroughfare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getSubThoroughfare</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getSubThoroughfare</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getSubThoroughfare</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getAdminArea</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getAdminArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getAdminArea</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getSubAdminArea</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getSubAdminArea</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getSubAdminArea</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getLocality</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getLocality</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getFeatureName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getLocality</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>maxLines</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>OTPApp</name><operator>.</operator><name>ADDRESS_MAX_LINES_TO_SHOW</name></name> <operator>&gt;</operator> <call><name>getMaxAddressLineIndex</name><argument_list>()</argument_list></call><operator>)</operator></expr>
                    ?</condition><then> <expr><call><name>getMaxAddressLineIndex</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>OTPApp</name><operator>.</operator><name>ADDRESS_MAX_LINES_TO_SHOW</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getAddressLine</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxLines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">", "</literal> <operator>+</operator> <call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getStringAddress</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>multiline</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>maxLines</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>OTPApp</name><operator>.</operator><name>ADDRESS_MAX_LINES_TO_SHOW</name></name> <operator>&gt;</operator> <call><name>getMaxAddressLineIndex</name><argument_list>()</argument_list></call><operator>)</operator></expr>
                ?</condition><then> <expr><call><name>getMaxAddressLineIndex</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>OTPApp</name><operator>.</operator><name>ADDRESS_MAX_LINES_TO_SHOW</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>maxLines</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

            <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>getAddressLine</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>getAdminArea</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>multiline</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxLines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxLines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>getAddressLine</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/CustomInfoWindowAdapter.java" hash="4a875ae92952e0b3fdc36321d8b04a519e2efdbe"><comment type="block">/*
 * Copyright 2014 Vreixo Gonzalez on 2014
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ForegroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>GoogleMap</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>Marker</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>CustomInfoWindowAdapter</name> <super_list><implements>implements <super><name><name>GoogleMap</name><operator>.</operator><name>InfoWindowAdapter</name></name></super></implements></super_list><block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>LayoutInflater</name></type> <name>layoutInflater</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></type> <name>markers</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CustomInfoWindowAdapter</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>layoutInflater</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>layoutInflater</name></name> <operator>=</operator> <name>layoutInflater</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>getInfoWindow</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>getInfoContents</name><parameter_list>(<parameter><decl><type><name>Marker</name></type> <name>marker</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>View</name></type> <name>view</name>  <init>= <expr><call><name><name>layoutInflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>custom_info_window</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>title</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>customInfoWindowTitle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>snippet</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>customInfoWindowSnippet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TripInfo</name></type> <name>infoMarker</name> <init>= <expr><call><name><name>markers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>infoMarker</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>infoMarker</name><operator>.</operator><name>getSnippet</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>snippet</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>marker</name><operator>.</operator><name>getSnippet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>snippet</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>infoMarker</name><operator>.</operator><name>getSnippet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Boolean</name><operator>.</operator><name>TRUE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>infoMarker</name><operator>.</operator><name>realtime</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>TextView</name></type> <name>liveUpdatesText</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name>
                        <operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>customInfoWindowLiveUpdatesText</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>liveUpdatesText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>delayInSeconds</name> <init>= <expr><call><name><name>infoMarker</name><operator>.</operator><name>getDelayInSeconds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>delay</name> <init>= <expr><call><name><name>ConversionUtils</name>
                        <operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>delayInSeconds</name></expr></argument>,
                                <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name><name>ConversionUtils</name><operator>.</operator><name>getDelayColor</name></name><argument_list>(<argument><expr><name>delayInSeconds</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>delayText</name> <init>= <expr><literal type="string">"\u25cf"</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>delayInSeconds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>delayText</name> <operator>+=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_on_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>delayInSeconds</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>delayText</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>delay</name> <operator>+</operator> <literal type="string">" "</literal>
                            <operator>+</operator> <call><name><name>context</name>
                                <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_late_arrival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>positiveDelay</name> <init>= <expr><call><name><name>delay</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>delayText</name> <operator>+=</operator> <literal type="string">" "</literal> <operator>+</operator> <name>positiveDelay</name> <operator>+</operator> <literal type="string">" "</literal>
                            <operator>+</operator> <call><name><name>context</name>
                                <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>map_markers_warning_live_upates_early_arrival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <decl_stmt><decl><type><name>SpannableString</name></type> <name>delayFullText</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>delayText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>delayFullText</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>delayText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>liveUpdatesText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>delayFullText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMarkers</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Marker</name></argument>, <argument><name>TripInfo</name></argument>&gt;</argument_list></name></type> <name>markers</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>markers</name></name> <operator>=</operator> <name>markers</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/DateTimeDialog.java" hash="8d2fefefb990c3de8b3171e735a72f862be13808"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnClickListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>DatePicker</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TimePicker</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>MyActivity</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>ArriveBySpinnerItem</name></name>;</import>

<class><specifier>public</specifier> class <name>DateTimeDialog</name> <super_list><extends>extends
        <super><name>DialogFragment</name></super></extends></super_list> <comment type="block">/* implements DatePickerCompleteListener, TimePickerCompleteListener*/</comment> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Spinner</name></type> <name>spinScheduleType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>TimePicker</name></type> <name>pickerTime</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>DatePicker</name></type> <name>pickerDate</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Button</name></type> <name>btnOk</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Button</name></type> <name>btnCancel</name></decl>;</decl_stmt>

    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>date_time_dialog</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>spinScheduleType</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spinScheduleType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pickerTime</name> <operator>=</operator> <operator>(</operator><name>TimePicker</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>timePicker1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pickerDate</name> <operator>=</operator> <operator>(</operator><name>DatePicker</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>datePicker1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>btnOk</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnOk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>btnCancel</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnCancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getDialog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>date_time_selector_title</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getDialog</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCanceledOnTouchOutside</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setIs24HourView</name></name><argument_list>(<argument><expr><call><name><name>DateFormat</name><operator>.</operator><name>is24HourFormat</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//TimePicker state needs to be saved manually because of this bug in Android that affects at least ICS: http://code.google.com/p/android/issues/detail?id=22754</comment>
        <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setSaveFromParentEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclOk</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>pickerDate</name><operator>.</operator><name>getYear</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pickerDate</name><operator>.</operator><name>getMonth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pickerDate</name><operator>.</operator><name>getDayOfMonth</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>pickerTime</name><operator>.</operator><name>getCurrentHour</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pickerTime</name><operator>.</operator><name>getCurrentMinute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ArriveBySpinnerItem</name></type> <name>selectedSscheduleType</name> <init>= <expr><operator>(</operator><name>ArriveBySpinnerItem</name><operator>)</operator> <call><name><name>spinScheduleType</name>
                        <operator>.</operator><name>getSelectedItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>MyActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator>
                        <operator>.</operator><call><name>onDateComplete</name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedSscheduleType</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnOk</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>OnClickListener</name></type> <name>oclCancel</name> <init>= <expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnCancel</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>oclCancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>ArriveBySpinnerItem</name></argument>&gt;</argument_list></name></type> <name>arriveByTypeAdapter</name>
                <init>= <expr><operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>ArriveBySpinnerItem</name></argument>&gt;</argument_list></name><argument_list>(
                <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_dropdown_item</name></name></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>ArriveBySpinnerItem</name><index>[]</index></name><block>{<expr><operator>new</operator> <call><name>ArriveBySpinnerItem</name><argument_list>(
                        <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>date_time_selector_spinner_depart</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>new</operator> <call><name>ArriveBySpinnerItem</name><argument_list>(
                                <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>date_time_selector_spinner_arrive</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>spinScheduleType</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>arriveByTypeAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    </block_content>}</block></function>


    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>bundle</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getArguments</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Date</name></type> <name>tripDate</name> <init>= <expr><operator>(</operator><name>Date</name><operator>)</operator> <call><name><name>bundle</name><operator>.</operator><name>getSerializable</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TRIP_DATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>arriveBy</name> <init>= <expr><call><name><name>bundle</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_ARRIVE_BY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Calendar</name></type> <name>cal</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>cal</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>tripDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">//min time should preceede setted time and setted time will be set with 0 seconds, so we aloud one minute less</comment>
                    <expr_stmt><expr><call><name><name>pickerDate</name><operator>.</operator><name>setMinDate</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">//min time should preceede setted time and setted time will be set with 0 seconds, so we aloud one minute less</comment>
                    <expr_stmt><expr><call><name><name>pickerDate</name><operator>.</operator><name>setMinDate</name></name><argument_list>(<argument><expr><call><name><name>tripDate</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">60000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>cal</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><name>tripDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>arriveBy</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>spinScheduleType</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>spinScheduleType</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setCurrentHour</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setCurrentMinute</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pickerDate</name><operator>.</operator><name>updateDate</name></name><argument_list>(<argument><expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>cal</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">//TimePicker state needs to be saved manually because of this bug in Android that affects at least ICS: http://code.google.com/p/android/issues/detail?id=22754</comment>
            <expr_stmt><expr><name>bundle</name> <operator>=</operator> <name>savedInstanceState</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setCurrentHour</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TIMEPICKER_SAVED_HOUR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pickerTime</name><operator>.</operator><name>setCurrentMinute</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TIMEPICKER_SAVED_MINUTE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>


    </block_content>}</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//TimePicker state needs to be saved manually because of this bug in Android that affects at least ICS: http://code.google.com/p/android/issues/detail?id=22754</comment>
        <expr_stmt><expr><call><name><name>savedInstanceState</name>
                <operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TIMEPICKER_SAVED_HOUR</name></name></expr></argument>, <argument><expr><call><name><name>pickerTime</name><operator>.</operator><name>getCurrentHour</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>savedInstanceState</name>
                <operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>BUNDLE_KEY_TIMEPICKER_SAVED_MINUTE</name></name></expr></argument>, <argument><expr><call><name><name>pickerTime</name><operator>.</operator><name>getCurrentMinute</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/DirectionExpandableListAdapter.java" hash="1cd62808d240b437c8fcb935322f5c9c0bdcecb7"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseExpandableListAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Direction</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>DirectionExpandableListAdapter</name> <super_list><extends>extends <super><name>BaseExpandableListAdapter</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>directionLayoutResourceId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>subDirectionLayoutResourceId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Direction</name></type> <name><name>data</name><index>[]</index></name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DirectionExpandableListAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>directionLayoutResourceId</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>subDirectionLayoutResourceId</name></decl></parameter>, <parameter><decl><type><name><name>Direction</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directionLayoutResourceId</name></name> <operator>=</operator> <name>directionLayoutResourceId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subDirectionLayoutResourceId</name></name> <operator>=</operator> <name>subDirectionLayoutResourceId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Object</name></type> <name>getChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name> <init>= <expr><name><name>data</name><index>[<expr><name>groupPosition</name></expr>]</index></name><operator>.</operator><call><name>getSubDirections</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>subDirections</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>subDirections</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>subDirections</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>childPosition</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getChildId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>childPosition</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getChildrenCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name> <init>= <expr><name><name>data</name><index>[<expr><name>groupPosition</name></expr>]</index></name><operator>.</operator><call><name>getSubDirections</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>subDirections</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>subDirections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>getChildView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLastChild</name></decl></parameter>,
            <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>View</name></type> <name>row</name> <init>= <expr><name>convertView</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectionHolder</name></type> <name>holder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name><operator>)</operator><operator>.</operator><call><name>getLayoutInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>subDirectionLayoutResourceId</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>DirectionHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>imgIcon</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>imgIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>txtDirection</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>directionText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>DirectionHolder</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>Direction</name></type> <name>dir</name> <init>= <expr><name><name>data</name><index>[<expr><name>groupPosition</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Direction</name></type> <name>subDirection</name> <init>= <expr><operator>(</operator><name>Direction</name><operator>)</operator> <call><name>getChild</name><argument_list>(<argument><expr><name>groupPosition</name></expr></argument>, <argument><expr><name>childPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>text</name> <init>= <expr><ternary><condition><expr><name>subDirection</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null here"</literal></expr> </then><else>: <expr><call><name><name>subDirection</name><operator>.</operator><name>getDirectionText</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtDirection</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>subDirection</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>row</name></expr>;</return>

<comment type="line">//        return textView;</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Object</name></type> <name>getGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>data</name><index>[<expr><name>groupPosition</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getGroupCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>data</name><operator>.</operator><name>length</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>long</name></type> <name>getGroupId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name>groupPosition</name></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>getGroupView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isExpanded</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>,
            <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>View</name></type> <name>row</name> <init>= <expr><name>convertView</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DirectionHolder</name></type> <name>holder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name><operator>)</operator><operator>.</operator><call><name>getLayoutInflater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>directionLayoutResourceId</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>DirectionHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>imgIcon</name></name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>imgIcon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>noIconText</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>noIconText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>txtDirection</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>directionText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>DirectionHolder</name><operator>)</operator> <call><name><name>row</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>Direction</name></type> <name>dir</name> <init>= <expr><name><name>data</name><index>[<expr><name>groupPosition</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>dir</name><operator>.</operator><name>isTransit</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtDirection</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getDirectionIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <call><name><name>dir</name><operator>.</operator><name>getDirectionText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>textBeforeTime</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>getDirectionIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator>  <call><name><name>dir</name><operator>.</operator><name>getService</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>text</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>time</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>getOldTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>textBeforeTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>isRealTimeInfo</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>getNewTime</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>time</name> <operator>=</operator> <call><name><name>dir</name><operator>.</operator><name>getNewTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name><name>dir</name><operator>.</operator><name>getPlaceAndHeadsign</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getAgency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name><name>dir</name><operator>.</operator><name>getAgency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getExtra</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>SpannableString</name></type> <name>extraSpannableString</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getExtra</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>extraSpannableString</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>ITALIC</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><call><name><name>extraSpannableString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>TextUtils</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>extraSpannableString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>txtDirection</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>dir</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>noIconText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>imgIcon</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><call><name><name>dir</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>noIconText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>row</name></expr>;</return>

<comment type="line">//        return textView;</comment>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>isChildSelectable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>hasStableIds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <class><specifier>static</specifier> class <name>DirectionHolder</name> <block>{

        <decl_stmt><decl><type><name>ImageView</name></type> <name>imgIcon</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>noIconText</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>txtDirection</name></decl>;</decl_stmt>
    }</block></class>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/DirectionsGenerator.java" hash="7ef07a7514b7ecbe9fbb0e7694e837538617ee71"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>RelativeDirection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>core</name><operator>.</operator><name>TraverseModeSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>routing</name><operator>.</operator><name>patch</name><operator>.</operator><name>Alerts</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>AbsoluteDirection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Leg</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>Place</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>model</name><operator>.</operator><name>WalkStep</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Direction</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Generates a set of step-by-step directions that can be shown to the user from a list of trip
 * legs
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>DirectionsGenerator</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>legs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>totalDistance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>totalTimeTraveled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>applicationContext</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DirectionsGenerator</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Leg</name></argument>&gt;</argument_list></name></type> <name>legs</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>applicationContext</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>legs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>applicationContext</name></name> <operator>=</operator> <name>applicationContext</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>convertToDirectionList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return the directions
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>getDirections</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>directions</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param directions the directions to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirections</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>directions</name></name> <operator>=</operator> <name>directions</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDirection</name><parameter_list>(<parameter><decl><type><name>Direction</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>directions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>directions</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>convertToDirectionList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Leg</name></type> <name>leg</name> <range>: <expr><name>legs</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setTotalDistance</name><argument_list>(<argument><expr><call><name>getTotalDistance</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>TraverseMode</name></type> <name>traverseMode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>traverseMode</name><operator>.</operator><name>isOnStreetNonTransit</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Direction</name></type> <name>dir</name> <init>= <expr><call><name>generateNonTransitDirections</name><argument_list>(<argument><expr><name>leg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>setDirectionIndex</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>addDirection</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name> <init>= <expr><call><name>generateTransitDirections</name><argument_list>(<argument><expr><name>leg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>directions</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDirectionIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addDirection</name><argument_list>(<argument><expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDirectionIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addDirection</name><argument_list>(<argument><expr><call><name><name>directions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//			directionText+=leg.mode+"\n";</comment>
        </block_content>}</block></for>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>Direction</name></type> <name>generateNonTransitDirections</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Direction</name></type> <name>direction</name> <init>= <expr><operator>new</operator> <call><name>Direction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//http://opentripplanner.usf.edu/opentripplanner-api-webapp/ws/plan?optimize=QUICK&amp;time=09:24pm&amp;arriveBy=false&amp;wheelchair=false&amp;maxWalkDistance=7600.0&amp;fromPlace=28.033389%2C+-82.521034&amp;toPlace=28.064709%2C+-82.471618&amp;date=03/07/12&amp;mode=WALK,TRAM,SUBWAY,RAIL,BUS,FERRY,CABLE_CAR,GONDOLA,FUNICULAR,TRANSIT,TRAINISH,BUSISH</comment>

        <comment type="line">// Get appropriate action and icon</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>action</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_mode_walk_action</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TraverseMode</name></type> <name>mode</name> <init>= <expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>icon</name> <init>= <expr><call><name>getModeIcon</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TraverseModeSet</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>action</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_mode_bicycle_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>CAR</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>action</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_mode_car_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//		Main direction</comment>
        <decl_stmt><decl><type><name>Place</name></type> <name>fromPlace</name> <init>= <expr><name><name>leg</name><operator>.</operator><name>from</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Place</name></type> <name>toPlace</name> <init>= <expr><name><name>leg</name><operator>.</operator><name>to</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mainDirectionText</name> <init>= <expr><name>action</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mainDirectionText</name> <operator>+=</operator> <ternary><condition><expr><name><name>fromPlace</name><operator>.</operator><name>name</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr>
                </then><else>: <expr><literal type="string">" "</literal> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_from</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getLocalizedStreetName</name><argument_list>(<argument><expr><name><name>fromPlace</name><operator>.</operator><name>name</name></name></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>mainDirectionText</name> <operator>+=</operator> <ternary><condition><expr><name><name>toPlace</name><operator>.</operator><name>name</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr>
                </then><else>: <expr><literal type="string">" "</literal> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_to</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name>getLocalizedStreetName</name><argument_list>(<argument><expr><name><name>toPlace</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>extraStopInformation</name> <init>= <expr><name><name>toPlace</name><operator>.</operator><name>stopCode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>legDuration</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>legDuration</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>normalizeDuration</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>duration</name></name></expr></argument>, <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>extraStopInformation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mainDirectionText</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>extraStopInformation</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mainDirectionText</name> <operator>+=</operator> <literal type="string">"\n["</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                <operator>.</operator><name>getFormattedDistance</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>distance</name></name></expr></argument>, <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" - "</literal> <operator>+</operator>
                <call><name><name>ConversionUtils</name><operator>.</operator><name>getFormattedDurationTextNoSeconds</name></name><argument_list>(<argument><expr><name>legDuration</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call>
                <operator>+</operator> <literal type="string">" ]"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setDirectionText</name></name><argument_list>(<argument><expr><name>mainDirectionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Sub-direction</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WalkStep</name></argument>&gt;</argument_list></name></type> <name>walkSteps</name> <init>= <expr><call><name><name>leg</name><operator>.</operator><name>getSteps</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>walkSteps</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>direction</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>walkSteps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>WalkStep</name></type> <name>step</name> <range>: <expr><name>walkSteps</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>subdirection_icon</name> <init>= <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>clear</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Direction</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>Direction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>subDirectionText</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>distance</name> <init>= <expr><name><name>step</name><operator>.</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>RelativeDirection</name></type> <name>relativeDir</name> <init>= <expr><name><name>step</name><operator>.</operator><name>relativeDirection</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>relativeDirString</name> <init>= <expr><call><name>getLocalizedRelativeDir</name><argument_list>(<argument><expr><name>relativeDir</name></expr></argument>,
                    <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>streetName</name> <init>= <expr><name><name>step</name><operator>.</operator><name>streetName</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AbsoluteDirection</name></type> <name>absoluteDir</name> <init>= <expr><name><name>step</name><operator>.</operator><name>absoluteDirection</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>absoluteDirString</name> <init>= <expr><call><name>getLocalizedAbsoluteDir</name><argument_list>(<argument><expr><name>absoluteDir</name></expr></argument>,
                    <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>exit</name> <init>= <expr><name><name>step</name><operator>.</operator><name>exit</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isStayOn</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>step</name><operator>.</operator><name>stayOn</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>step</name><operator>.</operator><name>stayOn</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isBogusName</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>step</name><operator>.</operator><name>bogusName</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="boolean">false</literal></expr> </then><else>: <expr><name><name>step</name><operator>.</operator><name>bogusName</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lon</name> <init>= <expr><name><name>step</name><operator>.</operator><name>lon</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lat</name> <init>= <expr><name><name>step</name><operator>.</operator><name>lat</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>streetConnector</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_connector_street_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//Elevation[] elevation = step.getElevation();  //Removed elevation for now, since we're not doing anything with it and it causes version issues between OTP server APIs v0.9.1-SNAPSHOT and v0.9.2-SNAPSHOT</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Alerts</name></argument>&gt;</argument_list></name></type> <name>alert</name> <init>= <expr><name><name>step</name><operator>.</operator><name>alerts</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Walk East</comment>
            <if_stmt><if>if <condition>(<expr><name>relativeDir</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name>action</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_heading</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name>absoluteDirString</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// (Turn left)/(Continue)</comment>
            <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>RelativeDirection</name></type> <name>rDir</name> <init>= <expr><call><name><name>RelativeDirection</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>relativeDir</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>subdirection_icon</name> <operator>=</operator> <call><name>getRelativeDirectionIcon</name><argument_list>(<argument><expr><name>rDir</name></expr></argument>,
                        <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Do not need TURN Continue</comment>
                <if_stmt><if>if <condition>(<expr><call><name><name>rDir</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                        <call><name><name>rDir</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_turn</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name>relativeDirString</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>rDir</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_CLOCKWISE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
                        <operator>||</operator> <call><name><name>rDir</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_COUNTERCLOCKWISE</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>step</name><operator>.</operator><name>exit</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <try>try <block>{<block_content>
                            <decl_stmt><decl><type><name>String</name></type> <name>ordinal</name> <init>= <expr><call><name>getOrdinal</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>step</name><operator>.</operator><name>exit</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ordinal</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name>ordinal</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_number</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>ordinal</name>
                                        <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                            <comment type="line">//If is not a step_by_step_non_transit_roundabout_number and is not null is better to try to display it</comment>
                            <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name><name>step</name><operator>.</operator><name>exit</name></name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                        </block_content>}</block></catch></try>
                        <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_exit</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>streetConnector</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_connector_street_name_roundabout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <name>streetConnector</name> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <call><name>getLocalizedStreetName</name><argument_list>(<argument><expr><name>streetName</name></expr></argument>, <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <literal type="string">"\n["</literal> <operator>+</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getFormattedDistance</name></name><argument_list>(<argument><expr><name>distance</name></expr></argument>, <argument><expr><name>applicationContext</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" ]"</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>setDirectionText</name></name><argument_list>(<argument><expr><name>subDirectionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>subdirection_icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Add new sub-direction</comment>
            <expr_stmt><expr><call><name><name>subDirections</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setSubDirections</name></name><argument_list>(<argument><expr><name>subDirections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>direction</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getOrdinal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <switch>switch <condition>(<expr><name>number</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_first</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_second</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_third</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_fourth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_fifth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_sixth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">7</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_seventh</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">8</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_eighth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">9</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_ninth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <case>case <expr><literal type="number">10</literal></expr>:</case>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_roundabout_ordinal_tenth</name></name></expr></argument>)</argument_list></call></expr>;</return>
            <default>default:</default>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></switch>

    </block_content>}</block></function>

    <comment type="line">// Dirty fix to avoid the presence of names for unnamed streets (as road, track, etc.) for other languages than English</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalizedStreetName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>streetName</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>streetName</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"bike path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_bike_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"open area"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_open_area</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_path</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"bridleway"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_bridleway</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"footpath"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_footpath</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"platform"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_platform</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"footbridge"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_footbridge</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"underpass"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_underpass</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"road"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_road</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"ramp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_ramp</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_link</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"service road"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_service_road</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"alley"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_alley</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"parking aisle"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_parking_aisle</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"byway"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_byway</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"track"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_track</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"sidewalk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_sidewalk</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"osm:node:"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_sidewalk</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>streetName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"steps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_steps</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>streetName</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <block>{<block_content>
            <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>street_type_sidewalk</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalizedRelativeDir</name><parameter_list>(<parameter><decl><type><name>RelativeDirection</name></type> <name>relDir</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>relDir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_CLOCKWISE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_circle_clockwise</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_COUNTERCLOCKWISE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_circle_counterclockwise</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CONTINUE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_continue</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>DEPART</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_depart</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>ELEVATOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_elevator</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>HARD_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_hard_left</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>HARD_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_hard_right</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_left</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_right</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>SLIGHTLY_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_slightly_left</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>SLIGHTLY_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_slightly_right</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>UTURN_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_uturn_left</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>UTURN_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_relative_uturn_right</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalizedAbsoluteDir</name><parameter_list>(<parameter><decl><type><name>AbsoluteDirection</name></type> <name>absDir</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>absDir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>EAST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_east</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>NORTH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_north</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>NORTHEAST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_northeast</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>NORTHWEST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_northwest</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>SOUTH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_south</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>SOUTHEAST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_southeast</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>SOUTHWEST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_southwest</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>absDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AbsoluteDirection</name><operator>.</operator><name>WEST</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_non_transit_dir_absolute_west</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getLocalizedMode</name><parameter_list>(<parameter><decl><type><name>TraverseMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAM</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_tram</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>SUBWAY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_subway</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>RAIL</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_rail</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUS</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_bus</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FERRY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_ferry</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>CABLE_CAR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_cable_car</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>GONDOLA</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_gondola</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FUNICULAR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>resources</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_mode_funicular</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>generateTransitDirections</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>directions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>generateTransitSubdirection</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>directions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>generateTransitSubdirection</name><argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>directions</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Direction</name></type> <name>generateTransitSubdirection</name><parameter_list>(<parameter><decl><type><name>Leg</name></type> <name>leg</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isOnDirection</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>Direction</name></type> <name>direction</name> <init>= <expr><operator>new</operator> <call><name>Direction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setRealTimeInfo</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>realTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//		set icon</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>mode</name> <init>= <expr><call><name>getLocalizedMode</name><argument_list>(<argument><expr><call><name><name>TraverseMode</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>icon</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>route</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>agencyName</name> <init>= <expr><name><name>leg</name><operator>.</operator><name>agencyName</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Place</name></type> <name>from</name> <init>= <expr><name><name>leg</name><operator>.</operator><name>from</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Place</name></type> <name>to</name> <init>= <expr><name><name>leg</name><operator>.</operator><name>to</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>newTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>oldTime</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>shortName</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>tripShortName</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>shortName</name> <operator>=</operator> <name><name>leg</name><operator>.</operator><name>tripShortName</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><name>shortName</name> <operator>=</operator> <name><name>leg</name><operator>.</operator><name>routeShortName</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>route</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>getRouteLongNameSafe</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>routeLongName</name></name></expr></argument>, <argument><expr><name>shortName</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setTransit</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>action</name></decl>, <decl><type ref="prev"/><name>placeAndHeadsign</name></decl>, <decl><type ref="prev"/><name>extra</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>isOnDirection</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>action</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_get_on</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>placeAndHeadsign</name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <call><name>getModeIcon</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TraverseModeSet</name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>startTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>newTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><operator>-</operator> <name><name>leg</name><operator>.</operator><name>departureDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Only onDirection has subdirection (list of stops in between)</comment>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Place</name></argument>&gt;</argument_list></name></type> <name>stopsInBetween</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Place</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>leg</name><operator>.</operator><name>getIntermediateStops</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>leg</name><operator>.</operator><name>getIntermediateStops</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stopsInBetween</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>leg</name><operator>.</operator><name>getIntermediateStops</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>leg</name><operator>.</operator><name>stop</name></name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>leg</name><operator>.</operator><name>stop</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>stopsInBetween</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// sub-direction</comment>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name></type> <name>subDirections</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Direction</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>stopsInBetween</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Direction</name></type> <name>subDirection</name> <init>= <expr><operator>new</operator> <call><name>Direction</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Place</name></type> <name>stop</name> <init>= <expr><call><name><name>stopsInBetween</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>extraStopInformation</name> <init>= <expr><name><name>stop</name><operator>.</operator><name>stopCode</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>subDirectionText</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">". "</literal> <operator>+</operator> <name><name>stop</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>extraStopInformation</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>subDirectionText</name> <operator>+=</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>extraStopInformation</name> <operator>+</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>subDirection</name><operator>.</operator><name>setDirectionText</name></name><argument_list>(<argument><expr><name>subDirectionText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>subDirection</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>subDirections</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>subDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setSubDirections</name></name><argument_list>(<argument><expr><name>subDirections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>stopsInBetween</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>connector</name> <init>= <expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_stops_in_between</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>stopsInBetween</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>connector</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_stops_in_between_singular</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>extra</name> <operator>=</operator> <call><name><name>stopsInBetween</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>connector</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>headsign</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>placeAndHeadsign</name> <operator>+=</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <call><name><name>applicationContext</name>
                        <operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_connector_headsign</name></name></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>leg</name><operator>.</operator><name>headsign</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><name>action</name> <operator>=</operator> <call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_get_off</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>placeAndHeadsign</name> <operator>=</operator> <name><name>to</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>icon</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>newTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>leg</name><operator>.</operator><name>endTime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldTime</name><operator>.</operator><name>setTime</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>newTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>oldTime</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><operator>-</operator> <name><name>leg</name><operator>.</operator><name>arrivalDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setPlaceAndHeadsign</name></name><argument_list>(<argument><expr><call><name><name>applicationContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>step_by_step_transit_connector_stop_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal>
                <operator>+</operator> <name>placeAndHeadsign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setService</name></name><argument_list>(<argument><expr><name>action</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>mode</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>route</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setAgency</name></name><argument_list>(<argument><expr><name>agencyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setExtra</name></name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SpannableString</name></type> <name>oldTimeString</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>leg</name><operator>.</operator><name>realTime</name></name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>CharSequence</name></type> <name>newTimeString</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>newTimeString</name> <operator>=</operator> <call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeUpdated</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>oldTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>newTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setNewTime</name></name><argument_list>(<argument><expr><name>newTimeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>oldTimeString</name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>ConversionUtils</name>
                    <operator>.</operator><name>getTimeWithContext</name></name><argument_list>(<argument><expr><name>applicationContext</name></expr></argument>, <argument><expr><name><name>leg</name><operator>.</operator><name>agencyTimeZoneOffset</name></name></expr></argument>,
                            <argument><expr><call><name><name>oldTime</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>direction</name><operator>.</operator><name>setOldTime</name></name><argument_list>(<argument><expr><name>oldTimeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>direction</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getModeIcon</name><parameter_list>(<parameter><decl><type><name>TraverseModeSet</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<comment type="block">/*mode.contains(TraverseMode.FERRY) &amp;&amp; TODO */</comment>
                <expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_transit</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_bus</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_train</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FERRY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_ferry</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>GONDOLA</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_ferry</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>SUBWAY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_metro</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAM</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_train</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>WALK</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_walk</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BICYCLE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>mode_bike</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getNotificationIcon</name><parameter_list>(<parameter><decl><type><name>TraverseModeSet</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<comment type="block">/*mode.contains(TraverseMode.FERRY) &amp;&amp; TODO */</comment>
                <expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                        <call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transit_notification</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>BUSISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>bus_notification</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>TRAINISH</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>train_notification</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>FERRY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ferry_notification</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>mode</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>TraverseMode</name><operator>.</operator><name>SUBWAY</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>metro_notification</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>getRelativeDirectionIcon</name><parameter_list>(<parameter><decl><type><name>RelativeDirection</name></type> <name>relDir</name></decl></parameter>, <parameter><decl><type><name>Resources</name></type> <name>resources</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_CLOCKWISE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>circle_clockwise</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CIRCLE_COUNTERCLOCKWISE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>circle_counterclockwise</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>CONTINUE</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>reldir_continue</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>DEPART</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>clear</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>ELEVATOR</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>elevator</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>HARD_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>hard_left</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>HARD_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>hard_right</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>left</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>right</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>SLIGHTLY_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slightly_left</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>SLIGHTLY_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>slightly_right</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>UTURN_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>uturn_left</name></name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>relDir</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>RelativeDirection</name><operator>.</operator><name>UTURN_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>uturn_right</name></name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>clear</name></name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the totalDistance
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTotalDistance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>totalDistance</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @param totalDistance the totalDistance to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTotalDistance</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalDistance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalDistance</name></name> <operator>=</operator> <name>totalDistance</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * @return the totalTimeTraveled
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTotalTimeTraveled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>legs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>Leg</name></type> <name>legStart</name> <init>= <expr><call><name><name>legs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>startTimeText</name> <init>= <expr><name><name>legStart</name><operator>.</operator><name>startTime</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Leg</name></type> <name>legEnd</name> <init>= <expr><call><name><name>legs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>legs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>endTimeText</name> <init>= <expr><name><name>legEnd</name><operator>.</operator><name>endTime</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>totalTimeTraveled</name> <operator>=</operator> <call><name><name>ConversionUtils</name><operator>.</operator><name>getDuration</name></name><argument_list>(<argument><expr><name>startTimeText</name></expr></argument>, <argument><expr><name>endTimeText</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>totalTimeTraveled</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/ExpandableListFragment.java" hash="bb13c1384a97f9e6bf9481bc889e236d5a321614"><comment type="block">/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextMenu</name><operator>.</operator><name>ContextMenuInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnCreateContextMenuListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ExpandableListAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ExpandableListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ProgressBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Khoa Tran
 * @see android.support.v4.app.ListFragment
 * @see android.app.ExpandableListActivity
 */</comment>

<class><specifier>public</specifier> class <name>ExpandableListFragment</name> <super_list><extends>extends <super><name>Fragment</name></super></extends>
        <implements>implements <super><name>OnCreateContextMenuListener</name></super>,
        <super><name><name>ExpandableListView</name><operator>.</operator><name>OnChildClickListener</name></name></super>, <super><name><name>ExpandableListView</name><operator>.</operator><name>OnGroupCollapseListener</name></name></super>,
        <super><name><name>ExpandableListView</name><operator>.</operator><name>OnGroupExpandListener</name></name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTERNAL_EMPTY_ID</name> <init>= <expr><literal type="number">0x00ff0001</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTERNAL_PROGRESS_CONTAINER_ID</name> <init>= <expr><literal type="number">0x00ff0002</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INTERNAL_LIST_CONTAINER_ID</name> <init>= <expr><literal type="number">0x00ff0003</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>Handler</name></type> <name>mHandler</name> <init>= <expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name>Runnable</name></type> <name>mRequestFocus</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>focusableViewAvailable</name></name><argument_list>(<argument><expr><name>mExpandableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></type> <name>mOnClickListener</name>
            <init>= <expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><type><specifier>public</specifier> <name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>onListItemClick</name><argument_list>(<argument><expr><operator>(</operator><name>ExpandableListView</name><operator>)</operator> <name>parent</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ExpandableListAdapter</name></type> <name>mAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ExpandableListView</name></type> <name>mExpandableList</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>mFinishedStart</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>mEmptyView</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TextView</name></type> <name>mStandardEmptyView</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>mProgressContainer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>mExpandableListContainer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CharSequence</name></type> <name>mEmptyText</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>mExpandableListShown</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExpandableListFragment</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Provide default implementation to return a simple list view.  Subclasses
     * can override to replace with their own layout.  If doing so, the
     * returned view hierarchy &lt;em&gt;must&lt;/em&gt; have a ListView whose id
     * is {@link android.R.id#list android.R.id.list} and can optionally
     * have a sibling view id {@link android.R.id#empty android.R.id.empty}
     * that is to be shown when the list is empty.
     *
     * &lt;p&gt;If you are overriding this method with your own custom content,
     * consider including the standard layout {@link android.R.layout#list_content}
     * in your layout file, so that you continue to retain all of the standard
     * behavior of ListFragment.  In particular, this is currently the only
     * way to have the built-in indeterminant progress state be shown.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
            <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>FrameLayout</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>FrameLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// ------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>LinearLayout</name></type> <name>pframe</name> <init>= <expr><operator>new</operator> <call><name>LinearLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pframe</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>INTERNAL_PROGRESS_CONTAINER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pframe</name><operator>.</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>LinearLayout</name><operator>.</operator><name>VERTICAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pframe</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pframe</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ProgressBar</name></type> <name>progress</name> <init>= <expr><operator>new</operator> <call><name>ProgressBar</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>progressBarStyleLarge</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pframe</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>pframe</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>FrameLayout</name></type> <name>lframe</name> <init>= <expr><operator>new</operator> <call><name>FrameLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lframe</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>INTERNAL_LIST_CONTAINER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>new</operator> <call><name>TextView</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>INTERNAL_EMPTY_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lframe</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ExpandableListView</name></type> <name>lv</name> <init>= <expr><operator>new</operator> <call><name>ExpandableListView</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lv</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lv</name><operator>.</operator><name>setDrawSelectorOnTop</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lframe</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>lv</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>lframe</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(
                <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FILL_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>root</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Attach to list view once the view hierarchy has been created.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Detach from list view.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>removeCallbacks</name></name><argument_list>(<argument><expr><name>mRequestFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mExpandableList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mExpandableListShown</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mEmptyView</name> <operator>=</operator> <name>mProgressContainer</name> <operator>=</operator> <name>mExpandableListContainer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mStandardEmptyView</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This method will be called when an item in the list is selected.
     * Subclasses should override. Subclasses can call
     * getListView().getItemAtPosition(position) if they need to access the
     * data associated with the selected item.
     *
     * @param l        The ListView where the click happened
     * @param v        The view that was clicked within the ListView
     * @param position The position of the view in the list
     * @param id       The row id of the item that was clicked
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>onListItemClick</name><parameter_list>(<parameter><decl><type><name>ExpandableListView</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Provide the cursor for the list view.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setListAdapter</name><parameter_list>(<parameter><decl><type><name>ExpandableListAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hadAdapter</name> <init>= <expr><name>mAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <name>adapter</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mExpandableList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mExpandableListShown</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hadAdapter</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// The list was hidden, and previously didn't have an</comment>
                <comment type="line">// adapter.  It is now time to show it.</comment>
                <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowToken</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Set the currently selected list item to the specified
     * position with the adapter's data
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelection</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the position of the currently selected list item.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSelectedItemPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>mExpandableList</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the cursor row ID of the currently selected list item.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSelectedItemId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>mExpandableList</name><operator>.</operator><name>getSelectedItemId</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the activity's list view widget.
     */</comment>
    <function><type><specifier>public</specifier> <name>ExpandableListView</name></type> <name>getListView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mExpandableList</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * The default content for a ListFragment has a TextView that can
     * be shown when the list is empty.  If you would like to have it
     * shown, call this method to supply the text it should use.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEmptyText</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mStandardEmptyView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Can't be used with a custom content view"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mEmptyText</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>mStandardEmptyView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mEmptyText</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Control whether the list is being displayed.  You can make it not
     * displayed if you are waiting for the initial data to show in it.  During
     * this time an indeterminant progress indicator will be shown instead.
     *
     * &lt;p&gt;Applications do not normally need to use this themselves.  The default
     * behavior of ListFragment is to start with the list not being shown, only
     * showing it once an adapter is given with setListAdapter(ListAdapter).
     * If the list at that point had not been shown, when it does get shown
     * it will be do without the user ever seeing the hidden state.
     *
     * @param shown If true, the list view is shown; if false, the progress
     *              indicator.  The initial value is true.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setListShown</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Like {@link #setListShown(boolean)}, but no animation is used when
     * transitioning from the previous state.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setListShownNoAnimation</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><name>shown</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Control whether the list is being displayed.  You can make it not
     * displayed if you are waiting for the initial data to show in it.  During
     * this time an indeterminant progress indicator will be shown instead.
     *
     * @param shown   If true, the list view is shown; if false, the progress
     *                indicator.  The initial value is true.
     * @param animate If true, an animation will be used to transition to the
     *                new state.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>setListShown</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shown</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>animate</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mProgressContainer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Can't be used with a custom content view"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>mExpandableListShown</name> <operator>==</operator> <name>shown</name></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mExpandableListShown</name> <operator>=</operator> <name>shown</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>shown</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>animate</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>animate</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                        <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>mProgressContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mExpandableListContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the ListAdapter associated with this activity's ListView.
     */</comment>
    <function><type><specifier>public</specifier> <name>ExpandableListAdapter</name></type> <name>getListAdapter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mAdapter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>ensureList</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mExpandableList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>View</name></type> <name>root</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Content view not yet created"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>instanceof</operator> <name>ExpandableListView</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mExpandableList</name> <operator>=</operator> <operator>(</operator><name>ExpandableListView</name><operator>)</operator> <name>root</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>mStandardEmptyView</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>INTERNAL_EMPTY_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mStandardEmptyView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mEmptyView</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>mProgressContainer</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>INTERNAL_PROGRESS_CONTAINER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mExpandableListContainer</name> <operator>=</operator> <call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>INTERNAL_LIST_CONTAINER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>View</name></type> <name>rawExpandableListView</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rawExpandableListView</name> <operator>instanceof</operator> <name>ExpandableListView</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>rawExpandableListView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
                            <argument><expr><literal type="string">"Your content must have a ListView whose id attribute is "</literal> <operator>+</operator>
                                    <literal type="string">"'android.R.id.list'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                </block_content>}</block></if></if_stmt>
                <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
                        <argument><expr><literal type="string">"Content has view with id attribute 'android.R.id.list' "</literal>
                                <operator>+</operator> <literal type="string">"that is not a ListView class"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>mExpandableList</name> <operator>=</operator> <operator>(</operator><name>ExpandableListView</name><operator>)</operator> <name>rawExpandableListView</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>mEmptyView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>mEmptyView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>mEmptyText</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>mStandardEmptyView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>mEmptyText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>mStandardEmptyView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>mExpandableListShown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><name>mOnClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>ExpandableListAdapter</name></type> <name>adapter</name> <init>= <expr><name>mAdapter</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mAdapter</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// We are starting without an adapter, so assume we won't</comment>
            <comment type="line">// have our data right away and start with the progress indicator.</comment>
            <if_stmt><if>if <condition>(<expr><name>mProgressContainer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>setListShown</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name><name>mHandler</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><name>mRequestFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Override this to populate the context menu when an item is long pressed. menuInfo
     * will contain an {@link android.widget.ExpandableListView.ExpandableListContextMenuInfo}
     * whose packedPosition is a packed position
     * that should be used with {@link ExpandableListView#getPackedPositionType(long)} and
     * the other similar methods.
     * &lt;p&gt;
     * {@inheritDoc}
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>onCreateContextMenu</name><parameter_list>(<parameter><decl><type><name>ContextMenu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ContextMenuInfo</name></type> <name>menuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Override this for receiving callbacks when a child has been clicked.
     * &lt;p&gt;
     * {@inheritDoc}
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>onChildClick</name><parameter_list>(<parameter><decl><type><name>ExpandableListView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Override this for receiving callbacks when a group has been collapsed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>onGroupCollapse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Override this for receiving callbacks when a group has been expanded.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>onGroupExpand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
    </block_content>}</block></function>

<comment type="line">//    /**</comment>
<comment type="line">//     * Ensures the expandable list view has been created before Activity restores all</comment>
<comment type="line">//     * of the view states.</comment>
<comment type="line">//     * </comment>
<comment type="line">//     *@see Activity#onRestoreInstanceState(Bundle)</comment>
<comment type="line">//     */</comment>
<comment type="line">//    @Override</comment>
<comment type="line">//    protected void onRestoreInstanceState(Bundle state) {</comment>
<comment type="line">//        ensureList();</comment>
<comment type="line">//        super.onRestoreInstanceState(state);</comment>
<comment type="line">//    }</comment>

    <comment type="block" format="javadoc">/**
     * Updates the screen state (current list and other views) when the
     * content changes.
     *
     * @see Activity.onContentChanged()
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>onContentChanged</name><parameter_list>()</parameter_list> <block>{<block_content>
<comment type="line">//        super.onContentChanged();</comment>
        <decl_stmt><decl><type><name>View</name></type> <name>emptyView</name> <init>= <expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mExpandableList</name> <operator>=</operator> <operator>(</operator><name>ExpandableListView</name><operator>)</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>mExpandableList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(
                    <argument><expr><literal type="string">"Your content must have a ExpandableListView whose id attribute is "</literal> <operator>+</operator>
                            <literal type="string">"'android.R.id.list'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>emptyView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>emptyView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setOnChildClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setOnGroupExpandListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setOnGroupCollapseListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>mFinishedStart</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setListAdapter</name><argument_list>(<argument><expr><name>mAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>mFinishedStart</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the activity's expandable list view widget.  This can be used to get the selection,
     * set the selection, and many other useful functions.
     *
     * @see ExpandableListView
     */</comment>
    <function><type><specifier>public</specifier> <name>ExpandableListView</name></type> <name>getExpandableListView</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>ensureList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>mExpandableList</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the ExpandableListAdapter associated with this activity's
     * ExpandableListView.
     */</comment>
    <function><type><specifier>public</specifier> <name>ExpandableListAdapter</name></type> <name>getExpandableListAdapter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>mAdapter</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the ID of the currently selected group or child.
     *
     * @return The ID of the currently selected group or child.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSelectedId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>mExpandableList</name><operator>.</operator><name>getSelectedId</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the position (in packed position representation) of the currently
     * selected group or child. Use
     * {@link ExpandableListView#getPackedPositionType},
     * {@link ExpandableListView#getPackedPositionGroup}, and
     * {@link ExpandableListView#getPackedPositionChild} to unpack the returned
     * packed position.
     *
     * @return A packed position representation containing the currently
     * selected group or child's position and type.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSelectedPosition</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>mExpandableList</name><operator>.</operator><name>getSelectedPosition</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the selection to the specified child. If the child is in a collapsed
     * group, the group will only be expanded and child subsequently selected if
     * shouldExpandGroup is set to true, otherwise the method will return false.
     *
     * @param groupPosition     The position of the group that contains the child.
     * @param childPosition     The position of the child within the group.
     * @param shouldExpandGroup Whether the child's group should be expanded if
     *                          it is collapsed.
     * @return Whether the selection was successfully set on the child.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>setSelectedChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>childPosition</name></decl></parameter>,
            <parameter><decl><type><name>boolean</name></type> <name>shouldExpandGroup</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>mExpandableList</name><operator>.</operator><name>setSelectedChild</name></name><argument_list>(<argument><expr><name>groupPosition</name></expr></argument>, <argument><expr><name>childPosition</name></expr></argument>, <argument><expr><name>shouldExpandGroup</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the selection to the specified group.
     *
     * @param groupPosition The position of the group that should be selected.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedGroup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupPosition</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>mExpandableList</name><operator>.</operator><name>setSelectedGroup</name></name><argument_list>(<argument><expr><name>groupPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/JacksonConfig.java" hash="86f611274fa8697da63d185895fd141399efc5f2"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectReader</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>api</name><operator>.</operator><name>ws</name><operator>.</operator><name>Response</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>

<import>import static <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name><operator>.</operator><name>TAG</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class holds a static instance of a Jackson ObjectMapper and ObjectReader
 * that are configured for parsing server JSON responses.
 *
 * The ObjectMapper, ObjectReader, and XmlMapper are thread-safe after it is
 * configured: http://wiki.fasterxml.com/JacksonFAQThreadSafety
 *
 * ...so we can configure it once here and then use it in multiple fragments.
 *
 * @author Sean J. Barbeau
 */</comment>
<class><specifier>public</specifier> class <name>JacksonConfig</name> <block>{

    <comment type="line">// For JSON</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>mapper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectReader</name></type> <name>reader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// For caching objects (ObjectMapper, ObjectReader, and XmlMapper) if</comment>
    <comment type="line">// desired</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Used to time cache read and write</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>cacheReadStartTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>cacheReadEndTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>cacheWriteStartTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>cacheWriteEndTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>usingCache</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Constants for defining which object type to read/write from/to cache</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OBJECT_READER</name> <init>= <expr><literal type="string">"ObjectReader"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>OBJECT_MAPPER</name> <init>= <expr><literal type="string">"ObjectMapper"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CACHE_FILE_EXTENSION</name> <init>= <expr><literal type="string">".cache"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Used to format decimals to 3 places</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>DecimalFormat</name></type> <name>df</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"#,###.###"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Private empty constructor since this object shouldn't be instantiated</comment>
    <constructor><specifier>private</specifier> <name>JacksonConfig</name><parameter_list>()</parameter_list> <block>{<block_content>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns true if the application is using a cache to read/write serialized
     * Jackson ObjectMapper/ObjectReader/XmlMapper to reduce cold-start latency,
     * false if it is not
     *
     * @return true if the application is using a cache to read/write serialized
     * Jackson ObjectMapper/ObjectReader/XmlMapper to reduce cold-start
     * latency, false if it is not
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isUsingCache</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// Check to see if the context is null. If it is, we can't cache data.</comment>
        <if_stmt><if>if <condition>(<expr><name>usingCache</name> <operator>&amp;&amp;</operator> <name>context</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>usingCache</name> <operator>||</operator> <name>context</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Should never reach here</comment>
        <return>return <expr><name>usingCache</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * True if the application should use a cache to read/write serialized
     * Jackson ObjectMapper/ObjectReader/XmlMapper to reduce cold-start latency,
     * false if it should not
     *
     * @param usingCache True if the application should use a cache to read/write
     *                   serialized Jackson ObjectMapper/ObjectReader/XmlMapper to
     *                   reduce cold-start latency, false if it should not
     * @param context    Context that should be used to access the cache location.
     *                   getApplicationContext() is suggested, since the Jackson
     *                   Objects are thread-safe and static
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>setUsingCache</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>usingCache</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>JacksonConfig</name><operator>.</operator><name>usingCache</name></name> <operator>=</operator> <name>usingCache</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>JacksonConfig</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a benchmark of the amount of time the last cache read took for
     * the ObjectMapper or ObjectReader or XmlReader (in nanoseconds)
     *
     * @return a benchmark of the amount of time the last cache read took for
     * the ObjectMapper or ObjectReader or XmlReader (in nanoseconds)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getLastCacheReadTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cacheReadEndTime</name> <operator>-</operator> <name>cacheReadStartTime</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a benchmark of the amount of time the last cache write took for
     * the ObjectMapper or ObjectReader or XmlReader (in nanoseconds)
     *
     * @return a benchmark of the amount of time the last cache write took for
     * the ObjectMapper or ObjectReader or XmlReader (in nanoseconds)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>long</name></type> <name>getLastCacheWriteTime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>cacheWriteEndTime</name> <operator>-</operator> <name>cacheWriteStartTime</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs a thread-safe instance of a Jackson ObjectMapper configured to
     * parse JSON responses from a OTP REST API.
     *
     * According to Jackson Best Practices
     * (http://wiki.fasterxml.com/JacksonBestPracticesPerformance), for
     * efficiency reasons you should use the ObjectReader (via
     * getObjectReaderInstance()) instead of the ObjectMapper.
     *
     * @return thread-safe ObjectMapper configured for OTP JSON responses
     * @deprecated
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>getObjectMapperInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>initObjectMapper</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Constructs a thread-safe instance of a Jackson ObjectReader configured to
     * parse JSON responses from a Mobile OTP API
     *
     * According to Jackson Best Practices
     * (http://wiki.fasterxml.com/JacksonBestPracticesPerformance), this should
     * be more efficient than the ObjectMapper.
     *
     * @return thread-safe ObjectMapper configured for OTP JSON responses
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>ObjectReader</name></type> <name>getObjectReaderInstance</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="block" format="javadoc">/**
             * We don't have a reference to an ObjectReader, so we need to read
             * from cache or instantiate a new one
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>usingCache</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>(</operator><name>ObjectReader</name><operator>)</operator> <call><name>readFromCache</name><argument_list>(<argument><expr><name>OBJECT_READER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>reader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Successful read from the cache</comment>
                    <return>return <expr><name>reader</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" format="javadoc">/**
             * If we reach this point then we're either not reading from the
             * cache, there was nothing in the cache to retrieve, or there was
             * an error reading from the cache.
             *
             * Instantiate the object like normal.
             */</comment>
            <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name>initObjectMapper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reader</name><argument_list>(<argument><expr><name><name>Response</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>reader</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Internal method used to init main ObjectMapper for JSON parsing
     *
     * @return initialized ObjectMapper ready for JSON parsing
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>ObjectMapper</name></type> <name>initObjectMapper</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <comment type="block" format="javadoc">/**
             * We don't have a reference to an ObjectMapper, so we need to read
             * from cache or instantiate a new one
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>usingCache</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>(</operator><name>ObjectMapper</name><operator>)</operator> <call><name>readFromCache</name><argument_list>(<argument><expr><name>OBJECT_MAPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>mapper</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Successful read from the cache</comment>
                    <return>return <expr><name>mapper</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block" format="javadoc">/**
             * If we reach this point then we're either not reading from the
             * cache, there was nothing in the cache to retrieve, or there was
             * an error reading from the cache.
             *
             * Instantiate the object like normal.
             */</comment>
            <comment type="line">// Jackson configuration</comment>
            <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>ACCEPT_SINGLE_VALUE_AS_ARRAY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>ACCEPT_EMPTY_STRING_AS_NULL_OBJECT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>USE_JAVA_ARRAY_FOR_JSON_ARRAY</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>READ_ENUMS_USING_TO_STRING</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>mapper</name></expr>;</return>
    </block_content>}</block></function>


    <comment type="block" format="javadoc">/**
     * Forces the write of a ObjectMapper or ObjectReader to the app
     * cache. The cache is used to reduce the cold-start delay for Jackson
     * parsing on future runs, after this VM instance is destroyed.
     *
     * Applications may call this after a JSON or XML call to the server to
     * attempt to hide the cache write latency from the user, instead of having
     * the cache write occur as part of the first request to use the
     * ObjectMapper or ObjectReader.
     *
     *
     * This method is non-blocking.
     *
     * @param object object to be written to the cache
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>forceCacheWrite</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Serializable</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isUsingCache</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name>writeToCache</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>

                <empty_stmt>;</empty_stmt>
            }</block></class><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
                    <argument><expr><literal type="string">"App tried to force a cache write but caching is not activated.  If you want to use the cache, call JacksonConfig.setUsingCache(true, context) with a reference to your context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Forces the read of a ObjectMapper or ObjectReader from the
     * app cache to be stored as a static instance in this object. The cache is
     * used to reduce the cold-start delay for Jackson parsing on future runs,
     * after this VM instance is destroyed.
     *
     * Applications should call this on startup to attempt to hide the cache
     * read latency from the user, instead of having the cache read occur on the
     * first request to use the ObjectMapper or ObjectReader.
     *
     * This method is non-blocking.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>forceCacheRead</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isUsingCache</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>new</operator> <class><super><name>Thread</name></super><argument_list>()</argument_list> <block>{
                <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name>readFromCache</name><argument_list>(<argument><expr><name>OBJECT_MAPPER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>readFromCache</name><argument_list>(<argument><expr><name>OBJECT_READER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>

                <empty_stmt>;</empty_stmt>
            }</block></class><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
                    <argument><expr><literal type="string">"App tried to force a cache write but caching is not activated.  If you want to use the cache, call JacksonConfig.setUsingCache(true, context) with a reference to your context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Write the given object to Android internal storage for this app
     *
     * @param object serializable object to be written to cache (ObjectReader,
     *               ObjectMapper, or XmlReader)
     * @return true if object was successfully written to cache, false if it was
     * not
     */</comment>
    <function><type><specifier>private</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>writeToCache</name><parameter_list>(<parameter><decl><type><name>Serializable</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fileStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ObjectOutputStream</name></type> <name>objectStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>ObjectMapper</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fileName</name> <operator>=</operator> <name>OBJECT_MAPPER</name> <operator>+</operator> <name>CACHE_FILE_EXTENSION</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>ObjectReader</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>fileName</name> <operator>=</operator> <name>OBJECT_READER</name> <operator>+</operator> <name>CACHE_FILE_EXTENSION</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>cacheWriteStartTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fileStream</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>openFileOutput</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,
                        <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>objectStream</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectOutputStream</name><argument_list>(<argument><expr><name>fileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>objectStream</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>objectStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fileStream</name><operator>.</operator><name>getFD</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cacheWriteEndTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                <comment type="line">// Get size of serialized object</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>fileSize</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getFileStreamPath</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"TAG"</literal></expr></argument>, <argument><expr><literal type="string">"Wrote "</literal> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">" to cache ("</literal> <operator>+</operator> <name>fileSize</name>
                        <operator>+</operator> <literal type="string">" bytes) in "</literal> <operator>+</operator> <call><name><name>df</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>getLastCacheWriteTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" ms."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Reset timestamps to show there was an error</comment>
                <expr_stmt><expr><name>cacheWriteStartTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cacheWriteEndTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Couldn't write Jackson object '"</literal> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">"' to cache: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <try>try <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>objectStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>objectStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fileStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>fileStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Error closing file connections: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></finally></try>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
                    <argument><expr><literal type="string">"Can't write to cache - no context provided.  If you want to use the cache, call JacksonConfig.setUsingCache(true, context) with a reference to your context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>success</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Read the given object from Android internal storage for this app
     *
     * @param objectType object type, defined by class constant Strings, to retrieve
     *                   from cache (ObjectReader, ObjectMapper, or XmlReader)
     * @return deserialized Object, or null if object couldn't be deserialized
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <name>Serializable</name></type> <name>readFromCache</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>objectType</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fileStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ObjectInputStream</name></type> <name>objectStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Holds object to be read from cache</comment>
        <decl_stmt><decl><type><name>Serializable</name></type> <name>object</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Before reading from cache, check to make sure that we don't already</comment>
        <comment type="line">// have the requested object in memory</comment>
        <if_stmt><if>if <condition>(<expr><call><name><name>objectType</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>OBJECT_MAPPER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>mapper</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>mapper</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>objectType</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>OBJECT_READER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>reader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>reader</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>context</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><name>objectType</name> <operator>+</operator> <name>CACHE_FILE_EXTENSION</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>cacheReadStartTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fileStream</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>openFileInput</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>objectStream</name> <operator>=</operator> <operator>new</operator> <call><name>ObjectInputStream</name><argument_list>(<argument><expr><name>fileStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>object</name> <operator>=</operator> <operator>(</operator><name>Serializable</name><operator>)</operator> <call><name><name>objectStream</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cacheReadEndTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>nanoTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get size of serialized object</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>fileSize</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getFileStreamPath</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"TAG"</literal></expr></argument>, <argument><expr><literal type="string">"Read "</literal> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">" from cache ("</literal> <operator>+</operator> <name>fileSize</name>
                        <operator>+</operator> <literal type="string">" bytes) in "</literal> <operator>+</operator> <call><name><name>df</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>getLastCacheReadTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>+</operator> <literal type="string">" ms."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Cache miss - Jackson object '"</literal> <operator>+</operator> <name>objectType</name>
                        <operator>+</operator> <literal type="string">"' does not exist in app cache: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// Reset timestamps to show there was an error</comment>
                <expr_stmt><expr><name>cacheReadStartTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cacheReadEndTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Couldn't read Jackson object '"</literal> <operator>+</operator> <name>objectType</name> <operator>+</operator> <literal type="string">"' from cache: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch> <finally>finally <block>{<block_content>
                <try>try <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>objectStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>objectStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fileStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>fileStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Error closing cache file connections: "</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></catch></try>
            </block_content>}</block></finally></try>

            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>ObjectMapper</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>mapper</name> <operator>=</operator> <operator>(</operator><name>ObjectMapper</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>object</name> <operator>instanceof</operator> <name>ObjectReader</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>reader</name> <operator>=</operator> <operator>(</operator><name>ObjectReader</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>object</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
                    <argument><expr><literal type="string">"Couldn't read from cache - no context provided.  If you want to use the cache, call JacksonConfig.setUsingCache(true, context) with a reference to your context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/LocationUtil.java" hash="8d002a2fef3ae18bbcb41c7f8cb0f9be2d22474c"><comment type="block">/*
 * Copyright 2012 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>maps</name><operator>.</operator><name>model</name><operator>.</operator><name>LatLng</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>maps</name><operator>.</operator><name>android</name><operator>.</operator><name>PolyUtil</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Geocoder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>OTPApp</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name><operator>.</operator><name>GooglePlaces</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name><operator>.</operator><name>Nominatim</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name><operator>.</operator><name>POI</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>pois</name><operator>.</operator><name>Places</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Various utilities related to location data
 *
 * @author Khoa Tran
 */</comment>

<class><specifier>public</specifier> class <name>LocationUtil</name> <block>{

    <comment type="line">// Borrowed from</comment>
    <comment type="line">// http://jeffreysambells.com/posts/2010/05/27/decoding-polylines-from-google-maps-direction-api-with-java/</comment>

    <comment type="block" format="javadoc">/**
     * Decode a set of GeoPoints from an EncodedPolylineBean object from the OTP
     * server project
     *
     * @param encoded string from EncodedPolylineBean
     * @return set of GeoPoints represented by the EncodedPolylineBean string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name></type> <name>decodePoly</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>encoded</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name></type> <name>poly</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>lng</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>encoded</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">63</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>)</condition>;</do>
            <decl_stmt><decl><type><name>int</name></type> <name>dlat</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><name>result</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>result</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>lat</name> <operator>+=</operator> <name>dlat</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>encoded</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">63</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x20</literal></expr>)</condition>;</do>
            <decl_stmt><decl><type><name>int</name></type> <name>dlng</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>result</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>~</operator><operator>(</operator><name>result</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>result</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>lng</name> <operator>+=</operator> <name>dlng</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>LatLng</name></type> <name>ll</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>lat</name> <operator>/</operator> <literal type="number">1E5</literal><operator>)</operator></expr></argument>,
                    <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>lng</name> <operator>/</operator> <literal type="number">1E5</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>poly</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <return>return <expr><name>poly</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Compares the current location of the user against a bounding box for a OTP server
     *
     * @param location        current location of the user
     * @param selectedServer  OTP server being compared to the current location
     * @return true if the location of the user is within the bounding box of the selectedServer,
     * false if it is not
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>checkPointInBoundingBox</name><parameter_list>(<parameter><decl><type><name>LatLng</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>lowerLeft</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>upperLeft</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>upperRight</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LatLng</name></type> <name>lowerRight</name> <init>= <expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name></type> <name>rectangle</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>LatLng</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rectangle</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lowerLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rectangle</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>upperLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rectangle</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>upperRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rectangle</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lowerRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>PolyUtil</name><operator>.</operator><name>containsLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>rectangle</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>processGeocoding</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>,
                                                            <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>processGeocoding</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>reqs</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>processGeocoding</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>geocodingForMarker</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>reqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addressesReturn</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><name><name>reqs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>address</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>latitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>longitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>latLngSet</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <try>try<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>reqs</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>latitude</name> <operator>=</operator> <call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>reqs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>longitude</name> <operator>=</operator> <call><name><name>Double</name><operator>.</operator><name>parseDouble</name></name><argument_list>(<argument><expr><name><name>reqs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>latLngSet</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Geocoding without reference latitude/longitude"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <if_stmt><if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>latLngSet</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>CustomAddress</name></type> <name>addressReturn</name> <init>= <expr><operator>new</operator> <call><name>CustomAddress</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>addressReturn</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>addressReturn</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>addressReturn</name><operator>.</operator><name>setAddressLine</name></name><argument_list>(<argument><expr><call><name><name>addressReturn</name><operator>.</operator><name>getMaxAddressLineIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>text_box_my_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>addressesReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>addressReturn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>addressesReturn</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_USE_ANDROID_GEOCODER</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Geocoder</name></type> <name>gc</name> <init>= <expr><operator>new</operator> <call><name>Geocoder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>androidTypeAddresses</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>androidTypeAddresses</name> <operator>=</operator> <call><name><name>gc</name><operator>.</operator><name>getFromLocationName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>,
                            <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>geocoder_max_results</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>androidTypeAddresses</name> <operator>=</operator> <call><name><name>gc</name><operator>.</operator><name>getFromLocationName</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>,
                            <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInteger</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>integer</name><operator>.</operator><name>geocoder_max_results</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <for>for <control>(<init><decl><type><name>Address</name></type> <name>androidTypeAddress</name> <range>: <expr><name>androidTypeAddresses</name></expr></range></decl></init>)</control><block>{<block_content>
                    <expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CustomAddress</name><argument_list>(<argument><expr><name>androidTypeAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>filterAddressesBBox</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>resultsCloseEnough</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>geocodingForMarker</name> <operator>&amp;&amp;</operator> <name>latLngSet</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name><name>results</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>resultsCloseEnough</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>CustomAddress</name></type> <name>addressToCheck</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control><block>{<block_content>
                <expr_stmt><expr><call><name><name>Location</name><operator>.</operator><name>distanceBetween</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>longitude</name></expr></argument>,
                        <argument><expr><call><name><name>addressToCheck</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>addressToCheck</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>OTPApp</name><operator>.</operator><name>GEOCODING_MAX_ERROR</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>resultsCloseEnough</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>addresses</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name><name>addresses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>resultsCloseEnough</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>addresses</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>addresses</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>searchPlaces</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>CustomAddress</name></type> <name>addressRetrieved</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><call><name><name>addressRetrieved</name><operator>.</operator><name>getAddressLine</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>addressLines</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>addressLines</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>addressRetrieved</name><operator>.</operator><name>setAddressLine</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><call><name><name>addressLines</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>addresses</name> <operator>=</operator> <call><name>filterAddressesBBox</name><argument_list>(<argument><expr><name>selectedServer</name></expr></argument>, <argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>geocodingForMarker</name> <operator>&amp;&amp;</operator> <name>latLngSet</name> <operator>&amp;&amp;</operator> <name>addresses</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>addresses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name><name>results</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>minDistanceToOriginalLatLon</name> <init>= <expr><name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CustomAddress</name></type> <name>closestAddress</name> <init>= <expr><call><name><name>addresses</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>CustomAddress</name></type> <name>addressToCheck</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control><block>{<block_content>
                <expr_stmt><expr><call><name><name>Location</name><operator>.</operator><name>distanceBetween</name></name><argument_list>(<argument><expr><name>latitude</name></expr></argument>, <argument><expr><name>longitude</name></expr></argument>,
                        <argument><expr><call><name><name>addressToCheck</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>addressToCheck</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>minDistanceToOriginalLatLon</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>closestAddress</name> <operator>=</operator> <name>addressToCheck</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minDistanceToOriginalLatLon</name> <operator>=</operator> <name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>addressesReturn</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>closestAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <expr_stmt><expr><call><name><name>addressesReturn</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <return>return <expr><name>addressesReturn</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Filters the addresses obtained in geocoding process, removing the
     * results outside server limits.
     *
     * @param addresses list of addresses to filter
     * @return a new list filtered
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>filterAddressesBBox</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>addresses</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>addresses</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>it</name><init>=<expr><call><name><name>addresses</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>CustomAddress</name></type> <name>address</name> <init>= <expr><call><name><name>it</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>LocationUtil</name><operator>.</operator><name>checkPointInBoundingBox</name></name><argument_list>(
                        <argument><expr><operator>new</operator> <call><name>LatLng</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>selectedServer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>it</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>addresses</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Try to grab the developer key from an unversioned resource file, if it exists
     *
     * @param context
     * @param apiKeyResourceId Resource ID of the raw file containing the API key
     * @return the developer key from a resource file, or empty string if it doesn't
     * exist
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>getKeyFromResource</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>apiKeyResourceId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>strKey</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{<block_content>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openRawResource</name><argument_list>(<argument><expr><name>apiKeyResourceId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>r</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>total</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><operator>(</operator><name>strKey</name> <operator>=</operator> <call><name><name>r</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>total</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>strKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>

            <expr_stmt><expr><name>strKey</name> <operator>=</operator> <call><name><name>total</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>strKey</name> <operator>=</operator> <call><name><name>strKey</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//Remove any whitespace</comment>
        </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>Resources</name><operator>.</operator><name>NotFoundException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Warning - didn't find the google places key file:"</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Error reading the developer key file:"</literal> <operator>+</operator> <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>

        <return>return <expr><name>strKey</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>searchPlaces</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Places</name></type> <name>p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>mPrefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(
                <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>placesService</name> <init>= <expr><call><name><name>mPrefs</name><operator>.</operator><name>getString</name></name><argument_list>(
                <argument><expr><name><name>OTPApp</name><operator>.</operator><name>PREFERENCE_KEY_GEOCODER_PROVIDER</name></name></expr></argument>,
                <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_nominatim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>placesService</name>
                <operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>geocoder_google_places</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>GooglePlaces</name><operator>.</operator><name>PARAM_NAME</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>GooglePlaces</name><operator>.</operator><name>PARAM_LOCATION</name></name></expr></argument>,
                        <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getGeometricalCenterLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
                                <operator>+</operator> <call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getGeometricalCenterLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>GooglePlaces</name><operator>.</operator><name>PARAM_RADIUS</name></name></expr></argument>, <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getRadius</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>GooglePlaces</name><argument_list>(<argument><expr><call><name>getKeyFromResource</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>googleplaceskey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Using Google Places!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Nominatim</name><operator>.</operator><name>PARAM_NAME</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>selectedServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Nominatim</name><operator>.</operator><name>PARAM_LEFT</name></name></expr></argument>,
                        <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Nominatim</name><operator>.</operator><name>PARAM_TOP</name></name></expr></argument>,
                        <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getLowerLeftLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Nominatim</name><operator>.</operator><name>PARAM_RIGHT</name></name></expr></argument>,
                        <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>Nominatim</name><operator>.</operator><name>PARAM_BOTTOM</name></name></expr></argument>,
                        <argument><expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>selectedServer</name><operator>.</operator><name>getUpperRightLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name>Nominatim</name><argument_list>(<argument><expr><call><name>getKeyFromResource</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>mapquestgeocoderkey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><literal type="string">"Using Nominatim!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name></type> <name>pois</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>POI</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pois</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getPlaces</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>POI</name></type> <name>poi</name> <range>: <expr><name>pois</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>OTPApp</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><call><name><name>poi</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>poi</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>poi</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CustomAddress</name></type> <name>address</name> <init>= <expr><operator>new</operator> <call><name>CustomAddress</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>address</name><operator>.</operator><name>setLatitude</name></name><argument_list>(<argument><expr><call><name><name>poi</name><operator>.</operator><name>getLatitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>address</name><operator>.</operator><name>setLongitude</name></name><argument_list>(<argument><expr><call><name><name>poi</name><operator>.</operator><name>getLongitude</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>addressLine</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>poi</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>poi</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>poi</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>addressLine</name> <operator>=</operator> <operator>(</operator><call><name><name>poi</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>poi</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>addressLine</name> <operator>=</operator> <call><name><name>poi</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>addressLine</name> <operator>=</operator> <call><name><name>poi</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name><name>address</name><operator>.</operator><name>setAddressLine</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>getMaxAddressLineIndex</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>addressLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>addresses</name></expr>;</return>
    </block_content>}</block></function>


}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/PlacesAutoCompleteAdapter.java" hash="92c6110538437226b862dd604b6997fca6d751d3"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filterable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>model</name><operator>.</operator><name>Server</name></name>;</import>
<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>CustomAddress</name></name>;</import>

<class><specifier>public</specifier> class <name>PlacesAutoCompleteAdapter</name> <super_list><extends>extends <super><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></super></extends> <implements>implements <super><name>Filterable</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Server</name></type> <name>selectedServer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name></type> <name>resultList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CustomAddress</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>PlacesAutoCompleteAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textViewResourceId</name></decl></parameter>,
                                     <parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>textViewResourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedServer</name></name> <operator>=</operator> <name>selectedServer</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>resultList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><call><name><name>resultList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>CustomAddress</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>resultList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>Filter</name></type> <name>getFilter</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Filter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <class><super><name>Filter</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name><name>Filter</name><operator>.</operator><name>FilterResults</name></name></type> <name>performFiltering</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>FilterResults</name></type> <name>filterResults</name> <init>= <expr><operator>new</operator> <call><name>FilterResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>constraint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// Retrieve the autocomplete results.</comment>
                        <expr_stmt><expr><name>resultList</name> <operator>=</operator> <call><name><name>LocationUtil</name><operator>.</operator><name>processGeocoding</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>selectedServer</name></expr></argument>,
                                <argument><expr><call><name><name>constraint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>resultList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block>{<block_content>
                        <comment type="line">// Assign the data to the FilterResults</comment>
                        <expr_stmt><expr><name><name>filterResults</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>resultList</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>filterResults</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name><name>resultList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>filterResults</name></expr>;</return>
            </block_content>}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>protected</specifier> <name>void</name></type> <name>publishResults</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>, <parameter><decl><type><name>FilterResults</name></type> <name>results</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>results</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>results</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>notifyDataSetInvalidated</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>}</block></class></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>filter</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Server</name></type> <name>getSelectedServer</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>selectedServer</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedServer</name><parameter_list>(<parameter><decl><type><name>Server</name></type> <name>selectedServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedServer</name></name> <operator>=</operator> <name>selectedServer</name></expr>;</expr_stmt>
    </block_content>}</block></function>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/RangeSeekBar.java" hash="0c2dafead4f8d161cad1fc789a1d508fcd106e42"><comment type="block">/*
 * Copyright 2013 Stephan Tittel, Peter Sinnott, and Thomas Barrasso
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 * See https://code.google.com/p/range-seek-bar/ for details.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewConfiguration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigDecimal</name></name>;</import>

<import>import <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Widget that lets users select a minimum and maximum value on a given
 * numerical range. The range value types can be one of Long, Double, Integer,
 * Float, Short, Byte or BigDecimal.&lt;br /&gt;
 * &lt;br /&gt;
 * Improved {@link MotionEvent} handling for smoother use, anti-aliased painting
 * for improved aesthetics.
 *
 * @param &lt;T&gt; The Number type of the range values. One of Long, Double, Integer,
 *            Float, Short, Byte or BigDecimal.
 * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
 * @author Peter Sinnott (psinnott@gmail.com)
 * @author Thomas Barrasso (tbarrasso@sevenplusandroid.org)
 */</comment>
<class><specifier>public</specifier> class <name><name>RangeSeekBar</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>Number</name></extends></parameter>&gt;</parameter_list></name> <super_list><extends>extends <super><name>ImageView</name></super></extends></super_list> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>ANTI_ALIAS_FLAG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// private final Bitmap thumbImage = BitmapFactory.decodeResource(</comment>
    <comment type="line">// getResources(), R.drawable.seek_thumb_normal);</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Bitmap</name></type> <name>thumbImage</name></decl>;</decl_stmt>

    <comment type="line">// private final Bitmap thumbPressedImage = BitmapFactory.decodeResource(</comment>
    <comment type="line">// getResources(), R.drawable.seek_thumb_pressed);</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Bitmap</name></type> <name>thumbPressedImage</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>thumbWidth</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>thumbHalfWidth</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>thumbHalfHeight</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>lineHeight</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>float</name></type> <name>padding</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>T</name></type> <name>absoluteMinValue</name></decl>, <decl><type ref="prev"/><name>absoluteMaxValue</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>NumberType</name></type> <name>numberType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>double</name></type> <name>absoluteMinValuePrim</name></decl>, <decl><type ref="prev"/><name>absoluteMaxValuePrim</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>normalizedMinValue</name> <init>= <expr><literal type="number">0d</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>normalizedMaxValue</name> <init>= <expr><literal type="number">1d</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>Thumb</name></type> <name>pressedThumb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>notifyWhileDragging</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>IS_MULTI_COLORED</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>final</specifier> <name>int</name></type> <name>SINGLE_COLOR</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>LEFT_COLOR</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>MIDDLE_COLOR</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>RIGHT_COLOR</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BACKGROUND_COLOR</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>GRAY</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>OnRangeSeekBarChangeListener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>listener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default color of a {@link RangeSeekBar}, #FF33B5E5. This is also known as
     * "Ice Cream Sandwich" blue.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_COLOR</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Callback listener interface to notify about changed range values.
     *
     * @param &lt;T&gt; The Number type the RangeSeekBar has been declared with.
     * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
     */</comment>
    <interface><specifier>public</specifier> interface <name><name>OnRangeSeekBarChangeListener</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{

        <function_decl><type><specifier>public</specifier> <name>void</name></type> <name>onRangeSeekBarValuesChanged</name><parameter_list>(<parameter><decl><type><name><name>RangeSeekBar</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>bar</name></decl></parameter>,
                <parameter><decl><type><name>T</name></type> <name>minValue</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>maxValue</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * Registers given listener callback to notify about changed selected
     * values.
     *
     * @param listener The listener to notify about changed selected values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOnRangeSeekBarChangeListener</name><parameter_list>(
            <parameter><decl><type><name><name>OnRangeSeekBarChangeListener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * An invalid pointer id.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>INVALID_POINTER_ID</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Localized constants from MotionEvent for compatibility</comment>
    <comment type="line">// with API &lt; 8 "Froyo".</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ACTION_POINTER_UP</name> <init>= <expr><literal type="number">0x6</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>ACTION_POINTER_INDEX_MASK</name> <init>= <expr><literal type="number">0x0000ff00</literal></expr></init></decl>,
            <decl><type ref="prev"/><name>ACTION_POINTER_INDEX_SHIFT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>mDownMotionX</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mActivePointerId</name> <init>= <expr><name>INVALID_POINTER_ID</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * On touch, this offset plus the scaled value from the position of the
     * touch will form the progress value. Usually 0.
     */</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>mTouchProgressOffset</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>mScaledTouchSlop</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>mIsDragging</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new RangeSeekBar.
     *
     * @param absoluteMinValue The minimum value of the selectable range.
     * @param absoluteMaxValue The maximum value of the selectable range.
     * @throws IllegalArgumentException Will be thrown if min/max value type is not one of Long,
     *                                  Double, Integer, Float, Short, Byte or BigDecimal.
     */</comment>
    <constructor><specifier>public</specifier> <name>RangeSeekBar</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>absoluteMinValue</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>absoluteMaxValue</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMinValue</name></name> <operator>=</operator> <name>absoluteMinValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMaxValue</name></name> <operator>=</operator> <name>absoluteMaxValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMinValuePrim</name> <operator>=</operator> <call><name><name>absoluteMinValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMaxValuePrim</name> <operator>=</operator> <call><name><name>absoluteMaxValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numberType</name> <operator>=</operator> <call><name><name>NumberType</name><operator>.</operator><name>fromNumber</name></name><argument_list>(<argument><expr><name>absoluteMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IS_MULTI_COLORED</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>SINGLE_COLOR</name> <operator>=</operator> <call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>, <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>LEFT_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>MIDDLE_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>RIGHT_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>seek_thumb_normal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbPressedImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>seek_thumb_pressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbWidth</name> <operator>=</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfWidth</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thumbWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfHeight</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineHeight</name> <operator>=</operator> <literal type="number">0.3f</literal> <operator>*</operator> <name>thumbHalfHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>thumbHalfWidth</name></expr>;</expr_stmt>

        <comment type="line">// make RangeSeekBar focusable. This solves focus handling issues in</comment>
        <comment type="line">// case EditText widgets are being used along with the RangeSeekBar</comment>
        <comment type="line">// within ScollViews.</comment>
        <expr_stmt><expr><call><name>setFocusable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFocusableInTouchMode</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new RangeSeekBar.
     *
     * @param absoluteMinValue   The minimum value of the selectable range.
     * @param absoluteMaxValue   The maximum value of the selectable range.
     * @param singleColor        The &lt;tt&gt;int&lt;/tt&gt; of the color to go between the two thumb
     *                           points will Default to #FF33B5E5 (ICS) if 0 is sent.
     * @param thumbNormal_ResID  The ResourceID of the image for the normal thumb icon.
     * @param thumbPressed_ResID The ResourceID of the image for the pressed thumb icon.
     * @throws IllegalArgumentException Will be thrown if min/max value type is not one of Long,
     *                                  Double, Integer, Float, Short, Byte or BigDecimal.
     */</comment>
    <constructor><specifier>public</specifier> <name>RangeSeekBar</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>absoluteMinValue</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>absoluteMaxValue</name></decl></parameter>,
            <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>singleColor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thumbNormal_ResID</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>thumbPressed_ResID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMinValue</name></name> <operator>=</operator> <name>absoluteMinValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMaxValue</name></name> <operator>=</operator> <name>absoluteMaxValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMinValuePrim</name> <operator>=</operator> <call><name><name>absoluteMinValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMaxValuePrim</name> <operator>=</operator> <call><name><name>absoluteMaxValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numberType</name> <operator>=</operator> <call><name><name>NumberType</name><operator>.</operator><name>fromNumber</name></name><argument_list>(<argument><expr><name>absoluteMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IS_MULTI_COLORED</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>SINGLE_COLOR</name> <operator>=</operator> <ternary><condition><expr><name>singleColor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>singleColor</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x33</literal></expr></argument>,
                <argument><expr><literal type="number">0xB5</literal></expr></argument>, <argument><expr><literal type="number">0xE5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>LEFT_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>MIDDLE_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>RIGHT_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>thumbNormal_ResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbPressedImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>thumbPressed_ResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbWidth</name> <operator>=</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfWidth</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thumbWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfHeight</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineHeight</name> <operator>=</operator> <literal type="number">0.3f</literal> <operator>*</operator> <name>thumbHalfHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>thumbHalfWidth</name></expr>;</expr_stmt>

        <comment type="line">// make RangeSeekBar focusable. This solves focus handling issues in</comment>
        <comment type="line">// case EditText widgets are being used along with the RangeSeekBar</comment>
        <comment type="line">// within ScollViews.</comment>
        <expr_stmt><expr><call><name>setFocusable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFocusableInTouchMode</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new RangeSeekBar.
     *
     * @param absoluteMinValue   The minimum value of the selectable range.
     * @param absoluteMaxValue   The maximum value of the selectable range.
     * @param leftColor          The &lt;tt&gt;int&lt;/tt&gt; of the color to go between the left most
     *                           point and the left (min) thumb point. will Default to
     *                           #FFFF0000 (RED) if 0 is sent.
     * @param middleColor        The &lt;tt&gt;int&lt;/tt&gt; of the color to go between the two thumb
     *                           points will Default to #FF00FF00 (GREEN) if 0 is sent.
     * @param rightColor         The &lt;tt&gt;int&lt;/tt&gt; of the color to go between the right most
     *                           point and the right (max) thumb point. will Default to
     *                           #FF0000FF (BLUE) if 0 is sent.
     * @param thumbNormal_ResID  The ResourceID of the image for the normal thumb icon.
     * @param thumbPressed_ResID The ResourceID of the image for the pressed thumb icon.
     * @throws IllegalArgumentException Will be thrown if min/max value type is not one of Long,
     *                                  Double, Integer, Float, Short, Byte or BigDecimal.
     */</comment>
    <constructor><specifier>public</specifier> <name>RangeSeekBar</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>absoluteMinValue</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>absoluteMaxValue</name></decl></parameter>,
            <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>leftColor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>middleColor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rightColor</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>thumbNormal_ResID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thumbPressed_ResID</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMinValue</name></name> <operator>=</operator> <name>absoluteMinValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>absoluteMaxValue</name></name> <operator>=</operator> <name>absoluteMaxValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMinValuePrim</name> <operator>=</operator> <call><name><name>absoluteMinValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>absoluteMaxValuePrim</name> <operator>=</operator> <call><name><name>absoluteMaxValue</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numberType</name> <operator>=</operator> <call><name><name>NumberType</name><operator>.</operator><name>fromNumber</name></name><argument_list>(<argument><expr><name>absoluteMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Added so we can draw right colors</comment>
        <expr_stmt><expr><name>IS_MULTI_COLORED</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>SINGLE_COLOR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>LEFT_COLOR</name> <operator>=</operator> <ternary><condition><expr><name>leftColor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>leftColor</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
                <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>MIDDLE_COLOR</name> <operator>=</operator> <ternary><condition><expr><name>middleColor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>middleColor</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
                <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>RIGHT_COLOR</name> <operator>=</operator> <ternary><condition><expr><name>rightColor</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>rightColor</name></expr> </then><else>: <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,
                <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>thumbNormal_ResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbPressedImage</name> <operator>=</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>thumbPressed_ResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbWidth</name> <operator>=</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfWidth</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <name>thumbWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>thumbHalfHeight</name> <operator>=</operator> <literal type="number">0.5f</literal> <operator>*</operator> <call><name><name>thumbImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lineHeight</name> <operator>=</operator> <literal type="number">0.3f</literal> <operator>*</operator> <name>thumbHalfHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>padding</name> <operator>=</operator> <name>thumbHalfWidth</name></expr>;</expr_stmt>

        <comment type="line">// make RangeSeekBar focusable. This solves focus handling issues in</comment>
        <comment type="line">// case EditText widgets are being used along with the RangeSeekBar</comment>
        <comment type="line">// within ScollViews.</comment>
        <expr_stmt><expr><call><name>setFocusable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFocusableInTouchMode</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>mScaledTouchSlop</name> <operator>=</operator> <call><name><name>ViewConfiguration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getScaledTouchSlop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNotifyWhileDragging</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>notifyWhileDragging</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Should the widget notify the listener callback while the user is still
     * dragging a thumb? Default is false.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNotifyWhileDragging</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notifyWhileDragging</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the absolute minimum value of the range that has been set at
     * construction time.
     *
     * @return The absolute minimum value of the range.
     */</comment>
    <function><type><specifier>public</specifier> <name>T</name></type> <name>getAbsoluteMinValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>absoluteMinValue</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the absolute maximum value of the range that has been set at
     * construction time.
     *
     * @return The absolute maximum value of the range.
     */</comment>
    <function><type><specifier>public</specifier> <name>T</name></type> <name>getAbsoluteMaxValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>absoluteMaxValue</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the currently selected min value.
     *
     * @return The currently selected min value.
     */</comment>
    <function><type><specifier>public</specifier> <name>T</name></type> <name>getSelectedMinValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>normalizedToValue</name><argument_list>(<argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the currently selected minimum value. The widget will be invalidated
     * and redrawn.
     *
     * @param value The Number value to set the minimum value to. Will be clamped
     *              to given absolute minimum/maximum range.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedMinValue</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// in case absoluteMinValue == absoluteMaxValue, avoid division by zero</comment>
        <comment type="line">// when normalizing.</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>absoluteMaxValuePrim</name> <operator>-</operator> <name>absoluteMinValuePrim</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMinValue</name><argument_list>(<argument><expr><literal type="number">0d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMinValue</name><argument_list>(<argument><expr><call><name>valueToNormalized</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the currently selected max value.
     *
     * @return The currently selected max value.
     */</comment>
    <function><type><specifier>public</specifier> <name>T</name></type> <name>getSelectedMaxValue</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>normalizedToValue</name><argument_list>(<argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets the currently selected maximum value. The widget will be invalidated
     * and redrawn.
     *
     * @param value The Number value to set the maximum value to. Will be clamped
     *              to given absolute minimum/maximum range.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSelectedMaxValue</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// in case absoluteMinValue == absoluteMaxValue, avoid division by zero</comment>
        <comment type="line">// when normalizing.</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>absoluteMaxValuePrim</name> <operator>-</operator> <name>absoluteMinValuePrim</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMaxValue</name><argument_list>(<argument><expr><literal type="number">1d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMaxValue</name><argument_list>(<argument><expr><call><name>valueToNormalized</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Handles thumb selection and movement. Notifies listener callback on
     * certain events.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isEnabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>pointerIndex</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>action</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>action</name> <operator>&amp;</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MASK</name></name></expr>)</condition> <block>{<block_content>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
                <comment type="line">// Remember where the motion event started</comment>
                <expr_stmt><expr><name>mActivePointerId</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getPointerId</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getPointerCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pointerIndex</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>findPointerIndex</name></name><argument_list>(<argument><expr><name>mActivePointerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mDownMotionX</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>pressedThumb</name> <operator>=</operator> <call><name>evalPressedThumb</name><argument_list>(<argument><expr><name>mDownMotionX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Only handle thumb presses.</comment>
                <if_stmt><if>if <condition>(<expr><name>pressedThumb</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>super</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>onStartTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>trackTouchEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>attemptClaimDrag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>pressedThumb</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>

                    <if_stmt><if>if <condition>(<expr><name>mIsDragging</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>trackTouchEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <comment type="line">// Scroll to follow the motion event</comment>
                        <expr_stmt><expr><name>pointerIndex</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>findPointerIndex</name></name><argument_list>(<argument><expr><name>mActivePointerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>mDownMotionX</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>mScaledTouchSlop</name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>onStartTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>trackTouchEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>attemptClaimDrag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>notifyWhileDragging</name> <operator>&amp;&amp;</operator> <name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRangeSeekBarValuesChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                                <argument><expr><call><name>getSelectedMinValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getSelectedMaxValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>mIsDragging</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>trackTouchEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>onStopTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// Touch up when we never crossed the touch slop threshold</comment>
                    <comment type="line">// should be interpreted as a tap-seek to that location.</comment>
                    <expr_stmt><expr><call><name>onStartTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>trackTouchEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>onStopTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><name>pressedThumb</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRangeSeekBarValuesChanged</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,
                            <argument><expr><call><name>getSelectedMinValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getSelectedMaxValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_POINTER_DOWN</name></name></expr>:</case> <block>{<block_content>
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getPointerCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <comment type="line">// final int index = ev.getActionIndex();</comment>
                <expr_stmt><expr><name>mDownMotionX</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mActivePointerId</name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getPointerId</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_POINTER_UP</name></name></expr>:</case>
                <expr_stmt><expr><call><name>onSecondaryPointerUp</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>mIsDragging</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>onStopTrackingTouch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>setPressed</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// see above explanation</comment>
                <break>break;</break>
        </block_content>}</block></switch>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>onSecondaryPointerUp</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pointerIndex</name> <init>= <expr><operator>(</operator><call><name><name>ev</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>ACTION_POINTER_INDEX_MASK</name><operator>)</operator>
                <operator>&gt;&gt;</operator> <name>ACTION_POINTER_INDEX_SHIFT</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pointerId</name> <init>= <expr><call><name><name>ev</name><operator>.</operator><name>getPointerId</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pointerId</name> <operator>==</operator> <name>mActivePointerId</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// This was our active pointer going up. Choose</comment>
            <comment type="line">// a new active pointer and adjust accordingly.</comment>
            <comment type="line">// TODO: Make this decision more intelligent.</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>newPointerIndex</name> <init>= <expr><ternary><condition><expr><name>pointerIndex</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mDownMotionX</name> <operator>=</operator> <call><name><name>ev</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>newPointerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mActivePointerId</name> <operator>=</operator> <call><name><name>ev</name><operator>.</operator><name>getPointerId</name></name><argument_list>(<argument><expr><name>newPointerIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <specifier>final</specifier> <name>void</name></type> <name>trackTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pointerIndex</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>findPointerIndex</name></name><argument_list>(<argument><expr><name>mActivePointerId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Thumb</name><operator>.</operator><name>MIN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pressedThumb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMinValue</name><argument_list>(<argument><expr><call><name>screenToNormalized</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>Thumb</name><operator>.</operator><name>MAX</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pressedThumb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>setNormalizedMaxValue</name><argument_list>(<argument><expr><call><name>screenToNormalized</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Tries to claim the user's drag motion, and requests disallowing any
     * ancestors from stealing events in the drag.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>attemptClaimDrag</name><parameter_list>()</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getParent</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>getParent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>requestDisallowInterceptTouchEvent</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is called when the user has started touching this widget.
     */</comment>
    <function><type><name>void</name></type> <name>onStartTrackingTouch</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>mIsDragging</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * This is called when the user either releases his touch or the touch is
     * canceled.
     */</comment>
    <function><type><name>void</name></type> <name>onStopTrackingTouch</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>mIsDragging</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Ensures correct size of the widget.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>MeasureSpec</name><operator>.</operator><name>UNSPECIFIED</name></name> <operator>!=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>thumbImage</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>MeasureSpec</name><operator>.</operator><name>UNSPECIFIED</name></name> <operator>!=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>getMode</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Draws the widget on the given canvas.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>IS_MULTI_COLORED</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// draw seek bar background line</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>rect</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>lineHeight</name><operator>)</operator></expr></argument>, <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>+</operator> <name>lineHeight</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>BACKGROUND_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw seek bar active range line</comment>
            <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rect</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// orange color</comment>
            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>SINGLE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>rectR</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>lineHeight</name><operator>)</operator></expr></argument>,
                    <argument><expr><call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>+</operator> <name>lineHeight</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>LEFT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>rectR</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw seek bar background line</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>rectY</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>lineHeight</name><operator>)</operator></expr></argument>, <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>+</operator> <name>lineHeight</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// draw seek bar active range line</comment>
            <expr_stmt><expr><name><name>rectY</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rectY</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>MIDDLE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>rectY</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>RectF</name></type> <name>rectG</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(
                    <argument><expr><call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>lineHeight</name><operator>)</operator></expr></argument>, <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <name>padding</name></expr></argument>,
                    <argument><expr><literal type="number">0.5f</literal> <operator>*</operator> <operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>+</operator> <name>lineHeight</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>RIGHT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>rectG</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// draw minimum thumb</comment>
        <expr_stmt><expr><call><name>drawThumb</name><argument_list>(<argument><expr><call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>Thumb</name><operator>.</operator><name>MIN</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pressedThumb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw maximum thumb</comment>
        <expr_stmt><expr><call><name>drawThumb</name><argument_list>(<argument><expr><call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>Thumb</name><operator>.</operator><name>MAX</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>pressedThumb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Overridden to save instance state when device orientation changes. This
     * method is called automatically if you assign an id to the RangeSeekBar
     * widget using the {@link #setId(int)} method. Other members of this class
     * than the normalized min and max values don't need to be saved.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"SUPER"</literal></expr></argument>, <argument><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putDouble</name></name><argument_list>(<argument><expr><literal type="string">"MIN"</literal></expr></argument>, <argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putDouble</name></name><argument_list>(<argument><expr><literal type="string">"MAX"</literal></expr></argument>, <argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>bundle</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Overridden to restore instance state when device orientation changes.
     * This method is called automatically if you assign an id to the
     * RangeSeekBar widget using the {@link #setId(int)} method.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>protected</specifier> <name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>parcel</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>(</operator><name>Bundle</name><operator>)</operator> <name>parcel</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><literal type="string">"SUPER"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>normalizedMinValue</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>normalizedMaxValue</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><literal type="string">"MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Draws the "normal" resp. "pressed" thumb image on specified x-coordinate.
     *
     * @param screenCoord The x-coordinate in screen space where to draw the image.
     * @param pressed     Is the thumb currently in "pressed" state?
     * @param canvas      The canvas to draw upon.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawThumb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>screenCoord</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>pressed</name></decl></parameter>, <parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>pressed</name></expr> ?</condition><then> <expr><name>thumbPressedImage</name></expr> </then><else>: <expr><name>thumbImage</name></expr></else></ternary></expr></argument>, <argument><expr><name>screenCoord</name>
                <operator>-</operator> <name>thumbHalfWidth</name></expr></argument>,
                <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><operator>(</operator><literal type="number">0.5f</literal> <operator>*</operator> <call><name>getHeight</name><argument_list>()</argument_list></call><operator>)</operator> <operator>-</operator> <name>thumbHalfHeight</name><operator>)</operator></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Decides which (if any) thumb is touched by the given x-coordinate.
     *
     * @param touchX The x-coordinate of a touch event in screen space.
     * @return The pressed thumb or null if none has been touched.
     */</comment>
    <function><type><specifier>private</specifier> <name>Thumb</name></type> <name>evalPressedThumb</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>touchX</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>Thumb</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>minThumbPressed</name> <init>= <expr><call><name>isInThumbRange</name><argument_list>(<argument><expr><name>touchX</name></expr></argument>, <argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>maxThumbPressed</name> <init>= <expr><call><name>isInThumbRange</name><argument_list>(<argument><expr><name>touchX</name></expr></argument>, <argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>minThumbPressed</name> <operator>&amp;&amp;</operator> <name>maxThumbPressed</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// if both thumbs are pressed (they lie on top of each other),</comment>
            <comment type="line">// choose the one with more room to drag. this avoids "stalling" the</comment>
            <comment type="line">// thumbs in a corner, not being able to drag them apart anymore.</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>touchX</name> <operator>/</operator> <call><name>getWidth</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0.5f</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>Thumb</name><operator>.</operator><name>MIN</name></name></expr> </then><else>: <expr><name><name>Thumb</name><operator>.</operator><name>MAX</name></name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>minThumbPressed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>Thumb</name><operator>.</operator><name>MIN</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>maxThumbPressed</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>Thumb</name><operator>.</operator><name>MAX</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Decides if given x-coordinate in screen space needs to be interpreted as
     * "within" the normalized thumb x-coordinate.
     *
     * @param touchX               The x-coordinate in screen space to check.
     * @param normalizedThumbValue The normalized x-coordinate of the thumb to check.
     * @return true if x-coordinate is in thumb range, false otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isInThumbRange</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>touchX</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>normalizedThumbValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>touchX</name> <operator>-</operator> <call><name>normalizedToScreen</name><argument_list>(<argument><expr><name>normalizedThumbValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>thumbHalfWidth</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets normalized min value to value so that 0 &lt;= value &lt;= normalized max
     * value &lt;= 1. The View will get invalidated when calling this method.
     *
     * @param value The new normalized min value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNormalizedMinValue</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>normalizedMinValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0d</literal></expr></argument>,
                <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1d</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>normalizedMaxValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Sets normalized max value to value so that 0 &lt;= normalized min value &lt;=
     * value &lt;= 1. The View will get invalidated when calling this method.
     *
     * @param value The new normalized max value to set.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNormalizedMaxValue</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>normalizedMaxValue</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0d</literal></expr></argument>,
                <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1d</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>normalizedMinValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts a normalized value to a Number object in the value space between
     * absolute minimum and maximum.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>private</specifier> <name>T</name></type> <name>normalizedToValue</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>normalized</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>numberType</name><operator>.</operator><name>toNumber</name></name><argument_list>(<argument><expr><name>absoluteMinValuePrim</name> <operator>+</operator> <name>normalized</name>
                <operator>*</operator> <operator>(</operator><name>absoluteMaxValuePrim</name> <operator>-</operator> <name>absoluteMinValuePrim</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the given Number value to a normalized double.
     *
     * @param value The Number value to normalize.
     * @return The normalized double.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>valueToNormalized</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>absoluteMaxValuePrim</name> <operator>-</operator> <name>absoluteMinValuePrim</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// prevent division by zero, simply return 0.</comment>
            <return>return <expr><literal type="number">0d</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name><name>value</name><operator>.</operator><name>doubleValue</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>absoluteMinValuePrim</name><operator>)</operator>
                <operator>/</operator> <operator>(</operator><name>absoluteMaxValuePrim</name> <operator>-</operator> <name>absoluteMinValuePrim</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts a normalized value into screen space.
     *
     * @param normalizedCoord The normalized value to convert.
     * @return The converted value in screen space.
     */</comment>
    <function><type><specifier>private</specifier> <name>float</name></type> <name>normalizedToScreen</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>normalizedCoord</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>padding</name> <operator>+</operator> <name>normalizedCoord</name> <operator>*</operator> <operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>padding</name><operator>)</operator><operator>)</operator></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Converts screen space x-coordinates into normalized values.
     *
     * @param screenCoord The x-coordinate in screen space to convert.
     * @return The normalized value.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>screenToNormalized</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>screenCoord</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>padding</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// prevent division by zero, simply return 0.</comment>
            <return>return <expr><literal type="number">0d</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>screenCoord</name> <operator>-</operator> <name>padding</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>padding</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">1d</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0d</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Thumb constants (min and max).
     */</comment>
    <enum><specifier>private</specifier> <specifier>static</specifier> enum <name>Thumb</name> <block>{
        <decl><name>MIN</name></decl>, <decl><name>MAX</name></decl>
    }</block></enum>

    <empty_stmt>;</empty_stmt>

    <comment type="block" format="javadoc">/**
     * Utility enumaration used to convert between Numbers and doubles.
     *
     * @author Stephan Tittel (stephan.tittel@kom.tu-darmstadt.de)
     */</comment>
    <enum><specifier>private</specifier> <specifier>static</specifier> enum <name>NumberType</name> <block>{
        <decl><name>LONG</name></decl>, <decl><name>DOUBLE</name></decl>, <decl><name>INTEGER</name></decl>, <decl><name>FLOAT</name></decl>, <decl><name>SHORT</name></decl>, <decl><name>BYTE</name></decl>, <decl><name>BIG_DECIMAL</name></decl>;

        <function><type><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name> <extends>extends <name>Number</name></extends></parameter>&gt;</parameter_list> <name>NumberType</name></type> <name>fromNumber</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>value</name></decl></parameter>)</parameter_list>
                <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Long</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>LONG</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Double</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>DOUBLE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Integer</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>INTEGER</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Float</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>FLOAT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Short</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>SHORT</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Byte</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>BYTE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>BigDecimal</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>BIG_DECIMAL</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Number class '"</literal>
                    <operator>+</operator> <call><name><name>value</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' is not supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>Number</name></type> <name>toNumber</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>this</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>LONG</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>Long</name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>DOUBLE</name></expr>:</case>
                    <return>return <expr><name>value</name></expr>;</return>
                <case>case <expr><name>INTEGER</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>Integer</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>FLOAT</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>Float</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>SHORT</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>Short</name><argument_list>(<argument><expr><operator>(</operator><name>short</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>BYTE</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>Byte</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return>
                <case>case <expr><name>BIG_DECIMAL</name></expr>:</case>
                    <return>return <expr><operator>new</operator> <call><name>BigDecimal</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></switch>
            <throw>throw <expr><operator>new</operator> <call><name>InstantiationError</name><argument_list>(<argument><expr><literal type="string">"can't convert "</literal> <operator>+</operator> <name>this</name>
                    <operator>+</operator> <literal type="string">" to a Number object"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        </block_content>}</block></function>
    }</block></enum>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLeftColor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>LEFT_COLOR</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLeftColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>leftColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>LEFT_COLOR</name></name> <operator>=</operator> <name>leftColor</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMiddleColor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>MIDDLE_COLOR</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMiddleColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>middleColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>MIDDLE_COLOR</name></name> <operator>=</operator> <name>middleColor</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRightColor</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>RIGHT_COLOR</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRightColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rightColor</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>RIGHT_COLOR</name></name> <operator>=</operator> <name>rightColor</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/RightDrawableOnTouchListener.java" hash="493bcd59a8c9fc345e2e2218ad1d4d65b3e43155"><comment type="block">/*
 * Copyright 2013 University of South Florida
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 */</comment>

<package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>OnTouchListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>RightDrawableOnTouchListener</name> <super_list><implements>implements <super><name>OnTouchListener</name></super></implements></super_list> <block>{

    <decl_stmt><decl><type><name>Drawable</name></type> <name>drawable</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>fuzz</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param view
     */</comment>
    <constructor><specifier>public</specifier> <name>RightDrawableOnTouchListener</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Drawable</name><index>[]</index></name></type> <name>drawables</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getCompoundDrawables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>drawables</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>drawables</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>drawable</name></name> <operator>=</operator> <name><name>drawables</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></constructor>

    <comment type="block">/*
     * (non-Javadoc)
     * 
     * @see android.view.View.OnTouchListener#onTouch(android.view.View, android.view.MotionEvent)
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>boolean</name></type> <name>onTouch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name> <operator>&amp;&amp;</operator> <name>drawable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>bounds</name> <init>= <expr><call><name><name>drawable</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><call><name><name>v</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>bounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>fuzz</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <operator>(</operator>
                    <call><name><name>v</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>v</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>fuzz</name><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <operator>(</operator><call><name><name>v</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>fuzz</name><operator>)</operator>
                    <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <operator>(</operator><call><name><name>v</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>v</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <name>fuzz</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>onDrawableTouch</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>onDrawableTouch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></class></unit>

<unit revision="1.0.0" language="Java" filename="OpenTripPlanner-for-Android-2.1.5/opentripplanner-android/src/main/java/edu/usf/cutr/opentripplanner/android/util/TripInfo.java" hash="021b69d38b402121f883674df613e3723c46a3d1"><package>package <name><name>edu</name><operator>.</operator><name>usf</name><operator>.</operator><name>cutr</name><operator>.</operator><name>opentripplanner</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Created by foucelhas on 15/07/14.
 */</comment>
<class><specifier>public</specifier> class <name>TripInfo</name> <block>{

    <decl_stmt><decl><type><name>boolean</name></type> <name>realtime</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>tripId</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CharSequence</name></type> <name>snippet</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>delayInSeconds</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TripInfo</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>realtime</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tripId</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>snippet</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delayInSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>realtime</name></name> <operator>=</operator> <name>realtime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delayInSeconds</name></name> <operator>=</operator> <name>delayInSeconds</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tripId</name></name> <operator>=</operator> <name>tripId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snippet</name></name> <operator>=</operator> <name>snippet</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRealtime</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>realtime</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRealtime</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>realtime</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>realtime</name></name> <operator>=</operator> <name>realtime</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>getTripId</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>tripId</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTripId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tripId</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tripId</name></name> <operator>=</operator> <name>tripId</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDelayInSeconds</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>delayInSeconds</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDelayInSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>delayInSeconds</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delayInSeconds</name></name> <operator>=</operator> <name>delayInSeconds</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>CharSequence</name></type> <name>getSnippet</name><parameter_list>()</parameter_list> <block>{<block_content>
        <return>return <expr><name>snippet</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSnippet</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>snippet</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snippet</name></name> <operator>=</operator> <name>snippet</name></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>

</unit>
